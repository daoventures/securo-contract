{
  "address": "0xD4C7eCE2E619D6fc82bD89b2a3eCeF71Ebd8dB48",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WBTCTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WAVAXCurrentPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTCurrentPool",
          "type": "uint256"
        }
      ],
      "name": "CurrentComposition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDtAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestUSDT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WAVAXAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestWAVAX",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WBTCAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestWBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestWETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WBTCTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WAVAXTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTTargetPool",
          "type": "uint256"
        }
      ],
      "name": "TargetComposition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDtAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawUSDT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WAVAXAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawWAVAX",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WBTCAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawWBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawWETH",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "JoeRouter",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDt",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAXVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WBTC",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WBTCVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETHVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTokenCompositionPerc",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "_WBTCVault",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_WETHVault",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_WAVAXVault",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_USDTVault",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "_WBTCVault",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_WETHVault",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_WAVAXVault",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_USDTVault",
          "type": "address"
        }
      ],
      "name": "setL2Vault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_targetPerc",
          "type": "uint256[]"
        }
      ],
      "name": "setTokenCompositionTargetPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "targetPercentages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "farmIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromFarm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x538e1fd4874f4ef8b5070f3d1f0fec3af0c760eb63fbe522304f98c80de2abef",
  "receipt": {
    "to": null,
    "from": "0x3f68A3c1023d736D8Be867CA49Cb18c543373B99",
    "contractAddress": "0xD4C7eCE2E619D6fc82bD89b2a3eCeF71Ebd8dB48",
    "transactionIndex": 3,
    "gasUsed": "3532247",
    "logsBloom": "0x
    "blockHash": "0x7d20e48e26ffb896e92cfc835e070c411c09a3616470d4740a24d70a526edc43",
    "transactionHash": "0x538e1fd4874f4ef8b5070f3d1f0fec3af0c760eb63fbe522304f98c80de2abef",
    "logs": [],
    "blockNumber": 17621903,
    "cumulativeGasUsed": "3929510",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "18531906b263dc82e5280e82b40df4ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WBTCTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WAVAXCurrentPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTCurrentPool\",\"type\":\"uint256\"}],\"name\":\"CurrentComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDtAmt\",\"type\":\"uint256\"}],\"name\":\"InvestUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WAVAXAmt\",\"type\":\"uint256\"}],\"name\":\"InvestWAVAX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WBTCAmt\",\"type\":\"uint256\"}],\"name\":\"InvestWBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"}],\"name\":\"InvestWETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WBTCTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WAVAXTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTTargetPool\",\"type\":\"uint256\"}],\"name\":\"TargetComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDtAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WAVAXAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawWAVAX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WBTCAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawWBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawWETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"JoeRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDt\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAXVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBTC\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBTCVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenCompositionPerc\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"_WBTCVault\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_WETHVault\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_WAVAXVault\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_USDTVault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"_WBTCVault\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_WETHVault\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_WAVAXVault\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_USDTVault\",\"type\":\"address\"}],\"name\":\"setL2Vault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_targetPerc\",\"type\":\"uint256[]\"}],\"name\":\"setTokenCompositionTargetPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"farmIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawFromFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mwi/MWIStrategy.sol\":\"MWIStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/mwi/MWIStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./libs/Price.sol\\\";\\n\\ninterface IRouter {\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IL2Vault is IERC20Upgradeable {\\n    function deposit(uint amount) external;\\n    function withdraw(uint share) external;\\n    function getAllPoolInUSD() external view returns (uint);\\n    function getAPR() external view returns (uint);\\n}\\n\\ncontract MWIStrategy is OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0xc7198437980c041c805A1EDcbA50c1Ce5db95118);\\n    IERC20Upgradeable public constant WBTC = IERC20Upgradeable(0x50b7545627a5162F82A992c33b87aDc75187B218);\\n    IERC20Upgradeable public constant WETH = IERC20Upgradeable(0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB);\\n    IERC20Upgradeable public constant WAVAX = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n    IERC20Upgradeable public constant USDt = IERC20Upgradeable(0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7);\\n\\n    IRouter public constant JoeRouter = IRouter(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\\n\\n    uint constant POOL_COUNT = 4;\\n    IL2Vault public WBTCVault;\\n    IL2Vault public WETHVault;\\n    IL2Vault public WAVAXVault;\\n    IL2Vault public USDTVault;\\n    \\n    uint constant DENOMINATOR = 10000;\\n    uint[] public targetPercentages;\\n\\n    address public vault;\\n\\n    event TargetComposition (uint WBTCTargetPool, uint WETHTargetPool, uint WAVAXTargetPool, uint USDTTargetPool);\\n    event CurrentComposition (uint WBTCTargetPool, uint WETHTargetPool, uint WAVAXCurrentPool, uint USDTCurrentPool);\\n    event InvestWBTC(uint USDTAmt, uint WBTCAmt);\\n    event InvestWETH(uint USDTAmt, uint WETHAmt);\\n    event InvestWAVAX(uint USDTAmt, uint WAVAXAmt);\\n    event InvestUSDT(uint USDTAmt, uint USDtAmt);\\n    event Withdraw(uint sharePerc, uint USDTAmt);\\n    event WithdrawWBTC(uint WBTCAmt, uint USDTAmt);\\n    event WithdrawWETH(uint WETHAmt, uint USDTAmt);\\n    event WithdrawWAVAX(uint WAVAXAmt, uint USDTAmt);\\n    event WithdrawUSDT(uint USDtAmt, uint USDTAmt);\\n    event EmergencyWithdraw(uint USDTAmt);\\n\\n    modifier onlyVault {\\n        require(msg.sender == vault, \\\"Only vault\\\");\\n        _;\\n    }\\n\\n    function initialize(IL2Vault _WBTCVault, IL2Vault _WETHVault, IL2Vault _WAVAXVault, IL2Vault _USDTVault) external initializer {\\n        __Ownable_init();\\n\\n        targetPercentages.push(4500); // WBTC: 45%\\n        targetPercentages.push(3500); // WETH: 35%\\n        targetPercentages.push(1500); // WAVAX: 15%\\n        targetPercentages.push(500); // USDT: 5%\\n\\n        WBTCVault = _WBTCVault;\\n        WETHVault = _WETHVault;\\n        WAVAXVault = _WAVAXVault;\\n        USDTVault = _USDTVault;\\n\\n        USDT.safeApprove(address(JoeRouter), type(uint).max);\\n        WBTC.safeApprove(address(JoeRouter), type(uint).max);\\n        WETH.safeApprove(address(JoeRouter), type(uint).max);\\n        WAVAX.safeApprove(address(JoeRouter), type(uint).max);\\n        USDt.safeApprove(address(JoeRouter), type(uint).max);\\n\\n        WBTC.safeApprove(address(WBTCVault), type(uint).max);\\n        WETH.safeApprove(address(WETHVault), type(uint).max);\\n        WAVAX.safeApprove(address(WAVAXVault), type(uint).max);\\n        USDt.safeApprove(address(USDTVault), type(uint).max);\\n    }\\n\\n    function invest(uint USDTAmt) external onlyVault {\\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\\n        USDTAmt = USDT.balanceOf(address(this));\\n        uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\\n\\n        uint[] memory pools = getEachPoolInUSD();\\n        uint allPool = pools[0] + pools[1] + pools[2] + pools[3] + (USDTAmt * USDTPriceInUSD * 1e4); // USDT's decimals is 6\\n\\n        uint totalAllocation;\\n        uint[] memory allocations = new uint[](POOL_COUNT);\\n        for (uint i = 0; i < POOL_COUNT; i ++) {\\n            uint target = allPool * targetPercentages[i] / DENOMINATOR;\\n            if (pools[i] < target) {\\n                uint diff = target - pools[i];\\n                allocations[i] = diff;\\n                totalAllocation += diff;\\n            }\\n        }\\n\\n        uint[] memory USDTAmts = new uint[](POOL_COUNT);\\n        for (uint i = 0; i < POOL_COUNT; i ++) {\\n            USDTAmts[i] = USDTAmt * allocations[i] / totalAllocation;\\n        }\\n\\n        if (USDTAmts[0] > 0) {\\n            _investWBTC(USDTAmts[0], USDTPriceInUSD);\\n        }\\n        if (USDTAmts[1] > 0) {\\n            _investWETH(USDTAmts[1], USDTPriceInUSD);\\n        }\\n        if (USDTAmts[2] > 0) {\\n            _investWAVAX(USDTAmts[2], USDTPriceInUSD);\\n        }\\n        if (USDTAmts[3] > 0) {\\n            _investUSDT(USDTAmts[3]);\\n        }\\n\\n        emit CurrentComposition(pools[0], pools[1], pools[2], pools[3]);\\n        emit TargetComposition(targetPercentages[0], targetPercentages[1], targetPercentages[2], targetPercentages[3]);\\n    }\\n\\n    function _investWBTC(uint USDTAmt, uint USDTPriceInUSD) private {\\n        uint WBTCPriceInUSD = PriceLib.getAssetPrice(address(WBTC));\\n        uint amountOut = USDTAmt * USDTPriceInUSD * 100 / WBTCPriceInUSD;  // USDT's decimals is 6, WBTC's decimals is 8\\n        uint WBTCAmt = _swap2(address(USDT), address(WBTC), USDTAmt, amountOut*95/100);\\n        WBTCVault.deposit(WBTCAmt);\\n        emit InvestWBTC(USDTAmt, WBTCAmt);\\n    }\\n\\n    function _investWETH(uint USDTAmt, uint USDTPriceInUSD) private {\\n        uint WETHPriceInUSD = PriceLib.getAssetPrice(address(WETH));\\n        uint amountOut = USDTAmt * USDTPriceInUSD * 1e12 / WETHPriceInUSD;  // USDT's decimals is 6, WETH's decimals is 18\\n        uint WETHAmt = _swap2(address(USDT), address(WETH), USDTAmt, amountOut*95/100);\\n        WETHVault.deposit(WETHAmt);\\n        emit InvestWETH(USDTAmt, WETHAmt);\\n    }\\n\\n    function _investWAVAX(uint USDTAmt, uint USDTPriceInUSD) private {\\n        uint WAVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\\n        uint amountOut = USDTAmt * USDTPriceInUSD * 1e12 / WAVAXPriceInUSD;  // USDT's decimals is 6, WAVAX's decimals is 18\\n        uint WAVAXAmt = _swap(address(USDT), address(WAVAX), USDTAmt, amountOut*95/100);\\n        WAVAXVault.deposit(WAVAXAmt);\\n        emit InvestWAVAX(USDTAmt, WAVAXAmt);\\n    }\\n\\n    function _investUSDT(uint USDTAmt) private {\\n        uint USDtAmt = _swap(address(USDT), address(USDt), USDTAmt, USDTAmt*99/100);\\n        USDTVault.deposit(USDtAmt);\\n        emit InvestUSDT(USDTAmt, USDtAmt);\\n    }\\n\\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\\n        require(sharePerc <= 1e18, \\\"Over 100%\\\");\\n        \\n        uint USDTAmtBefore = USDT.balanceOf(address(this));\\n        uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\\n\\n        _withdrawWBTC(sharePerc, USDTPriceInUSD);\\n        _withdrawWETH(sharePerc, USDTPriceInUSD);\\n        _withdrawWAVAX(sharePerc, USDTPriceInUSD);\\n        _withdrawUSDT(sharePerc);\\n\\n        USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\\n        USDT.safeTransfer(vault, USDTAmt);\\n        emit Withdraw(sharePerc, USDTAmt);\\n    }\\n\\n    function _withdrawWBTC(uint _sharePerc, uint USDTPriceInUSD) private {\\n        uint amount = WBTCVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            WBTCVault.withdraw(amount);\\n\\n            uint WBTCAmt = WBTC.balanceOf(address(this));\\n            uint WBTCPriceInUSD = PriceLib.getAssetPrice(address(WBTC));\\n            uint amountOut = WBTCAmt * WBTCPriceInUSD / (USDTPriceInUSD * 100);  // USDT's decimals is 6, WBTC's decimals is 8\\n            uint USDTAmt = _swap2(address(WBTC), address(USDT), WBTCAmt, amountOut*95/100);\\n            emit WithdrawWBTC(WBTCAmt, USDTAmt);\\n        }\\n    }\\n\\n    function _withdrawWETH(uint _sharePerc, uint USDTPriceInUSD) private {\\n        uint amount = WETHVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            WETHVault.withdraw(amount);\\n\\n            uint WETHAmt = WETH.balanceOf(address(this));\\n            uint WETHPriceInUSD = PriceLib.getAssetPrice(address(WETH));\\n            uint amountOut = WETHAmt * WETHPriceInUSD / (USDTPriceInUSD * 1e12);  // USDT's decimals is 6, WETH's decimals is 18\\n            uint USDTAmt = _swap2(address(WETH), address(USDT), WETHAmt, amountOut*95/100);\\n            emit WithdrawWETH(WETHAmt, USDTAmt);\\n        }\\n    }\\n\\n    function _withdrawWAVAX(uint _sharePerc, uint USDTPriceInUSD) private {\\n        uint amount = WAVAXVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            WAVAXVault.withdraw(amount);\\n\\n            uint WAVAXAmt = WAVAX.balanceOf(address(this));\\n            uint WAVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\\n            uint amountOut = WAVAXAmt * WAVAXPriceInUSD / (USDTPriceInUSD * 1e12);  // USDT's decimals is 6, WAVAX's decimals is 18\\n            uint USDTAmt = _swap(address(WAVAX), address(USDT), WAVAXAmt, amountOut*95/100);\\n            emit WithdrawWAVAX(WAVAXAmt, USDTAmt);\\n        }\\n    }\\n\\n    function _withdrawUSDT(uint _sharePerc) private {\\n        uint amount = USDTVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            USDTVault.withdraw(amount);\\n\\n            uint USDtAmt = USDt.balanceOf(address(this));\\n            uint USDTAmt = _swap(address(USDt), address(USDT), USDtAmt, USDtAmt*99/100);\\n            emit WithdrawUSDT(USDtAmt, USDTAmt);\\n        }\\n    }\\n\\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = _tokenB;\\n        return (JoeRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\\n    }\\n\\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](3);\\n        path[0] = _tokenA;\\n        path[1] = address(WAVAX);\\n        path[2] = _tokenB;\\n        return (JoeRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[2];\\n    }\\n\\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\\n        require(sharePerc <= 1e18, \\\"Over 100%\\\");\\n        uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\\n\\n        if (farmIndex == 0) _withdrawWBTC(sharePerc, USDTPriceInUSD);\\n        else if (farmIndex == 1) _withdrawWETH(sharePerc, USDTPriceInUSD);\\n        else if (farmIndex == 2) _withdrawWAVAX(sharePerc, USDTPriceInUSD);\\n        else if (farmIndex == 3) _withdrawUSDT(sharePerc);\\n\\n        USDTAmt = USDT.balanceOf(address(this));\\n        USDT.safeTransfer(vault, USDTAmt);\\n    }\\n\\n    function emergencyWithdraw() external onlyVault {\\n        // 1e18 == 100% of share\\n        uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\\n\\n        _withdrawWBTC(1e18, USDTPriceInUSD);\\n        _withdrawWETH(1e18, USDTPriceInUSD);\\n        _withdrawWAVAX(1e18, USDTPriceInUSD);\\n        _withdrawUSDT(1e18);\\n\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if (0 < USDTAmt) {\\n            USDT.safeTransfer(vault, USDTAmt);\\n        }\\n        emit EmergencyWithdraw(USDTAmt);\\n    }\\n\\n    function setVault(address _vault) external onlyOwner {\\n        require(vault == address(0), \\\"Vault set\\\");\\n        vault = _vault;\\n    }\\n\\n    function setL2Vault(IL2Vault _WBTCVault, IL2Vault _WETHVault, IL2Vault _WAVAXVault, IL2Vault _USDTVault) external onlyOwner {\\n        WBTCVault = _WBTCVault;\\n        WETHVault = _WETHVault;\\n        WAVAXVault = _WAVAXVault;\\n        USDTVault = _USDTVault;\\n\\n        if (WBTC.allowance(address(this), address(WBTCVault)) == 0) {\\n            WBTC.safeApprove(address(WBTCVault), type(uint).max);\\n        }\\n        if (WETH.allowance(address(this), address(WETHVault)) == 0) {\\n            WETH.safeApprove(address(WETHVault), type(uint).max);\\n        }\\n        if (WAVAX.allowance(address(this), address(WAVAXVault)) == 0) {\\n            WAVAX.safeApprove(address(WAVAXVault), type(uint).max);\\n        }\\n        if (USDt.allowance(address(this), address(USDTVault)) == 0) {\\n            USDt.safeApprove(address(USDTVault), type(uint).max);\\n        }\\n    }\\n\\n    function setTokenCompositionTargetPerc(uint[] calldata _targetPerc) external onlyOwner {\\n        uint targetCnt = _targetPerc.length;\\n        require(targetCnt == targetPercentages.length, \\\"Invalid count\\\");\\n\\n        uint sum;\\n        for (uint i = 0; i < targetCnt; i ++) {\\n            targetPercentages[i] = _targetPerc[i];\\n            sum += _targetPerc[i];\\n        }\\n        require(sum == DENOMINATOR, \\\"Invalid parameter\\\");\\n    }\\n\\n    function getWBTCPoolInUSD() private view  returns (uint) {\\n        uint amt = WBTCVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * WBTCVault.balanceOf(address(this)) / WBTCVault.totalSupply(); //to exclude L1 deposits from other addresses\\n    }\\n\\n    function getWETHPoolInUSD() private view  returns (uint) {\\n        uint amt = WETHVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * WETHVault.balanceOf(address(this)) / WETHVault.totalSupply(); //to exclude L1 deposits from other addresses\\n    }\\n\\n    function getWAVAXPoolInUSD() private view  returns (uint) {\\n        uint amt = WAVAXVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * WAVAXVault.balanceOf(address(this)) / WAVAXVault.totalSupply(); //to exclude L1 deposits from other addresses\\n    }\\n\\n    function getUSDTPoolInUSD() private view  returns (uint) {\\n        uint amt = USDTVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * USDTVault.balanceOf(address(this)) / USDTVault.totalSupply(); //to exclude L1 deposits from other addresses\\n    }\\n\\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\\n        pools = new uint[](POOL_COUNT);\\n        pools[0] = getWBTCPoolInUSD();\\n        pools[1] = getWETHPoolInUSD();\\n        pools[2] = getWAVAXPoolInUSD();\\n        pools[3] = getUSDTPoolInUSD();\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint) {\\n        uint[] memory pools = getEachPoolInUSD();\\n        return pools[0] + pools[1] + pools[2] + pools[3];\\n    }\\n\\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory tokens, uint[] memory percentages) {\\n        tokens = new address[](POOL_COUNT);\\n        tokens[0] = address(WBTC);\\n        tokens[1] = address(WETH);\\n        tokens[2] = address(WAVAX);\\n        tokens[3] = address(USDt);\\n\\n        uint[] memory pools = getEachPoolInUSD();\\n        uint allPool = pools[0] + pools[1] + pools[2] + pools[3];\\n        percentages = new uint[](POOL_COUNT);\\n        for (uint i = 0; i < POOL_COUNT; i ++) {\\n            percentages[i] = allPool == 0 ? targetPercentages[i] : pools[i] * DENOMINATOR / allPool;\\n        }\\n    }\\n\\n    function getAPR() external view returns (uint) {\\n        (, uint[] memory perc) = getCurrentTokenCompositionPerc();\\n        uint allApr = WBTCVault.getAPR() * perc[0]\\n                    + WETHVault.getAPR() * perc[1]\\n                    + WAVAXVault.getAPR() * perc[2]\\n                    + USDTVault.getAPR() * perc[3];\\n        return (allApr / DENOMINATOR);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5c62999095ce0d3c14ea0510bb97c01b76efea60ffce2132123c9cdd840a8c72\",\"license\":\"MIT\"},\"contracts/mwi/libs/Price.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\ninterface IChainlink {\\n    function latestAnswer() external view returns (int256);\\n}\\n\\ninterface IAaveOracle {\\n    function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\\nlibrary PriceLib {\\n    IAaveOracle internal constant AaveOracle = IAaveOracle(0xEBd36016B3eD09D4693Ed4251c67Bd858c3c7C9C);\\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\\n\\n    /// @return the price in USD of 8 decimals in precision.\\n    function getAssetPrice(address asset) internal view returns (uint) {\\n        if (asset == USDT) {\\n            return uint(IChainlink(0xEBE676ee90Fe1112671f19b6B7459bC678B67e8a).latestAnswer());\\n        }\\n        return AaveOracle.getAssetPrice(asset);\\n    }\\n}\\n\",\"keccak256\":\"0x97767bf363fb8882cf768dd091a0444407b46c1fe9aabb39eae04953f3605543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613ef1806100206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063a7645a20116100de578063db2e21bc11610097578063eede27b611610071578063eede27b614610359578063f2fde38b14610374578063f8c8765e14610387578063fbfa77cf1461039a57600080fd5b8063db2e21bc1461032b578063e8e3318b14610333578063ed47d9091461034657600080fd5b8063a7645a20146102bd578063ad5c4648146102d0578063bd244af4146102eb578063c12f857f146102f3578063c54e44eb1461030e578063c89d5b8b1461032357600080fd5b80636817031b1161014b57806373b295c21161012557806373b295c21461026b5780637fb2df42146102865780638da5cb5b1461029957806395d3df6c146102aa57600080fd5b80636817031b1461022f5780636e21950f14610242578063715018a61461026357600080fd5b80630b450cb81461019357806326abc068146101c35780632afcf480146101d65780633acf3654146101eb5780634631b246146101fe5780634dede3de14610214575b600080fd5b6065546101a6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6068546101a6906001600160a01b031681565b6101e96101e43660046139d6565b6103ad565b005b6067546101a6906001600160a01b031681565b610206610976565b6040516101ba929190613a33565b6101a67350b7545627a5162f82a992c33b87adc75187b21881565b6101e961023d366004613a9f565b610c15565b610255610250366004613abc565b610c84565b6040519081526020016101ba565b6101e9610e08565b6101a673b31f66aa3c1e785363f0875a1b74e27b85fd66c781565b6101e9610294366004613ade565b610e1c565b6033546001600160a01b03166101a6565b6101e96102b8366004613b53565b610f2f565b6102556102cb3660046139d6565b611290565b6101a67349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab81565b6102556112b1565b6101a67360ae616a2155ee3d9a68541ba4544862310933d481565b6101a6600080516020613e9c83398151915281565b61025561134e565b6101e961163d565b6066546101a6906001600160a01b031681565b6102556103543660046139d6565b6117ae565b6101a6739702230a8ea53601f5cd2dc00fdbc13d4df4a8c781565b6101e9610382366004613a9f565b6119d3565b6101e9610395366004613b53565b611a4c565b606a546101a6906001600160a01b031681565b606a546001600160a01b031633146103e05760405162461bcd60e51b81526004016103d790613baf565b60405180910390fd5b606a5461040790600080516020613e9c833981519152906001600160a01b03163084611dc9565b6040516370a0823160e01b8152306004820152600080516020613e9c833981519152906370a082319060240160206040518083038186803b15801561044b57600080fd5b505afa15801561045f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104839190613bd3565b9050600061049e600080516020613e9c833981519152611e34565b905060006104aa611f33565b905060006104b88385613c02565b6104c490612710613c02565b826003815181106104d7576104d7613c21565b6020026020010151836002815181106104f2576104f2613c21565b60200260200101518460018151811061050d5761050d613c21565b60200260200101518560008151811061052857610528613c21565b602002602001015161053a9190613c37565b6105449190613c37565b61054e9190613c37565b6105589190613c37565b60408051600480825260a0820190925291925060009182916020820160808036833701905050905060005b600481101561064f576000612710606983815481106105a4576105a4613c21565b9060005260206000200154866105ba9190613c02565b6105c49190613c65565b9050808683815181106105d9576105d9613c21565b6020026020010151101561063c5760008683815181106105fb576105fb613c21565b60200260200101518261060e9190613c87565b90508084848151811061062357610623613c21565b60209081029190910101526106388186613c37565b9450505b508061064781613c9e565b915050610583565b5060408051600480825260a082019092526000916020820160808036833701905050905060005b60048110156106de578383828151811061069257610692613c21565b6020026020010151896106a59190613c02565b6106af9190613c65565b8282815181106106c1576106c1613c21565b6020908102919091010152806106d681613c9e565b915050610676565b506000816000815181106106f4576106f4613c21565b60200260200101511115610726576107268160008151811061071857610718613c21565b602002602001015187611ff5565b60008160018151811061073b5761073b613c21565b6020026020010151111561076d5761076d8160018151811061075f5761075f613c21565b602002602001015187612116565b60008160028151811061078257610782613c21565b602002602001015111156107b4576107b4816002815181106107a6576107a6613c21565b60200260200101518761222c565b6000816003815181106107c9576107c9613c21565b602002602001015111156107fa576107fa816003815181106107ed576107ed613c21565b6020026020010151612351565b7f39ea5dcef6ffe8954c9fcb7a40f4900d7de325b4f487111c7b6cedd8e235fcea8560008151811061082e5761082e613c21565b60200260200101518660018151811061084957610849613c21565b60200260200101518760028151811061086457610864613c21565b60200260200101518860038151811061087f5761087f613c21565b6020908102919091018101516040805195865291850193909352830152606082015260800160405180910390a17f8bcc13af583b71350079d8dac925b69156723f068f9647dd8151ff95f3da5f5d60696000815481106108e1576108e1613c21565b9060005260206000200154606960018154811061090057610900613c21565b9060005260206000200154606960028154811061091f5761091f613c21565b9060005260206000200154606960038154811061093e5761093e613c21565b60009182526020918290200154604080519586529185019390935283015260608201526080015b60405180910390a150505050505050565b60408051600480825260a08201909252606091829190602082016080803683370190505091507350b7545627a5162f82a992c33b87adc75187b218826000815181106109c4576109c4613c21565b60200260200101906001600160a01b031690816001600160a01b0316815250507349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab82600181518110610a0c57610a0c613c21565b60200260200101906001600160a01b031690816001600160a01b03168152505073b31f66aa3c1e785363f0875a1b74e27b85fd66c782600281518110610a5457610a54613c21565b60200260200101906001600160a01b031690816001600160a01b031681525050739702230a8ea53601f5cd2dc00fdbc13d4df4a8c782600381518110610a9c57610a9c613c21565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610ac6611f33565b9050600081600381518110610add57610add613c21565b602002602001015182600281518110610af857610af8613c21565b602002602001015183600181518110610b1357610b13613c21565b602002602001015184600081518110610b2e57610b2e613c21565b6020026020010151610b409190613c37565b610b4a9190613c37565b610b549190613c37565b60408051600480825260a082019092529192506020820160808036833701905050925060005b6004811015610c0e578115610bc05781612710848381518110610b9f57610b9f613c21565b6020026020010151610bb19190613c02565b610bbb9190613c65565b610bdf565b60698181548110610bd357610bd3613c21565b90600052602060002001545b848281518110610bf157610bf1613c21565b602090810291909101015280610c0681613c9e565b915050610b7a565b5050509091565b610c1d61241e565b606a546001600160a01b031615610c625760405162461bcd60e51b815260206004820152600960248201526815985d5b1d081cd95d60ba1b60448201526064016103d7565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b606a546000906001600160a01b03163314610cb15760405162461bcd60e51b81526004016103d790613baf565b670de0b6b3a7640000821115610cf55760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103d7565b6000610d0e600080516020613e9c833981519152611e34565b905083610d2457610d1f8382612478565b610d5c565b8360011415610d3757610d1f83826126ba565b8360021415610d4a57610d1f83826128fb565b8360031415610d5c57610d5c83612b3c565b6040516370a0823160e01b8152306004820152600080516020613e9c833981519152906370a082319060240160206040518083038186803b158015610da057600080fd5b505afa158015610db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd89190613bd3565b606a54909250610e0190600080516020613e9c833981519152906001600160a01b031684612d3f565b5092915050565b610e1061241e565b610e1a6000612d6f565b565b610e2461241e565b60695481908114610e675760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a590818dbdd5b9d609a1b60448201526064016103d7565b6000805b82811015610ee357848482818110610e8557610e85613c21565b9050602002013560698281548110610e9f57610e9f613c21565b600091825260209091200155848482818110610ebd57610ebd613c21565b9050602002013582610ecf9190613c37565b915080610edb81613c9e565b915050610e6b565b506127108114610f295760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103830b930b6b2ba32b960791b60448201526064016103d7565b50505050565b610f3761241e565b606580546001600160a01b038681166001600160a01b0319928316811790935560668054878316908416179055606780548683169084161790556068805491851691909216179055604051636eb1769f60e11b815230600482015260248101919091527350b7545627a5162f82a992c33b87adc75187b2189063dd62ed3e9060440160206040518083038186803b158015610fd157600080fd5b505afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110099190613bd3565b61103b5760655461103b907350b7545627a5162f82a992c33b87adc75187b218906001600160a01b0316600019612dc1565b606654604051636eb1769f60e11b81523060048201526001600160a01b0390911660248201527349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab9063dd62ed3e9060440160206040518083038186803b15801561109857600080fd5b505afa1580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d09190613bd3565b61110257606654611102907349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab906001600160a01b0316600019612dc1565b606754604051636eb1769f60e11b81523060048201526001600160a01b03909116602482015273b31f66aa3c1e785363f0875a1b74e27b85fd66c79063dd62ed3e9060440160206040518083038186803b15801561115f57600080fd5b505afa158015611173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111979190613bd3565b6111c9576067546111c99073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906001600160a01b0316600019612dc1565b606854604051636eb1769f60e11b81523060048201526001600160a01b039091166024820152739702230a8ea53601f5cd2dc00fdbc13d4df4a8c79063dd62ed3e9060440160206040518083038186803b15801561122657600080fd5b505afa15801561123a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125e9190613bd3565b610f2957606854610f2990739702230a8ea53601f5cd2dc00fdbc13d4df4a8c7906001600160a01b0316600019612dc1565b606981815481106112a057600080fd5b600091825260209091200154905081565b6000806112bc611f33565b9050806003815181106112d1576112d1613c21565b6020026020010151816002815181106112ec576112ec613c21565b60200260200101518260018151811061130757611307613c21565b60200260200101518360008151811061132257611322613c21565b60200260200101516113349190613c37565b61133e9190613c37565b6113489190613c37565b91505090565b600080611359610976565b91505060008160038151811061137157611371613c21565b6020026020010151606860009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113c757600080fd5b505afa1580156113db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ff9190613bd3565b6114099190613c02565b8260028151811061141c5761141c613c21565b6020026020010151606760009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561147257600080fd5b505afa158015611486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114aa9190613bd3565b6114b49190613c02565b836001815181106114c7576114c7613c21565b6020026020010151606660009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561151d57600080fd5b505afa158015611531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115559190613bd3565b61155f9190613c02565b8460008151811061157257611572613c21565b6020026020010151606560009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c857600080fd5b505afa1580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116009190613bd3565b61160a9190613c02565b6116149190613c37565b61161e9190613c37565b6116289190613c37565b905061163661271082613c65565b9250505090565b606a546001600160a01b031633146116675760405162461bcd60e51b81526004016103d790613baf565b6000611680600080516020613e9c833981519152611e34565b9050611694670de0b6b3a764000082612478565b6116a6670de0b6b3a7640000826126ba565b6116b8670de0b6b3a7640000826128fb565b6116c9670de0b6b3a7640000612b3c565b6040516370a0823160e01b8152306004820152600090600080516020613e9c833981519152906370a082319060240160206040518083038186803b15801561171057600080fd5b505afa158015611724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117489190613bd3565b9050801561177657606a5461177690600080516020613e9c833981519152906001600160a01b031683612d3f565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c906020015b60405180910390a15050565b606a546000906001600160a01b031633146117db5760405162461bcd60e51b81526004016103d790613baf565b670de0b6b3a764000082111561181f5760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103d7565b6040516370a0823160e01b8152306004820152600090600080516020613e9c833981519152906370a082319060240160206040518083038186803b15801561186657600080fd5b505afa15801561187a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189e9190613bd3565b905060006118b9600080516020613e9c833981519152611e34565b90506118c58482612478565b6118cf84826126ba565b6118d984826128fb565b6118e284612b3c565b6040516370a0823160e01b81523060048201528290600080516020613e9c833981519152906370a082319060240160206040518083038186803b15801561192857600080fd5b505afa15801561193c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119609190613bd3565b61196a9190613c87565b606a5490935061199390600080516020613e9c833981519152906001600160a01b031685612d3f565b60408051858152602081018590527f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8910160405180910390a15050919050565b6119db61241e565b6001600160a01b038116611a405760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d7565b611a4981612d6f565b50565b600054610100900460ff1615808015611a6c5750600054600160ff909116105b80611a865750303b158015611a86575060005460ff166001145b611ae95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103d7565b6000805460ff191660011790558015611b0c576000805461ff0019166101001790555b611b14612ee5565b606980546001818101835560008390526111947f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe3999143089283015582548082018455610dac90830155825480820184556105dc9083015582549081019092556101f4910155606580546001600160a01b038088166001600160a01b03199283161790925560668054878416908316179055606780548684169083161790556068805492851692909116919091179055611bef600080516020613e9c8339815191527360ae616a2155ee3d9a68541ba4544862310933d4600019612dc1565b611c247350b7545627a5162f82a992c33b87adc75187b2187360ae616a2155ee3d9a68541ba4544862310933d4600019612dc1565b611c597349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab7360ae616a2155ee3d9a68541ba4544862310933d4600019612dc1565b611c8e73b31f66aa3c1e785363f0875a1b74e27b85fd66c77360ae616a2155ee3d9a68541ba4544862310933d4600019612dc1565b611cc3739702230a8ea53601f5cd2dc00fdbc13d4df4a8c77360ae616a2155ee3d9a68541ba4544862310933d4600019612dc1565b606554611cf1907350b7545627a5162f82a992c33b87adc75187b218906001600160a01b0316600019612dc1565b606654611d1f907349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab906001600160a01b0316600019612dc1565b606754611d4d9073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906001600160a01b0316600019612dc1565b606854611d7b90739702230a8ea53601f5cd2dc00fdbc13d4df4a8c7906001600160a01b0316600019612dc1565b8015611dc2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610f299085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612f14565b60006001600160a01b038216600080516020613e9c8339815191521415611ee05773ebe676ee90fe1112671f19b6b7459bc678b67e8a6001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ea257600080fd5b505afa158015611eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eda9190613bd3565b92915050565b60405163b3596f0760e01b81526001600160a01b038316600482015273ebd36016b3ed09d4693ed4251c67bd858c3c7c9c9063b3596f079060240160206040518083038186803b158015611ea257600080fd5b60408051600480825260a0820190925260609160208201608080368337019050509050611f5e612fe6565b81600081518110611f7157611f71613c21565b602002602001018181525050611f8561319a565b81600181518110611f9857611f98613c21565b602002602001018181525050611fac6132e1565b81600281518110611fbf57611fbf613c21565b602002602001018181525050611fd3613428565b81600381518110611fe657611fe6613c21565b60200260200101818152505090565b60006120147350b7545627a5162f82a992c33b87adc75187b218611e34565b90506000816120238486613c02565b61202e906064613c02565b6120389190613c65565b90506000612080600080516020613e9c8339815191527350b7545627a5162f82a992c33b87adc75187b21887606461207187605f613c02565b61207b9190613c65565b61356f565b60655460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b1580156120c757600080fd5b505af11580156120db573d6000803e3d6000fd5b505060408051888152602081018590527fbf1df74b26e65e89ae5d51bd506862865562314b93d19b4edc85d5c599e95e299350019050611db9565b60006121357349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab611e34565b90506000816121448486613c02565b6121539064e8d4a51000613c02565b61215d9190613c65565b90506000612196600080516020613e9c8339815191527349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab87606461207187605f613c02565b60665460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b1580156121dd57600080fd5b505af11580156121f1573d6000803e3d6000fd5b505060408051888152602081018590527fa9467001048b3bf504294c65eb1fd450d5273b58b916ccfcc07a13b6a8ff0c0c9350019050611db9565b600061224b73b31f66aa3c1e785363f0875a1b74e27b85fd66c7611e34565b905060008161225a8486613c02565b6122699064e8d4a51000613c02565b6122739190613c65565b905060006122bb600080516020613e9c83398151915273b31f66aa3c1e785363f0875a1b74e27b85fd66c78760646122ac87605f613c02565b6122b69190613c65565b6136f7565b60675460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b15801561230257600080fd5b505af1158015612316573d6000803e3d6000fd5b505060408051888152602081018590527fd7862f5d8dd515ad5e0f279ab2382ecb18537dff2d85d8e04aca497ea6cabbf89350019050611db9565b6000612388600080516020613e9c833981519152739702230a8ea53601f5cd2dc00fdbc13d4df4a8c78460646122ac826063613c02565b60685460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b1580156123cf57600080fd5b505af11580156123e3573d6000803e3d6000fd5b505060408051858152602081018590527fb83a6f4f54d3f23fa394cbb40f56f2a370631a3957def5b0eaf834249acbfd9a93500190506117a2565b6033546001600160a01b03163314610e1a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103d7565b6065546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009185916001600160a01b0316906370a082319060240160206040518083038186803b1580156124c857600080fd5b505afa1580156124dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125009190613bd3565b61250a9190613c02565b6125149190613c65565b905080156126b557606554604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561256257600080fd5b505af1158015612576573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507350b7545627a5162f82a992c33b87adc75187b21891506370a082319060240160206040518083038186803b1580156125c757600080fd5b505afa1580156125db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ff9190613bd3565b905060006126207350b7545627a5162f82a992c33b87adc75187b218611e34565b9050600061262f856064613c02565b6126398385613c02565b6126439190613c65565b9050600061267c7350b7545627a5162f82a992c33b87adc75187b218600080516020613e9c83398151915286606461207187605f613c02565b60408051868152602081018390529192507f2b40d355bb1f77bd59be42a0b31bae8cdeabf9742501131bd13721c17b330c4f9101610965565b505050565b6066546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009185916001600160a01b0316906370a082319060240160206040518083038186803b15801561270a57600080fd5b505afa15801561271e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127429190613bd3565b61274c9190613c02565b6127569190613c65565b905080156126b557606654604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156127a457600080fd5b505af11580156127b8573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab91506370a082319060240160206040518083038186803b15801561280957600080fd5b505afa15801561281d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128419190613bd3565b905060006128627349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab611e34565b905060006128758564e8d4a51000613c02565b61287f8385613c02565b6128899190613c65565b905060006128c27349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab600080516020613e9c83398151915286606461207187605f613c02565b60408051868152602081018390529192507fb5ad212fcc131c42595455ad4c23526ff5569548cc3a4af552a15fcc7348b3359101610965565b6067546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009185916001600160a01b0316906370a082319060240160206040518083038186803b15801561294b57600080fd5b505afa15801561295f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129839190613bd3565b61298d9190613c02565b6129979190613c65565b905080156126b557606754604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156129e557600080fd5b505af11580156129f9573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526000925073b31f66aa3c1e785363f0875a1b74e27b85fd66c791506370a082319060240160206040518083038186803b158015612a4a57600080fd5b505afa158015612a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a829190613bd3565b90506000612aa373b31f66aa3c1e785363f0875a1b74e27b85fd66c7611e34565b90506000612ab68564e8d4a51000613c02565b612ac08385613c02565b612aca9190613c65565b90506000612b0373b31f66aa3c1e785363f0875a1b74e27b85fd66c7600080516020613e9c8339815191528660646122ac87605f613c02565b60408051868152602081018390529192507ffe4be6880aac6b75b6c8bf553a9157fa365e629815171f9a0a95e9401bc57ddc9101610965565b6068546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009184916001600160a01b0316906370a082319060240160206040518083038186803b158015612b8c57600080fd5b505afa158015612ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc49190613bd3565b612bce9190613c02565b612bd89190613c65565b90508015612d3b57606854604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015612c2657600080fd5b505af1158015612c3a573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015260009250739702230a8ea53601f5cd2dc00fdbc13d4df4a8c791506370a082319060240160206040518083038186803b158015612c8b57600080fd5b505afa158015612c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc39190613bd3565b90506000612cfc739702230a8ea53601f5cd2dc00fdbc13d4df4a8c7600080516020613e9c8339815191528460646122ac826063613c02565b60408051848152602081018390529192507f55697eba25e5e652e8bf9deb3c1d594084eb15fcf95553c63ec65c17ec18bb1e910160405180910390a150505b5050565b6040516001600160a01b0383166024820152604481018290526126b590849063a9059cbb60e01b90606401611dfd565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b801580612e4a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612e1057600080fd5b505afa158015612e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e489190613bd3565b155b612eb55760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016103d7565b6040516001600160a01b0383166024820152604481018290526126b590849063095ea7b360e01b90606401611dfd565b600054610100900460ff16612f0c5760405162461bcd60e51b81526004016103d790613cb9565b610e1a613823565b6000612f69826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138539092919063ffffffff16565b8051909150156126b55780806020019051810190612f879190613d04565b6126b55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d7565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b15801561303757600080fd5b505afa15801561304b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306f9190613bd3565b9050801561319257606560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156130c557600080fd5b505afa1580156130d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fd9190613bd3565b6065546040516370a0823160e01b81523060048201526001600160a01b03909116906370a08231906024015b60206040518083038186803b15801561314157600080fd5b505afa158015613155573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131799190613bd3565b6131839083613c02565b61318d9190613c65565b611348565b600091505090565b600080606660009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b1580156131eb57600080fd5b505afa1580156131ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132239190613bd3565b9050801561319257606660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561327957600080fd5b505afa15801561328d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b19190613bd3565b6066546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401613129565b600080606760009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b15801561333257600080fd5b505afa158015613346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336a9190613bd3565b9050801561319257606760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156133c057600080fd5b505afa1580156133d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f89190613bd3565b6067546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401613129565b600080606860009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b15801561347957600080fd5b505afa15801561348d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b19190613bd3565b9050801561319257606860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561350757600080fd5b505afa15801561351b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353f9190613bd3565b6068546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401613129565b604080516003808252608082019092526000918291906020820160608036833701905050905085816000815181106135a9576135a9613c21565b60200260200101906001600160a01b031690816001600160a01b03168152505073b31f66aa3c1e785363f0875a1b74e27b85fd66c7816001815181106135f1576135f1613c21565b60200260200101906001600160a01b031690816001600160a01b031681525050848160028151811061362557613625613c21565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b81527360ae616a2155ee3d9a68541ba4544862310933d4906338ed17399061367c9087908790869030904290600401613d26565b600060405180830381600087803b15801561369657600080fd5b505af11580156136aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136d29190810190613d62565b6002815181106136e4576136e4613c21565b6020026020010151915050949350505050565b60408051600280825260608201835260009283929190602083019080368337019050509050858160008151811061373057613730613c21565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061376457613764613c21565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b81527360ae616a2155ee3d9a68541ba4544862310933d4906338ed1739906137bb9087908790869030904290600401613d26565b600060405180830381600087803b1580156137d557600080fd5b505af11580156137e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138119190810190613d62565b6001815181106136e4576136e4613c21565b600054610100900460ff1661384a5760405162461bcd60e51b81526004016103d790613cb9565b610e1a33612d6f565b6060613862848460008561386c565b90505b9392505050565b6060824710156138cd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103d7565b6001600160a01b0385163b6139245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d7565b600080866001600160a01b031685876040516139409190613e4c565b60006040518083038185875af1925050503d806000811461397d576040519150601f19603f3d011682016040523d82523d6000602084013e613982565b606091505b509150915061399282828661399d565b979650505050505050565b606083156139ac575081613865565b8251156139bc5782518084602001fd5b8160405162461bcd60e51b81526004016103d79190613e68565b6000602082840312156139e857600080fd5b5035919050565b600081518084526020808501945080840160005b83811015613a285781516001600160a01b031687529582019590820190600101613a03565b509495945050505050565b604081526000613a4660408301856139ef565b82810360208481019190915284518083528582019282019060005b81811015613a7d57845183529383019391830191600101613a61565b5090979650505050505050565b6001600160a01b0381168114611a4957600080fd5b600060208284031215613ab157600080fd5b813561386581613a8a565b60008060408385031215613acf57600080fd5b50508035926020909101359150565b60008060208385031215613af157600080fd5b823567ffffffffffffffff80821115613b0957600080fd5b818501915085601f830112613b1d57600080fd5b813581811115613b2c57600080fd5b8660208260051b8501011115613b4157600080fd5b60209290920196919550909350505050565b60008060008060808587031215613b6957600080fd5b8435613b7481613a8a565b93506020850135613b8481613a8a565b92506040850135613b9481613a8a565b91506060850135613ba481613a8a565b939692955090935050565b6020808252600a908201526913db9b1e481d985d5b1d60b21b604082015260600190565b600060208284031215613be557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613c1c57613c1c613bec565b500290565b634e487b7160e01b600052603260045260246000fd5b60008219821115613c4a57613c4a613bec565b500190565b634e487b7160e01b600052604160045260246000fd5b600082613c8257634e487b7160e01b600052601260045260246000fd5b500490565b600082821015613c9957613c99613bec565b500390565b6000600019821415613cb257613cb2613bec565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215613d1657600080fd5b8151801515811461386557600080fd5b85815284602082015260a060408201526000613d4560a08301866139ef565b6001600160a01b0394909416606083015250608001529392505050565b60006020808385031215613d7557600080fd5b825167ffffffffffffffff80821115613d8d57600080fd5b818501915085601f830112613da157600080fd5b815181811115613db357613db3613c4f565b8060051b604051601f19603f83011681018181108582111715613dd857613dd8613c4f565b604052918252848201925083810185019188831115613df657600080fd5b938501935b82851015613e1457845184529385019392850192613dfb565b98975050505050505050565b60005b83811015613e3b578181015183820152602001613e23565b83811115610f295750506000910152565b60008251613e5e818460208701613e20565b9190910192915050565b6020815260008251806020840152613e87816040850160208701613e20565b601f01601f1916919091016040019291505056fe000000000000000000000000c7198437980c041c805a1edcba50c1ce5db95118a2646970667358221220b251ff585fc4f95148454c2122e27b42b00e135e68cb50269d15210ff00012fc64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063a7645a20116100de578063db2e21bc11610097578063eede27b611610071578063eede27b614610359578063f2fde38b14610374578063f8c8765e14610387578063fbfa77cf1461039a57600080fd5b8063db2e21bc1461032b578063e8e3318b14610333578063ed47d9091461034657600080fd5b8063a7645a20146102bd578063ad5c4648146102d0578063bd244af4146102eb578063c12f857f146102f3578063c54e44eb1461030e578063c89d5b8b1461032357600080fd5b80636817031b1161014b57806373b295c21161012557806373b295c21461026b5780637fb2df42146102865780638da5cb5b1461029957806395d3df6c146102aa57600080fd5b80636817031b1461022f5780636e21950f14610242578063715018a61461026357600080fd5b80630b450cb81461019357806326abc068146101c35780632afcf480146101d65780633acf3654146101eb5780634631b246146101fe5780634dede3de14610214575b600080fd5b6065546101a6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6068546101a6906001600160a01b031681565b6101e96101e43660046139d6565b6103ad565b005b6067546101a6906001600160a01b031681565b610206610976565b6040516101ba929190613a33565b6101a67350b7545627a5162f82a992c33b87adc75187b21881565b6101e961023d366004613a9f565b610c15565b610255610250366004613abc565b610c84565b6040519081526020016101ba565b6101e9610e08565b6101a673b31f66aa3c1e785363f0875a1b74e27b85fd66c781565b6101e9610294366004613ade565b610e1c565b6033546001600160a01b03166101a6565b6101e96102b8366004613b53565b610f2f565b6102556102cb3660046139d6565b611290565b6101a67349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab81565b6102556112b1565b6101a67360ae616a2155ee3d9a68541ba4544862310933d481565b6101a6600080516020613e9c83398151915281565b61025561134e565b6101e961163d565b6066546101a6906001600160a01b031681565b6102556103543660046139d6565b6117ae565b6101a6739702230a8ea53601f5cd2dc00fdbc13d4df4a8c781565b6101e9610382366004613a9f565b6119d3565b6101e9610395366004613b53565b611a4c565b606a546101a6906001600160a01b031681565b606a546001600160a01b031633146103e05760405162461bcd60e51b81526004016103d790613baf565b60405180910390fd5b606a5461040790600080516020613e9c833981519152906001600160a01b03163084611dc9565b6040516370a0823160e01b8152306004820152600080516020613e9c833981519152906370a082319060240160206040518083038186803b15801561044b57600080fd5b505afa15801561045f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104839190613bd3565b9050600061049e600080516020613e9c833981519152611e34565b905060006104aa611f33565b905060006104b88385613c02565b6104c490612710613c02565b826003815181106104d7576104d7613c21565b6020026020010151836002815181106104f2576104f2613c21565b60200260200101518460018151811061050d5761050d613c21565b60200260200101518560008151811061052857610528613c21565b602002602001015161053a9190613c37565b6105449190613c37565b61054e9190613c37565b6105589190613c37565b60408051600480825260a0820190925291925060009182916020820160808036833701905050905060005b600481101561064f576000612710606983815481106105a4576105a4613c21565b9060005260206000200154866105ba9190613c02565b6105c49190613c65565b9050808683815181106105d9576105d9613c21565b6020026020010151101561063c5760008683815181106105fb576105fb613c21565b60200260200101518261060e9190613c87565b90508084848151811061062357610623613c21565b60209081029190910101526106388186613c37565b9450505b508061064781613c9e565b915050610583565b5060408051600480825260a082019092526000916020820160808036833701905050905060005b60048110156106de578383828151811061069257610692613c21565b6020026020010151896106a59190613c02565b6106af9190613c65565b8282815181106106c1576106c1613c21565b6020908102919091010152806106d681613c9e565b915050610676565b506000816000815181106106f4576106f4613c21565b60200260200101511115610726576107268160008151811061071857610718613c21565b602002602001015187611ff5565b60008160018151811061073b5761073b613c21565b6020026020010151111561076d5761076d8160018151811061075f5761075f613c21565b602002602001015187612116565b60008160028151811061078257610782613c21565b602002602001015111156107b4576107b4816002815181106107a6576107a6613c21565b60200260200101518761222c565b6000816003815181106107c9576107c9613c21565b602002602001015111156107fa576107fa816003815181106107ed576107ed613c21565b6020026020010151612351565b7f39ea5dcef6ffe8954c9fcb7a40f4900d7de325b4f487111c7b6cedd8e235fcea8560008151811061082e5761082e613c21565b60200260200101518660018151811061084957610849613c21565b60200260200101518760028151811061086457610864613c21565b60200260200101518860038151811061087f5761087f613c21565b6020908102919091018101516040805195865291850193909352830152606082015260800160405180910390a17f8bcc13af583b71350079d8dac925b69156723f068f9647dd8151ff95f3da5f5d60696000815481106108e1576108e1613c21565b9060005260206000200154606960018154811061090057610900613c21565b9060005260206000200154606960028154811061091f5761091f613c21565b9060005260206000200154606960038154811061093e5761093e613c21565b60009182526020918290200154604080519586529185019390935283015260608201526080015b60405180910390a150505050505050565b60408051600480825260a08201909252606091829190602082016080803683370190505091507350b7545627a5162f82a992c33b87adc75187b218826000815181106109c4576109c4613c21565b60200260200101906001600160a01b031690816001600160a01b0316815250507349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab82600181518110610a0c57610a0c613c21565b60200260200101906001600160a01b031690816001600160a01b03168152505073b31f66aa3c1e785363f0875a1b74e27b85fd66c782600281518110610a5457610a54613c21565b60200260200101906001600160a01b031690816001600160a01b031681525050739702230a8ea53601f5cd2dc00fdbc13d4df4a8c782600381518110610a9c57610a9c613c21565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610ac6611f33565b9050600081600381518110610add57610add613c21565b602002602001015182600281518110610af857610af8613c21565b602002602001015183600181518110610b1357610b13613c21565b602002602001015184600081518110610b2e57610b2e613c21565b6020026020010151610b409190613c37565b610b4a9190613c37565b610b549190613c37565b60408051600480825260a082019092529192506020820160808036833701905050925060005b6004811015610c0e578115610bc05781612710848381518110610b9f57610b9f613c21565b6020026020010151610bb19190613c02565b610bbb9190613c65565b610bdf565b60698181548110610bd357610bd3613c21565b90600052602060002001545b848281518110610bf157610bf1613c21565b602090810291909101015280610c0681613c9e565b915050610b7a565b5050509091565b610c1d61241e565b606a546001600160a01b031615610c625760405162461bcd60e51b815260206004820152600960248201526815985d5b1d081cd95d60ba1b60448201526064016103d7565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b606a546000906001600160a01b03163314610cb15760405162461bcd60e51b81526004016103d790613baf565b670de0b6b3a7640000821115610cf55760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103d7565b6000610d0e600080516020613e9c833981519152611e34565b905083610d2457610d1f8382612478565b610d5c565b8360011415610d3757610d1f83826126ba565b8360021415610d4a57610d1f83826128fb565b8360031415610d5c57610d5c83612b3c565b6040516370a0823160e01b8152306004820152600080516020613e9c833981519152906370a082319060240160206040518083038186803b158015610da057600080fd5b505afa158015610db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd89190613bd3565b606a54909250610e0190600080516020613e9c833981519152906001600160a01b031684612d3f565b5092915050565b610e1061241e565b610e1a6000612d6f565b565b610e2461241e565b60695481908114610e675760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a590818dbdd5b9d609a1b60448201526064016103d7565b6000805b82811015610ee357848482818110610e8557610e85613c21565b9050602002013560698281548110610e9f57610e9f613c21565b600091825260209091200155848482818110610ebd57610ebd613c21565b9050602002013582610ecf9190613c37565b915080610edb81613c9e565b915050610e6b565b506127108114610f295760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103830b930b6b2ba32b960791b60448201526064016103d7565b50505050565b610f3761241e565b606580546001600160a01b038681166001600160a01b0319928316811790935560668054878316908416179055606780548683169084161790556068805491851691909216179055604051636eb1769f60e11b815230600482015260248101919091527350b7545627a5162f82a992c33b87adc75187b2189063dd62ed3e9060440160206040518083038186803b158015610fd157600080fd5b505afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110099190613bd3565b61103b5760655461103b907350b7545627a5162f82a992c33b87adc75187b218906001600160a01b0316600019612dc1565b606654604051636eb1769f60e11b81523060048201526001600160a01b0390911660248201527349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab9063dd62ed3e9060440160206040518083038186803b15801561109857600080fd5b505afa1580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d09190613bd3565b61110257606654611102907349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab906001600160a01b0316600019612dc1565b606754604051636eb1769f60e11b81523060048201526001600160a01b03909116602482015273b31f66aa3c1e785363f0875a1b74e27b85fd66c79063dd62ed3e9060440160206040518083038186803b15801561115f57600080fd5b505afa158015611173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111979190613bd3565b6111c9576067546111c99073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906001600160a01b0316600019612dc1565b606854604051636eb1769f60e11b81523060048201526001600160a01b039091166024820152739702230a8ea53601f5cd2dc00fdbc13d4df4a8c79063dd62ed3e9060440160206040518083038186803b15801561122657600080fd5b505afa15801561123a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125e9190613bd3565b610f2957606854610f2990739702230a8ea53601f5cd2dc00fdbc13d4df4a8c7906001600160a01b0316600019612dc1565b606981815481106112a057600080fd5b600091825260209091200154905081565b6000806112bc611f33565b9050806003815181106112d1576112d1613c21565b6020026020010151816002815181106112ec576112ec613c21565b60200260200101518260018151811061130757611307613c21565b60200260200101518360008151811061132257611322613c21565b60200260200101516113349190613c37565b61133e9190613c37565b6113489190613c37565b91505090565b600080611359610976565b91505060008160038151811061137157611371613c21565b6020026020010151606860009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113c757600080fd5b505afa1580156113db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ff9190613bd3565b6114099190613c02565b8260028151811061141c5761141c613c21565b6020026020010151606760009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561147257600080fd5b505afa158015611486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114aa9190613bd3565b6114b49190613c02565b836001815181106114c7576114c7613c21565b6020026020010151606660009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561151d57600080fd5b505afa158015611531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115559190613bd3565b61155f9190613c02565b8460008151811061157257611572613c21565b6020026020010151606560009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c857600080fd5b505afa1580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116009190613bd3565b61160a9190613c02565b6116149190613c37565b61161e9190613c37565b6116289190613c37565b905061163661271082613c65565b9250505090565b606a546001600160a01b031633146116675760405162461bcd60e51b81526004016103d790613baf565b6000611680600080516020613e9c833981519152611e34565b9050611694670de0b6b3a764000082612478565b6116a6670de0b6b3a7640000826126ba565b6116b8670de0b6b3a7640000826128fb565b6116c9670de0b6b3a7640000612b3c565b6040516370a0823160e01b8152306004820152600090600080516020613e9c833981519152906370a082319060240160206040518083038186803b15801561171057600080fd5b505afa158015611724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117489190613bd3565b9050801561177657606a5461177690600080516020613e9c833981519152906001600160a01b031683612d3f565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c906020015b60405180910390a15050565b606a546000906001600160a01b031633146117db5760405162461bcd60e51b81526004016103d790613baf565b670de0b6b3a764000082111561181f5760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103d7565b6040516370a0823160e01b8152306004820152600090600080516020613e9c833981519152906370a082319060240160206040518083038186803b15801561186657600080fd5b505afa15801561187a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189e9190613bd3565b905060006118b9600080516020613e9c833981519152611e34565b90506118c58482612478565b6118cf84826126ba565b6118d984826128fb565b6118e284612b3c565b6040516370a0823160e01b81523060048201528290600080516020613e9c833981519152906370a082319060240160206040518083038186803b15801561192857600080fd5b505afa15801561193c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119609190613bd3565b61196a9190613c87565b606a5490935061199390600080516020613e9c833981519152906001600160a01b031685612d3f565b60408051858152602081018590527f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8910160405180910390a15050919050565b6119db61241e565b6001600160a01b038116611a405760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d7565b611a4981612d6f565b50565b600054610100900460ff1615808015611a6c5750600054600160ff909116105b80611a865750303b158015611a86575060005460ff166001145b611ae95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103d7565b6000805460ff191660011790558015611b0c576000805461ff0019166101001790555b611b14612ee5565b606980546001818101835560008390526111947f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe3999143089283015582548082018455610dac90830155825480820184556105dc9083015582549081019092556101f4910155606580546001600160a01b038088166001600160a01b03199283161790925560668054878416908316179055606780548684169083161790556068805492851692909116919091179055611bef600080516020613e9c8339815191527360ae616a2155ee3d9a68541ba4544862310933d4600019612dc1565b611c247350b7545627a5162f82a992c33b87adc75187b2187360ae616a2155ee3d9a68541ba4544862310933d4600019612dc1565b611c597349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab7360ae616a2155ee3d9a68541ba4544862310933d4600019612dc1565b611c8e73b31f66aa3c1e785363f0875a1b74e27b85fd66c77360ae616a2155ee3d9a68541ba4544862310933d4600019612dc1565b611cc3739702230a8ea53601f5cd2dc00fdbc13d4df4a8c77360ae616a2155ee3d9a68541ba4544862310933d4600019612dc1565b606554611cf1907350b7545627a5162f82a992c33b87adc75187b218906001600160a01b0316600019612dc1565b606654611d1f907349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab906001600160a01b0316600019612dc1565b606754611d4d9073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906001600160a01b0316600019612dc1565b606854611d7b90739702230a8ea53601f5cd2dc00fdbc13d4df4a8c7906001600160a01b0316600019612dc1565b8015611dc2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610f299085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612f14565b60006001600160a01b038216600080516020613e9c8339815191521415611ee05773ebe676ee90fe1112671f19b6b7459bc678b67e8a6001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ea257600080fd5b505afa158015611eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eda9190613bd3565b92915050565b60405163b3596f0760e01b81526001600160a01b038316600482015273ebd36016b3ed09d4693ed4251c67bd858c3c7c9c9063b3596f079060240160206040518083038186803b158015611ea257600080fd5b60408051600480825260a0820190925260609160208201608080368337019050509050611f5e612fe6565b81600081518110611f7157611f71613c21565b602002602001018181525050611f8561319a565b81600181518110611f9857611f98613c21565b602002602001018181525050611fac6132e1565b81600281518110611fbf57611fbf613c21565b602002602001018181525050611fd3613428565b81600381518110611fe657611fe6613c21565b60200260200101818152505090565b60006120147350b7545627a5162f82a992c33b87adc75187b218611e34565b90506000816120238486613c02565b61202e906064613c02565b6120389190613c65565b90506000612080600080516020613e9c8339815191527350b7545627a5162f82a992c33b87adc75187b21887606461207187605f613c02565b61207b9190613c65565b61356f565b60655460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b1580156120c757600080fd5b505af11580156120db573d6000803e3d6000fd5b505060408051888152602081018590527fbf1df74b26e65e89ae5d51bd506862865562314b93d19b4edc85d5c599e95e299350019050611db9565b60006121357349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab611e34565b90506000816121448486613c02565b6121539064e8d4a51000613c02565b61215d9190613c65565b90506000612196600080516020613e9c8339815191527349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab87606461207187605f613c02565b60665460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b1580156121dd57600080fd5b505af11580156121f1573d6000803e3d6000fd5b505060408051888152602081018590527fa9467001048b3bf504294c65eb1fd450d5273b58b916ccfcc07a13b6a8ff0c0c9350019050611db9565b600061224b73b31f66aa3c1e785363f0875a1b74e27b85fd66c7611e34565b905060008161225a8486613c02565b6122699064e8d4a51000613c02565b6122739190613c65565b905060006122bb600080516020613e9c83398151915273b31f66aa3c1e785363f0875a1b74e27b85fd66c78760646122ac87605f613c02565b6122b69190613c65565b6136f7565b60675460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b15801561230257600080fd5b505af1158015612316573d6000803e3d6000fd5b505060408051888152602081018590527fd7862f5d8dd515ad5e0f279ab2382ecb18537dff2d85d8e04aca497ea6cabbf89350019050611db9565b6000612388600080516020613e9c833981519152739702230a8ea53601f5cd2dc00fdbc13d4df4a8c78460646122ac826063613c02565b60685460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b1580156123cf57600080fd5b505af11580156123e3573d6000803e3d6000fd5b505060408051858152602081018590527fb83a6f4f54d3f23fa394cbb40f56f2a370631a3957def5b0eaf834249acbfd9a93500190506117a2565b6033546001600160a01b03163314610e1a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103d7565b6065546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009185916001600160a01b0316906370a082319060240160206040518083038186803b1580156124c857600080fd5b505afa1580156124dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125009190613bd3565b61250a9190613c02565b6125149190613c65565b905080156126b557606554604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561256257600080fd5b505af1158015612576573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507350b7545627a5162f82a992c33b87adc75187b21891506370a082319060240160206040518083038186803b1580156125c757600080fd5b505afa1580156125db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ff9190613bd3565b905060006126207350b7545627a5162f82a992c33b87adc75187b218611e34565b9050600061262f856064613c02565b6126398385613c02565b6126439190613c65565b9050600061267c7350b7545627a5162f82a992c33b87adc75187b218600080516020613e9c83398151915286606461207187605f613c02565b60408051868152602081018390529192507f2b40d355bb1f77bd59be42a0b31bae8cdeabf9742501131bd13721c17b330c4f9101610965565b505050565b6066546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009185916001600160a01b0316906370a082319060240160206040518083038186803b15801561270a57600080fd5b505afa15801561271e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127429190613bd3565b61274c9190613c02565b6127569190613c65565b905080156126b557606654604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156127a457600080fd5b505af11580156127b8573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab91506370a082319060240160206040518083038186803b15801561280957600080fd5b505afa15801561281d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128419190613bd3565b905060006128627349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab611e34565b905060006128758564e8d4a51000613c02565b61287f8385613c02565b6128899190613c65565b905060006128c27349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab600080516020613e9c83398151915286606461207187605f613c02565b60408051868152602081018390529192507fb5ad212fcc131c42595455ad4c23526ff5569548cc3a4af552a15fcc7348b3359101610965565b6067546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009185916001600160a01b0316906370a082319060240160206040518083038186803b15801561294b57600080fd5b505afa15801561295f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129839190613bd3565b61298d9190613c02565b6129979190613c65565b905080156126b557606754604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156129e557600080fd5b505af11580156129f9573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526000925073b31f66aa3c1e785363f0875a1b74e27b85fd66c791506370a082319060240160206040518083038186803b158015612a4a57600080fd5b505afa158015612a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a829190613bd3565b90506000612aa373b31f66aa3c1e785363f0875a1b74e27b85fd66c7611e34565b90506000612ab68564e8d4a51000613c02565b612ac08385613c02565b612aca9190613c65565b90506000612b0373b31f66aa3c1e785363f0875a1b74e27b85fd66c7600080516020613e9c8339815191528660646122ac87605f613c02565b60408051868152602081018390529192507ffe4be6880aac6b75b6c8bf553a9157fa365e629815171f9a0a95e9401bc57ddc9101610965565b6068546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009184916001600160a01b0316906370a082319060240160206040518083038186803b158015612b8c57600080fd5b505afa158015612ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc49190613bd3565b612bce9190613c02565b612bd89190613c65565b90508015612d3b57606854604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015612c2657600080fd5b505af1158015612c3a573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015260009250739702230a8ea53601f5cd2dc00fdbc13d4df4a8c791506370a082319060240160206040518083038186803b158015612c8b57600080fd5b505afa158015612c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc39190613bd3565b90506000612cfc739702230a8ea53601f5cd2dc00fdbc13d4df4a8c7600080516020613e9c8339815191528460646122ac826063613c02565b60408051848152602081018390529192507f55697eba25e5e652e8bf9deb3c1d594084eb15fcf95553c63ec65c17ec18bb1e910160405180910390a150505b5050565b6040516001600160a01b0383166024820152604481018290526126b590849063a9059cbb60e01b90606401611dfd565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b801580612e4a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612e1057600080fd5b505afa158015612e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e489190613bd3565b155b612eb55760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016103d7565b6040516001600160a01b0383166024820152604481018290526126b590849063095ea7b360e01b90606401611dfd565b600054610100900460ff16612f0c5760405162461bcd60e51b81526004016103d790613cb9565b610e1a613823565b6000612f69826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138539092919063ffffffff16565b8051909150156126b55780806020019051810190612f879190613d04565b6126b55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d7565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b15801561303757600080fd5b505afa15801561304b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306f9190613bd3565b9050801561319257606560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156130c557600080fd5b505afa1580156130d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fd9190613bd3565b6065546040516370a0823160e01b81523060048201526001600160a01b03909116906370a08231906024015b60206040518083038186803b15801561314157600080fd5b505afa158015613155573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131799190613bd3565b6131839083613c02565b61318d9190613c65565b611348565b600091505090565b600080606660009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b1580156131eb57600080fd5b505afa1580156131ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132239190613bd3565b9050801561319257606660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561327957600080fd5b505afa15801561328d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b19190613bd3565b6066546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401613129565b600080606760009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b15801561333257600080fd5b505afa158015613346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336a9190613bd3565b9050801561319257606760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156133c057600080fd5b505afa1580156133d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f89190613bd3565b6067546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401613129565b600080606860009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b15801561347957600080fd5b505afa15801561348d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b19190613bd3565b9050801561319257606860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561350757600080fd5b505afa15801561351b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353f9190613bd3565b6068546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401613129565b604080516003808252608082019092526000918291906020820160608036833701905050905085816000815181106135a9576135a9613c21565b60200260200101906001600160a01b031690816001600160a01b03168152505073b31f66aa3c1e785363f0875a1b74e27b85fd66c7816001815181106135f1576135f1613c21565b60200260200101906001600160a01b031690816001600160a01b031681525050848160028151811061362557613625613c21565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b81527360ae616a2155ee3d9a68541ba4544862310933d4906338ed17399061367c9087908790869030904290600401613d26565b600060405180830381600087803b15801561369657600080fd5b505af11580156136aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136d29190810190613d62565b6002815181106136e4576136e4613c21565b6020026020010151915050949350505050565b60408051600280825260608201835260009283929190602083019080368337019050509050858160008151811061373057613730613c21565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061376457613764613c21565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b81527360ae616a2155ee3d9a68541ba4544862310933d4906338ed1739906137bb9087908790869030904290600401613d26565b600060405180830381600087803b1580156137d557600080fd5b505af11580156137e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138119190810190613d62565b6001815181106136e4576136e4613c21565b600054610100900460ff1661384a5760405162461bcd60e51b81526004016103d790613cb9565b610e1a33612d6f565b6060613862848460008561386c565b90505b9392505050565b6060824710156138cd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103d7565b6001600160a01b0385163b6139245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d7565b600080866001600160a01b031685876040516139409190613e4c565b60006040518083038185875af1925050503d806000811461397d576040519150601f19603f3d011682016040523d82523d6000602084013e613982565b606091505b509150915061399282828661399d565b979650505050505050565b606083156139ac575081613865565b8251156139bc5782518084602001fd5b8160405162461bcd60e51b81526004016103d79190613e68565b6000602082840312156139e857600080fd5b5035919050565b600081518084526020808501945080840160005b83811015613a285781516001600160a01b031687529582019590820190600101613a03565b509495945050505050565b604081526000613a4660408301856139ef565b82810360208481019190915284518083528582019282019060005b81811015613a7d57845183529383019391830191600101613a61565b5090979650505050505050565b6001600160a01b0381168114611a4957600080fd5b600060208284031215613ab157600080fd5b813561386581613a8a565b60008060408385031215613acf57600080fd5b50508035926020909101359150565b60008060208385031215613af157600080fd5b823567ffffffffffffffff80821115613b0957600080fd5b818501915085601f830112613b1d57600080fd5b813581811115613b2c57600080fd5b8660208260051b8501011115613b4157600080fd5b60209290920196919550909350505050565b60008060008060808587031215613b6957600080fd5b8435613b7481613a8a565b93506020850135613b8481613a8a565b92506040850135613b9481613a8a565b91506060850135613ba481613a8a565b939692955090935050565b6020808252600a908201526913db9b1e481d985d5b1d60b21b604082015260600190565b600060208284031215613be557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613c1c57613c1c613bec565b500290565b634e487b7160e01b600052603260045260246000fd5b60008219821115613c4a57613c4a613bec565b500190565b634e487b7160e01b600052604160045260246000fd5b600082613c8257634e487b7160e01b600052601260045260246000fd5b500490565b600082821015613c9957613c99613bec565b500390565b6000600019821415613cb257613cb2613bec565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215613d1657600080fd5b8151801515811461386557600080fd5b85815284602082015260a060408201526000613d4560a08301866139ef565b6001600160a01b0394909416606083015250608001529392505050565b60006020808385031215613d7557600080fd5b825167ffffffffffffffff80821115613d8d57600080fd5b818501915085601f830112613da157600080fd5b815181811115613db357613db3613c4f565b8060051b604051601f19603f83011681018181108582111715613dd857613dd8613c4f565b604052918252848201925083810185019188831115613df657600080fd5b938501935b82851015613e1457845184529385019392850192613dfb565b98975050505050505050565b60005b83811015613e3b578181015183820152602001613e23565b83811115610f295750506000910152565b60008251613e5e818460208701613e20565b9190910192915050565b6020815260008251806020840152613e87816040850160208701613e20565b601f01601f1916919091016040019291505056fe000000000000000000000000c7198437980c041c805a1edcba50c1ce5db95118a2646970667358221220b251ff585fc4f95148454c2122e27b42b00e135e68cb50269d15210ff00012fc64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/mwi/MWIStrategy.sol:MWIStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/mwi/MWIStrategy.sol:MWIStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1783,
        "contract": "contracts/mwi/MWIStrategy.sol:MWIStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/mwi/MWIStrategy.sol:MWIStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/mwi/MWIStrategy.sol:MWIStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25714,
        "contract": "contracts/mwi/MWIStrategy.sol:MWIStrategy",
        "label": "WBTCVault",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IL2Vault)25666"
      },
      {
        "astId": 25717,
        "contract": "contracts/mwi/MWIStrategy.sol:MWIStrategy",
        "label": "WETHVault",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IL2Vault)25666"
      },
      {
        "astId": 25720,
        "contract": "contracts/mwi/MWIStrategy.sol:MWIStrategy",
        "label": "WAVAXVault",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IL2Vault)25666"
      },
      {
        "astId": 25723,
        "contract": "contracts/mwi/MWIStrategy.sol:MWIStrategy",
        "label": "USDTVault",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IL2Vault)25666"
      },
      {
        "astId": 25729,
        "contract": "contracts/mwi/MWIStrategy.sol:MWIStrategy",
        "label": "targetPercentages",
        "offset": 0,
        "slot": "105",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 25731,
        "contract": "contracts/mwi/MWIStrategy.sol:MWIStrategy",
        "label": "vault",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IL2Vault)25666": {
        "encoding": "inplace",
        "label": "contract IL2Vault",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}