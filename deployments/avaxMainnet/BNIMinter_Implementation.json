{
  "address": "0x6Bd966AA3644586DE43C230DeeCF3AAe36faD02c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shareBurned",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shareMinted",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetPerc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        }
      ],
      "name": "RemoveToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetAdminWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BNI",
      "outputs": [
        {
          "internalType": "contract IBNI",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_share",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_allPoolInUSDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_APRs",
          "type": "uint256[]"
        }
      ],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getAPR1WithSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_allPoolInUSDs",
          "type": "uint256[]"
        }
      ],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getAllPoolInUSD1WithSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_poolInUSDs",
          "type": "uint256[]"
        }
      ],
      "name": "getCurrentTokenCompositionPerc",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pools",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTokenCompositionPerc1",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getCurrentTokenCompositionPercWithSig",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_poolInUSDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokenComposition",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDTAmts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokenComposition1",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getDepositTokenComposition1WithSig",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_allPoolInUSDs",
          "type": "uint256[]"
        }
      ],
      "name": "getPricePerFullShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerFullShare1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getPricePerFullShare1WithSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDTPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_share",
          "type": "uint256"
        }
      ],
      "name": "getWithdrawPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_BNI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_targetPerc",
          "type": "uint256[]"
        }
      ],
      "name": "setTokenCompositionTargetPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_urls",
          "type": "string[]"
        }
      ],
      "name": "setUrls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "targetPercentages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "urls",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8d6694577c1cd4dfb91fc6244f42f4dafd605c04b97c2347c9987985fe442fd",
  "receipt": {
    "to": null,
    "from": "0x3f68A3c1023d736D8Be867CA49Cb18c543373B99",
    "contractAddress": "0x6Bd966AA3644586DE43C230DeeCF3AAe36faD02c",
    "transactionIndex": 2,
    "gasUsed": "3304130",
    "logsBloom": "0x
    "blockHash": "0x4ec5e9ed0fb9ba405a7646e522fe1b4fe3f1f8e0690d3ebe14258d35d7da27c6",
    "transactionHash": "0xc8d6694577c1cd4dfb91fc6244f42f4dafd605c04b97c2347c9987985fe442fd",
    "logs": [],
    "blockNumber": 16632899,
    "cumulativeGasUsed": "3666154",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "193be678b50e19b63a4c1742147ab0d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareBurned\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareMinted\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetPerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdminWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNI\",\"outputs\":[{\"internalType\":\"contract IBNI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allPoolInUSDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_APRs\",\"type\":\"uint256[]\"}],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getAPR1WithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allPoolInUSDs\",\"type\":\"uint256[]\"}],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getAllPoolInUSD1WithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_poolInUSDs\",\"type\":\"uint256[]\"}],\"name\":\"getCurrentTokenCompositionPerc\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenCompositionPerc1\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getCurrentTokenCompositionPercWithSig\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_poolInUSDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_USDTAmt\",\"type\":\"uint256\"}],\"name\":\"getDepositTokenComposition\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDTAmts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_USDTAmt\",\"type\":\"uint256\"}],\"name\":\"getDepositTokenComposition1\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getDepositTokenComposition1WithSig\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allPoolInUSDs\",\"type\":\"uint256[]\"}],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getPricePerFullShare1WithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"getWithdrawPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BNI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_USDTAmt\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_targetPerc\",\"type\":\"uint256[]\"}],\"name\":\"setTokenCompositionTargetPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_urls\",\"type\":\"string[]\"}],\"name\":\"setUrls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"urls\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(address,uint256)\":{\"details\":\"mint BNIs according to the deposited USDT\",\"params\":{\"_account\":\"account to which BNIs will be minted\",\"_share\":\"amount of BNI to be burnt\"}},\"getDepositTokenComposition(uint256[],address[],uint256[],uint256)\":{\"params\":{\"_USDTAmt\":\"amount of USDT with 6 decimals\"},\"returns\":{\"_0\":\"_USDTAmts amount of USDT should be deposited to each pools\"}},\"getUSDTPriceInUSD()\":{\"returns\":{\"_0\":\"the price of USDT in USD.\"}},\"getWithdrawPerc(address,uint256)\":{\"params\":{\"_share\":\"amount of BNI to be withdrawn\"},\"returns\":{\"_sharePerc\":\"percentage of assets which should be withdrawn. It's 18 decimals\"}},\"mint(uint256,address,uint256)\":{\"details\":\"mint BNIs according to the deposited USDT\",\"params\":{\"_USDTAmt\":\"the deposited amount of USDT with 6 decimals\",\"_account\":\"account to which BNIs will be minted\",\"_pool\":\"total USD worth in all pools of BNI after deposited\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToken(uint256,address)\":{\"notice\":\"After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\"},\"getAPR(uint256[],uint256[])\":{\"notice\":\"The length of array is based on network count. And the lengths should be same on the arraies.\"},\"getAllPoolInUSD(uint256[])\":{\"notice\":\"The length of array is based on network count. And the lengths should be same on the arraies.\"},\"getCurrentTokenCompositionPerc(uint256[],address[],uint256[])\":{\"notice\":\"The length of array is based on token count. And the lengths should be same on the arraies.\"},\"getDepositTokenComposition(uint256[],address[],uint256[],uint256)\":{\"notice\":\"The length of array is based on token count. And the lengths should be same on the arraies.\"},\"getPricePerFullShare(uint256[])\":{\"notice\":\"Can be used for calculate both user shares & APR\"},\"getWithdrawPerc(address,uint256)\":{\"notice\":\"The length of array is based on token count. And the lengths should be same on the arraies.\"},\"removeToken(uint256)\":{\"notice\":\"After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\"},\"setTokenCompositionTargetPerc(uint256[])\":{\"notice\":\"The length of array is based on token count.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bni/BNIMinter.sol\":\"BNIMinter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"contracts/bni/BNIMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"./priceOracle/IPriceOracle.sol\\\";\\nimport \\\"./constant/AvaxConstant.sol\\\";\\nimport \\\"./constant/AuroraConstant.sol\\\";\\nimport \\\"./constant/MaticConstant.sol\\\";\\n\\ninterface IBNI is IERC20Upgradeable {\\n    function decimals() external view returns (uint8);\\n    function mint(address account_, uint256 amount_) external;\\n    function burn(uint256 amount) external;\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\nerror OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\\n\\ninterface Gateway {\\n    function getCurrentTokenCompositionPerc1() external view returns(\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\\n        bytes memory sig\\n    );\\n    function getAllPoolInUSD1() external view returns(\\n        uint[] memory _allPoolInUSDs,\\n        bytes memory sig\\n    );\\n    function getPricePerFullShare1() external view returns(\\n        uint[] memory _allPoolInUSDs,\\n        bytes memory sig\\n    );\\n    function getAPR1() external view returns(\\n        uint[] memory _allPoolInUSDs,  uint[] memory _APRs,\\n        bytes memory sig\\n    );\\n    function getDepositTokenComposition1() external view returns(\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\\n        bytes memory sig\\n    );\\n}\\n\\n\\ncontract BNIMinter is ReentrancyGuardUpgradeable, PausableUpgradeable, OwnableUpgradeable {\\n    using ECDSAUpgradeable for bytes32;\\n\\n    uint constant DENOMINATOR = 10000;\\n\\n    uint[] public chainIDs;\\n    address[] public tokens;\\n    uint[] public targetPercentages;\\n    mapping(uint => mapping(address => uint)) public tid; // Token indices in arrays\\n\\n    address public admin;\\n    IBNI public BNI;\\n    IPriceOracle public priceOracle;\\n\\n    string[] public urls;\\n\\n    event SetAdminWallet(address oldAdmin, address newAdmin);\\n    event AddToken(uint chainID, address token, uint tid);\\n    event RemoveToken(uint chainID, address token, uint targetPerc, uint tid);\\n    event Mint(address caller, uint amtDeposit, uint shareMinted);\\n    event Burn(address caller, uint shareBurned);\\n\\n    modifier onlyOwnerOrAdmin {\\n        require(msg.sender == owner() || msg.sender == address(admin), \\\"Only owner or admin\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _admin, address _BNI, address _priceOracle\\n    ) external initializer {\\n        __Ownable_init();\\n\\n        admin = _admin;\\n        BNI = IBNI(_BNI);\\n        priceOracle = IPriceOracle(_priceOracle);\\n\\n        chainIDs.push(MaticConstant.CHAINID);\\n        chainIDs.push(AvaxConstant.CHAINID);\\n        chainIDs.push(AuroraConstant.CHAINID);\\n\\n        tokens.push(MaticConstant.WMATIC);\\n        tokens.push(AvaxConstant.WAVAX);\\n        tokens.push(AuroraConstant.WNEAR);\\n\\n        targetPercentages.push(4000); // 40%\\n        targetPercentages.push(4000); // 40%\\n        targetPercentages.push(2000); // 20%\\n\\n        updateTid();\\n\\n        urls.push(\\\"http://localhost:8000/\\\");\\n    }\\n\\n    function updateTid() private {\\n        uint[] memory _chainIDs = chainIDs;\\n        address[] memory _tokens = tokens;\\n\\n        uint tokenCnt = _tokens.length;\\n        for (uint i = 0; i < tokenCnt; i ++) {\\n            tid[_chainIDs[i]][_tokens[i]] = i;\\n        }\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        address oldAdmin = admin;\\n        admin = _admin;\\n        emit SetAdminWallet(oldAdmin, _admin);\\n    }\\n\\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\\n    function addToken(uint _chainID, address _token) external onlyOwner {\\n        uint _tid = tid[_chainID][_token];\\n        require ((_tid == 0 && _chainID != chainIDs[0] && _token != tokens[0]), \\\"Already added\\\");\\n\\n        chainIDs.push(_chainID);\\n        tokens.push(_token);\\n        targetPercentages.push(0);\\n\\n        _tid = tokens.length-1;\\n        tid[_chainID][_token] = _tid;\\n\\n        emit AddToken(_chainID, _token, _tid);\\n    }\\n\\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\\n    function removeToken(uint _tid) external onlyOwner {\\n        uint tokenCnt = tokens.length;\\n        require(_tid < tokenCnt, \\\"Invalid tid\\\");\\n\\n        uint _chainID = chainIDs[_tid];\\n        address _token = tokens[_tid];\\n        uint _targetPerc = targetPercentages[_tid];\\n\\n        chainIDs[_tid] = chainIDs[tokenCnt-1];\\n        chainIDs.pop();\\n        tokens[_tid] = tokens[tokenCnt-1];\\n        tokens.pop();\\n        targetPercentages[_tid] = targetPercentages[tokenCnt-1];\\n        targetPercentages.pop();\\n\\n        tid[_chainID][_token] = 0;\\n        updateTid();\\n\\n        emit RemoveToken(_chainID, _token, _targetPerc, _tid);\\n    }\\n\\n    /// @notice The length of array is based on token count.\\n    function setTokenCompositionTargetPerc(uint[] calldata _targetPerc) public onlyOwner {\\n        uint targetCnt = _targetPerc.length;\\n        require(targetCnt == targetPercentages.length, \\\"Invalid count\\\");\\n\\n        uint sum;\\n        for (uint i = 0; i < targetCnt; i ++) {\\n            targetPercentages[i] = _targetPerc[i];\\n            sum += _targetPerc[i];\\n        }\\n        require(sum == DENOMINATOR, \\\"Invalid parameter\\\");\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    function getEachPoolInUSD(\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\\n    ) private view returns (uint[] memory pools) {\\n        uint inputCnt = _tokens.length;\\n        uint tokenCnt = tokens.length;\\n        pools = new uint[](tokenCnt);\\n\\n        for (uint i = 0; i < inputCnt; i ++) {\\n            uint _chainID = _chainIDs[i];\\n            address _token = _tokens[i];\\n            uint _tid = tid[_chainID][_token];\\n            if (tokenCnt <= _tid) continue;\\n            if (_tid == 0 && (_chainID != chainIDs[0] || _token != tokens[0])) continue;\\n\\n            pools[_tid] = _poolInUSDs[i];\\n        }\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    function getCurrentTokenCompositionPerc(\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\\n    ) public view returns (\\n        uint[] memory, address[] memory, uint[] memory pools, uint[] memory percentages\\n    ) {\\n        pools = getEachPoolInUSD(_chainIDs, _tokens, _poolInUSDs);\\n        uint poolCnt = pools.length;\\n\\n        uint allPool;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n\\n        percentages = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            percentages[i] = allPool == 0 ? targetPercentages[i] : pools[i] * DENOMINATOR / allPool;\\n        }\\n\\n        return (chainIDs, tokens, pools, percentages);\\n    }\\n    function getCurrentTokenCompositionPerc1() external view returns (\\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\\n    ) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getCurrentTokenCompositionPerc1.selector),\\n            BNIMinter.getCurrentTokenCompositionPercWithSig.selector,\\n            abi.encode(0)\\n        );\\n    }\\n    function getCurrentTokenCompositionPercWithSig(bytes calldata result, bytes calldata extraData) external view returns(\\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\\n    ) {\\n        extraData;\\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\\n            = abi.decode(result, (uint[], address[], uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\\n        )).recover(sig);\\n        require(admin == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\\n    }\\n\\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\\n    function getAllPoolInUSD(uint[] memory _allPoolInUSDs) public pure returns (uint) {\\n        uint networkCnt = _allPoolInUSDs.length;\\n        uint allPoolInUSD;\\n        for (uint i = 0; i < networkCnt; i ++) {\\n            allPoolInUSD += _allPoolInUSDs[i];\\n        }\\n        return allPoolInUSD;\\n    }\\n    function getAllPoolInUSD1() external view returns (uint) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getAllPoolInUSD1.selector),\\n            BNIMinter.getAllPoolInUSD1WithSig.selector,\\n            abi.encode(0)\\n        );\\n    }\\n    function getAllPoolInUSD1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\\n        extraData;\\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_allPoolInUSDs))\\n        )).recover(sig);\\n        require(admin == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getAllPoolInUSD(_allPoolInUSDs);\\n    }\\n\\n    /// @notice Can be used for calculate both user shares & APR\\n    function getPricePerFullShare(uint[] memory _allPoolInUSDs) public view returns (uint) {\\n        uint _totalSupply = BNI.totalSupply();\\n        if (_totalSupply == 0) return 1e18;\\n        return getAllPoolInUSD(_allPoolInUSDs) * 1e18 / _totalSupply;\\n    }\\n    function getPricePerFullShare1() external view returns (uint) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getPricePerFullShare1.selector),\\n            BNIMinter.getPricePerFullShare1WithSig.selector,\\n            abi.encode(0)\\n        );\\n    }\\n    function getPricePerFullShare1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\\n        extraData;\\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_allPoolInUSDs))\\n        )).recover(sig);\\n        require(admin == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getPricePerFullShare(_allPoolInUSDs);\\n    }\\n\\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\\n    function getAPR(uint[] memory _allPoolInUSDs, uint[] memory _APRs) public pure returns (uint) {\\n        uint networkCnt = _allPoolInUSDs.length;\\n        require(networkCnt == _APRs.length, \\\"Not match array length\\\");\\n\\n        uint pool = getAllPoolInUSD(_allPoolInUSDs);\\n        if (pool == 0) return 0;\\n\\n        uint allApr;\\n        for (uint i = 0; i < networkCnt; i ++) {\\n            allApr += (_APRs[i] * _allPoolInUSDs[i]);\\n        }\\n        return (allApr / pool);\\n    }\\n    function getAPR1() external view returns (uint) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getAPR1.selector),\\n            BNIMinter.getAPR1WithSig.selector,\\n            abi.encode(0)\\n        );\\n    }\\n    function getAPR1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\\n        extraData;\\n        (uint[] memory _allPoolInUSDs,  uint[] memory _APRs, bytes memory sig) = abi.decode(result, (uint[], uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_allPoolInUSDs, _APRs))\\n        )).recover(sig);\\n        require(admin == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getAPR(_allPoolInUSDs, _APRs);\\n    }\\n\\n    /// @return the price of USDT in USD.\\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\\n        return priceOracle.getAssetPrice(AvaxConstant.USDT);\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    /// @param _USDTAmt amount of USDT with 6 decimals\\n    /// @return _USDTAmts amount of USDT should be deposited to each pools\\n    function getDepositTokenComposition(\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, uint _USDTAmt\\n    ) public view returns (\\n        uint[] memory, address[] memory, uint[] memory _USDTAmts\\n    ) {\\n        (,, uint[] memory pools, uint[] memory perc) = getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\\n        uint poolCnt = perc.length;\\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n\\n        uint allPool = _USDTAmt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n\\n        uint totalAllocation;\\n        uint[] memory allocations = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            uint target = allPool * targetPercentages[i] / DENOMINATOR;\\n            if (pools[i] < target) {\\n                uint diff = target - pools[i];\\n                allocations[i] = diff;\\n                totalAllocation += diff;\\n            }\\n        }\\n\\n        _USDTAmts = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            _USDTAmts[i] = _USDTAmt * allocations[i] / totalAllocation;\\n        }\\n\\n        return (chainIDs, tokens, _USDTAmts);\\n    }\\n    function getDepositTokenComposition1(uint _USDTAmt) external view returns (\\n        uint[] memory, address[] memory, uint[] memory\\n    ) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getDepositTokenComposition1.selector),\\n            BNIMinter.getDepositTokenComposition1WithSig.selector,\\n            abi.encode(_USDTAmt)\\n        );\\n    }\\n    function getDepositTokenComposition1WithSig(bytes calldata result, bytes calldata extraData) external view returns(\\n        uint[] memory, address[] memory, uint[] memory\\n    ) {\\n        (uint _USDTAmt) = abi.decode(extraData, (uint));\\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\\n            = abi.decode(result, (uint[], address[], uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\\n        )).recover(sig);\\n        require(admin == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getDepositTokenComposition(_chainIDs, _tokens, _poolInUSDs, _USDTAmt);\\n    }\\n\\n    /// @dev mint BNIs according to the deposited USDT\\n    /// @param _pool total USD worth in all pools of BNI after deposited\\n    /// @param _account account to which BNIs will be minted\\n    /// @param _USDTAmt the deposited amount of USDT with 6 decimals\\n    function mint(uint _pool, address _account, uint _USDTAmt) external onlyOwnerOrAdmin nonReentrant whenNotPaused {\\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n        uint amtDeposit = _USDTAmt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\\n        _pool = (amtDeposit < _pool) ? _pool - amtDeposit : 0;\\n\\n        uint _totalSupply = BNI.totalSupply();\\n        uint share = (_totalSupply == 0 || _pool == 0)  ? amtDeposit : _totalSupply * amtDeposit / _pool;\\n        // When assets invested in strategy, around 0.3% lost for swapping fee. We will consider it in share amount calculation to avoid pricePerFullShare fall down under 1.\\n        share = share * 997 / 1000;\\n\\n        BNI.mint(_account, share);\\n        emit Mint(_account, amtDeposit, share);\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    /// @param _share amount of BNI to be withdrawn\\n    /// @return _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\\n    function getWithdrawPerc(address _account, uint _share) public view returns (uint _sharePerc) {\\n        require(0 < _share && _share <= BNI.balanceOf(_account), \\\"Invalid share amount\\\");\\n        return (_share * 1e18) / BNI.totalSupply();\\n    }\\n\\n    /// @dev mint BNIs according to the deposited USDT\\n    /// @param _account account to which BNIs will be minted\\n    /// @param _share amount of BNI to be burnt\\n    function burn(address _account, uint _share) external onlyOwnerOrAdmin nonReentrant {\\n        require(0 < _share && _share <= BNI.balanceOf(_account), \\\"Invalid share amount\\\");\\n        BNI.burnFrom(_account, _share);\\n        emit Burn(_account, _share);\\n    }\\n\\n    function setUrls(string[] memory _urls) external onlyOwner {\\n        urls = _urls;\\n    }\\n}\\n\",\"keccak256\":\"0x513a440b03d5c031d11b3bca3d8e42f2d7ee737a572abd06a83e4cd937864048\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstant {\\n    uint internal constant CHAINID = 1313161554;\\n\\n    address internal constant WNEAR = 0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d;\\n    address internal constant USDT = 0x4988a896b1227218e4A686fdE5EabdcAbd91571f;\\n    address internal constant USDC = 0xB12BFcA5A55806AaF64E99521918A4bf0fC40802;\\n}\\n\",\"keccak256\":\"0xaabd3d299395fab9960ea081792a9b8518845121dffb3920008a548beae82c7a\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstant {\\n    uint internal constant CHAINID = 43114;\\n\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\\n}\\n\",\"keccak256\":\"0x32657b934702db0b079758f27e387b04b519a7e5a613a84aab0a2d1cbc31116b\",\"license\":\"MIT\"},\"contracts/bni/constant/MaticConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary MaticConstant {\\n    uint internal constant CHAINID = 137;\\n\\n    address internal constant WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\n    address internal constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n}\\n\",\"keccak256\":\"0x451b6b80187891b499c09fbb17ffd8a0708934aa15e5fa74a2a2a45db2c32ae7\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613acf806100206000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c8063836a104011610130578063c0c53b8b116100b8578063ec2e54c71161007c578063ec2e54c7146104de578063ece90e90146104f1578063f2fde38b146104f9578063f851a4401461050c578063fd6878cc1461051f57600080fd5b8063c0c53b8b1461047f578063cb25bb6514610492578063d3b974a0146104a5578063da3bc85c146104b8578063dd8aae41146104cb57600080fd5b80639f86d4dd116100ff5780639f86d4dd1461041f578063a08ce52014610432578063a7645a2014610445578063af05a74914610458578063b47c6a271461046057600080fd5b8063836a1040146103d55780638da5cb5b146103e857806397cd02e6146103f95780639dc29fac1461040c57600080fd5b806357016b0a116101b3578063704b6c0211610182578063704b6c0214610374578063715018a614610387578063796676be1461038f5780637ed66ec6146103af5780637fb2df42146103c257600080fd5b806357016b0a146103305780635796d0b0146103435780635c975abb1461034b5780636cc895a91461036157600080fd5b806338a87163116101fa57806338a87163146102bd57806340b8e57f146102e057806349445553146102f35780634f64b2be146103155780635042f9b61461032857600080fd5b806309d23e241461022c5780631c60ffc3146102525780632630c12f1461027d57806336c5d724146102a8575b600080fd5b61023f61023a366004612c3b565b610532565b6040519081526020015b60405180910390f35b61023f610260366004612c6b565b60cc60209081526000928352604080842090915290825290205481565b60cf54610290906001600160a01b031681565b6040516001600160a01b039091168152602001610249565b6102bb6102b6366004612c3b565b610553565b005b6102d06102cb366004612cd8565b610843565b6040516102499493929190612db7565b61023f6102ee366004612cd8565b61093c565b610306610301366004612c3b565b6109b3565b60405161024993929190612e0f565b610290610323366004612c3b565b610a27565b61023f610a51565b6102bb61033e366004612c6b565b610a9c565b6102d0610ca8565b60655460ff166040519015158152602001610249565b6102bb61036f366004612f08565b610cfb565b6102bb610382366004612fd2565b610d3c565b6102bb610dc7565b6103a261039d366004612c3b565b610dfd565b604051610249919061303a565b6103066103bd366004612cd8565b610ea9565b6102bb6103d036600461304d565b610f43565b6102bb6103e33660046130c1565b611078565b6097546001600160a01b0316610290565b61023f61040736600461315c565b61136b565b6102bb61041a366004613198565b611438565b61023f61042d366004613198565b611674565b61023f610440366004612cd8565b6117f0565b61023f610453366004612c3b565b611860565b61023f611870565b6104686118bb565b6040805192835260ff909116602083015201610249565b6102bb61048d3660046131c2565b611956565b6102d06104a0366004613267565b611bbb565b6103066104b33660046132ee565b611db9565b61023f6104c636600461337d565b6120f0565b61023f6104d936600461315c565b6121d9565b60ce54610290906001600160a01b031681565b61023f61222a565b6102bb610507366004612fd2565b612275565b60cd54610290906001600160a01b031681565b61023f61052d366004612cd8565b612310565b60c9818154811061054257600080fd5b600091825260209091200154905081565b6097546001600160a01b031633146105865760405162461bcd60e51b815260040161057d906133e0565b60405180910390fd5b60ca548082106105c65760405162461bcd60e51b815260206004820152600b60248201526a125b9d985b1a59081d1a5960aa1b604482015260640161057d565b600060c983815481106105db576105db613415565b90600052602060002001549050600060ca84815481106105fd576105fd613415565b600091825260208220015460cb80546001600160a01b039092169350908690811061062a5761062a613415565b9060005260206000200154905060c96001856106469190613441565b8154811061065657610656613415565b906000526020600020015460c9868154811061067457610674613415565b60009182526020909120015560c980548061069157610691613458565b6001900381819060005260206000200160009055905560ca6001856106b69190613441565b815481106106c6576106c6613415565b60009182526020909120015460ca80546001600160a01b0390921691879081106106f2576106f2613415565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060ca80548061073157610731613458565b600082815260209020810160001990810180546001600160a01b031916905501905560cb610760600186613441565b8154811061077057610770613415565b906000526020600020015460cb868154811061078e5761078e613415565b60009182526020909120015560cb8054806107ab576107ab613458565b60008281526020808220830160001990810183905590920190925584825260cc815260408083206001600160a01b03861684529091528120556107ec612374565b604080518481526001600160a01b0384166020820152908101829052606081018690527fd8cc1d279bf727e9ee02c4ed116f7c12f4965ace9b477482de71a7929a1871b39060800160405180910390a15050505050565b606080808060008080806108598b8d018d61348e565b935093509350935060006108e98286868660405160200161087c9392919061355f565b60408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c01604051602081830303815290604052805190602001206124b790919063ffffffff16565b60cd549091506001600160a01b038083169116146109195760405162461bcd60e51b815260040161057d906135a8565b610924858585611bbb565b98509850985098505050505050945094509450949050565b600080808061094d878901896135d5565b925092509250600061096c82858560405160200161087c929190613652565b60cd549091506001600160a01b0380831691161461099c5760405162461bcd60e51b815260040161057d906135a8565b6109a684846120f0565b9998505050505050505050565b6040805160048152602481018252602080820180516001600160e01b0316633c1d708960e01b179052825190810184905260609283928392309260d09291633f6b376360e11b91015b60408051601f1981840301815290829052630556f18360e41b825261057d95949392916004016136a2565b60ca8181548110610a3757600080fd5b6000918252602090912001546001600160a01b0316905081565b6040805160048152602481018252602080820180516001600160e01b03166328217cdb60e11b179052825160009181018290529092309260d0929091630504672960e51b91016109fc565b6097546001600160a01b03163314610ac65760405162461bcd60e51b815260040161057d906133e0565b600082815260cc602090815260408083206001600160a01b038516845290915290205480158015610b15575060c9600081548110610b0657610b06613415565b90600052602060002001548314155b8015610b4c575060ca600081548110610b3057610b30613415565b6000918252602090912001546001600160a01b03838116911614155b610b885760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b604482015260640161057d565b60c9805460018082019092557f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d280184905560ca805480830182557f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee10180546001600160a01b0319166001600160a01b03861617905560cb8054808401825560009182527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb015554610c399190613441565b600084815260cc602090815260408083206001600160a01b038716808552908352928190208490558051878152918201929092529081018290529091507fefa15d4fefbb71d07b3cdc624ab208ebe2d3b6933946582fd8b807e8a5bc93cc9060600160405180910390a1505050565b6040805160048152602481018252602080820180516001600160e01b03166305796d0b60e41b1790528251600091810191909152606092839283928392309260d09290916338a8716360e01b91016109fc565b6097546001600160a01b03163314610d255760405162461bcd60e51b815260040161057d906133e0565b8051610d389060d0906020840190612af2565b5050565b6097546001600160a01b03163314610d665760405162461bcd60e51b815260040161057d906133e0565b60cd80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9f0ac88be9159761bacf6c9e7c294c397ebf594607f6b3f2f70e7e0841ea68e8910160405180910390a15050565b6097546001600160a01b03163314610df15760405162461bcd60e51b815260040161057d906133e0565b610dfb60006124d3565b565b60d08181548110610e0d57600080fd5b906000526020600020016000915090508054610e2890613667565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5490613667565b8015610ea15780601f10610e7657610100808354040283529160200191610ea1565b820191906000526020600020905b815481529060010190602001808311610e8457829003601f168201915b505050505081565b606080806000610ebb85870187612c3b565b90506000808080610ece8b8d018d61348e565b93509350935093506000610ef18286868660405160200161087c9392919061355f565b60cd549091506001600160a01b03808316911614610f215760405162461bcd60e51b815260040161057d906135a8565b610f2d85858589611db9565b9850985098505050505050509450945094915050565b6097546001600160a01b03163314610f6d5760405162461bcd60e51b815260040161057d906133e0565b60cb5481908114610fb05760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a590818dbdd5b9d609a1b604482015260640161057d565b6000805b8281101561102c57848482818110610fce57610fce613415565b9050602002013560cb8281548110610fe857610fe8613415565b60009182526020909120015584848281811061100657611006613415565b905060200201358261101891906137cf565b915080611024816137e7565b915050610fb4565b5061271081146110725760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103830b930b6b2ba32b960791b604482015260640161057d565b50505050565b6097546001600160a01b031633148061109b575060cd546001600160a01b031633145b6110dd5760405162461bcd60e51b815260206004820152601360248201527227b7363c9037bbb732b91037b91030b236b4b760691b604482015260640161057d565b600260015414156111305760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161057d565b600260015560655460ff161561117b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161057d565b6000806111866118bb565b9092509050600061119882600a6138e6565b836111a88664e8d4a510006138f5565b6111b291906138f5565b6111bc9190613914565b90508581106111cc5760006111d6565b6111d68187613441565b9550600060ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561122857600080fd5b505afa15801561123c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112609190613936565b9050600081158061126f575087155b61128d578761127e84846138f5565b6112889190613914565b61128f565b825b90506103e86112a0826103e56138f5565b6112aa9190613914565b60ce546040516340c10f1960e01b81526001600160a01b038a81166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b1580156112fa57600080fd5b505af115801561130e573d6000803e3d6000fd5b5050604080516001600160a01b038b168152602081018790529081018490527f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f9250606001905060405180910390a1505060018055505050505050565b60008060ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113bc57600080fd5b505afa1580156113d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f49190613936565b90508061140b5750670de0b6b3a764000092915050565b80611415846121d9565b61142790670de0b6b3a76400006138f5565b6114319190613914565b9392505050565b6097546001600160a01b031633148061145b575060cd546001600160a01b031633145b61149d5760405162461bcd60e51b815260206004820152601360248201527227b7363c9037bbb732b91037b91030b236b4b760691b604482015260640161057d565b600260015414156114f05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161057d565b60026001558015801590611580575060ce546040516370a0823160e01b81526001600160a01b038481166004830152909116906370a082319060240160206040518083038186803b15801561154457600080fd5b505afa158015611558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157c9190613936565b8111155b6115c35760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081cda185c9948185b5bdd5b9d60621b604482015260640161057d565b60ce5460405163079cc67960e41b81526001600160a01b03848116600483015260248201849052909116906379cc679090604401600060405180830381600087803b15801561161157600080fd5b505af1158015611625573d6000803e3d6000fd5b5050604080516001600160a01b0386168152602081018590527fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5935001905060405180910390a1505060018055565b6000816000108015611702575060ce546040516370a0823160e01b81526001600160a01b038581166004830152909116906370a082319060240160206040518083038186803b1580156116c657600080fd5b505afa1580156116da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fe9190613936565b8211155b6117455760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081cda185c9948185b5bdd5b9d60621b604482015260640161057d565b60ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179357600080fd5b505afa1580156117a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cb9190613936565b6117dd83670de0b6b3a76400006138f5565b6117e79190613914565b90505b92915050565b600080806118008688018861394f565b91509150600061181b828460405160200161087c91906139a8565b60cd549091506001600160a01b0380831691161461184b5760405162461bcd60e51b815260040161057d906135a8565b611854836121d9565b98975050505050505050565b60cb818154811061054257600080fd5b6040805160048152602481018252602080820180516001600160e01b031663af05a74960e01b179052825160009181018290529092309260d0929091633f5a1e3360e21b91016109fc565b60cf5460405163b3596f0760e01b815273c7198437980c041c805a1edcba50c1ce5db95118600482015260009182916001600160a01b039091169063b3596f0790602401604080518083038186803b15801561191657600080fd5b505afa15801561192a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194e91906139b4565b915091509091565b60006119626001612525565b9050801561197a576000805461ff0019166101001790555b6119826125b2565b60cd80546001600160a01b038087166001600160a01b03199283161790925560ce805486841690831617905560cf80549285169282169290921790915560c980546001818101835560897f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d28928301558254808201845561a86a908301558254808201909355634e454152929091019190915560ca805480830182557f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee190810180548516730d500b1d8e8ef31e21c99d1db9a6444d3adf12701790558154808401835581018054851673b31f66aa3c1e785363f0875a1b74e27b85fd66c7179055815480840190925501805490921673c42c30ac6cc15fac9bd938618bcaa1a1fae8501d1790915560cb805480830182556000829052610fa07fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb9182018190558254808501845582015581549283019091556107d0910155611b01612374565b60d0805460018101825560009190915260408051808201909152601680825275687474703a2f2f6c6f63616c686f73743a383030302f60501b6020909201918252611b6f927fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb019190612b4f565b508015611072576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b606080606080611bcc8787876125e1565b80519092506000805b82811015611c1657848181518110611bef57611bef613415565b602002602001015182611c0291906137cf565b915080611c0e816137e7565b915050611bd5565b50816001600160401b03811115611c2f57611c2f612e48565b604051908082528060200260200182016040528015611c58578160200160208202803683370190505b50925060005b82811015611cf1578115611ca35781612710868381518110611c8257611c82613415565b6020026020010151611c9491906138f5565b611c9e9190613914565b611cc2565b60cb8181548110611cb657611cb6613415565b90600052602060002001545b848281518110611cd457611cd4613415565b602090810291909101015280611ce9816137e7565b915050611c5e565b5060c960ca858583805480602002602001604051908101604052809291908181526020018280548015611d4357602002820191906000526020600020905b815481526020019060010190808311611d2f575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015611d9f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d81575b505050505092509550955095509550505093509350935093565b6060806060600080611dcc898989611bbb565b935093505050600081519050600080611de36118bb565b90925090506000611df582600a6138e6565b83611e058c64e8d4a510006138f5565b611e0f91906138f5565b611e199190613914565b905060005b84811015611e5f57868181518110611e3857611e38613415565b602002602001015182611e4b91906137cf565b915080611e57816137e7565b915050611e1e565b50600080856001600160401b03811115611e7b57611e7b612e48565b604051908082528060200260200182016040528015611ea4578160200160208202803683370190505b50905060005b86811015611f7557600061271060cb8381548110611eca57611eca613415565b906000526020600020015486611ee091906138f5565b611eea9190613914565b9050808a8381518110611eff57611eff613415565b60200260200101511015611f625760008a8381518110611f2157611f21613415565b602002602001015182611f349190613441565b905080848481518110611f4957611f49613415565b6020908102919091010152611f5e81866137cf565b9450505b5080611f6d816137e7565b915050611eaa565b50856001600160401b03811115611f8e57611f8e612e48565b604051908082528060200260200182016040528015611fb7578160200160208202803683370190505b50985060005b868110156120245782828281518110611fd857611fd8613415565b60200260200101518e611feb91906138f5565b611ff59190613914565b8a828151811061200757612007613415565b60209081029190910101528061201c816137e7565b915050611fbd565b5060c960ca8a8280548060200260200160405190810160405280929190818152602001828054801561207557602002820191906000526020600020905b815481526020019060010190808311612061575b50505050509250818054806020026020016040519081016040528092919081815260200182805480156120d157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120b3575b505050505091509a509a509a5050505050505050509450945094915050565b8151815160009190811461213f5760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b604482015260640161057d565b600061214a856121d9565b90508061215c576000925050506117ea565b6000805b838110156121c45786818151811061217a5761217a613415565b602002602001015186828151811061219457612194613415565b60200260200101516121a691906138f5565b6121b090836137cf565b9150806121bc816137e7565b915050612160565b506121cf8282613914565b9695505050505050565b805160009081805b82811015612222578481815181106121fb576121fb613415565b60200260200101518261220e91906137cf565b91508061221a816137e7565b9150506121e1565b509392505050565b6040805160048152602481018252602080820180516001600160e01b0316630ece90e960e41b179052825160009181018290529092309260d09290916340b8e57f60e01b91016109fc565b6097546001600160a01b0316331461229f5760405162461bcd60e51b815260040161057d906133e0565b6001600160a01b0381166123045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161057d565b61230d816124d3565b50565b600080806123208688018861394f565b91509150600061233b828460405160200161087c91906139a8565b60cd549091506001600160a01b0380831691161461236b5760405162461bcd60e51b815260040161057d906135a8565b6118548361136b565b600060c98054806020026020016040519081016040528092919081815260200182805480156123c257602002820191906000526020600020905b8154815260200190600101908083116123ae575b50505050509050600060ca80548060200260200160405190810160405280929190818152602001828054801561242157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612403575b505083519394506000925050505b81811015611072578060cc600086848151811061244e5761244e613415565b60200260200101518152602001908152602001600020600085848151811061247857612478613415565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555080806124af906137e7565b91505061242f565b60008060006124c68585612771565b91509150612222816127e1565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff161561256c578160ff1660011480156125485750303b155b6125645760405162461bcd60e51b815260040161057d906139ea565b506000919050565b60005460ff8084169116106125935760405162461bcd60e51b815260040161057d906139ea565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166125d95760405162461bcd60e51b815260040161057d90613a38565b610dfb61299c565b815160ca5460609190806001600160401b0381111561260257612602612e48565b60405190808252806020026020018201604052801561262b578160200160208202803683370190505b50925060005b8281101561276757600087828151811061264d5761264d613415565b60200260200101519050600087838151811061266b5761266b613415565b602090810291909101810151600084815260cc835260408082206001600160a01b038416835290935291909120549091508085116126ab57505050612755565b8015801561270c575060c96000815481106126c8576126c8613415565b90600052602060002001548314158061270c575060ca6000815481106126f0576126f0613415565b6000918252602090912001546001600160a01b03838116911614155b1561271957505050612755565b87848151811061272b5761272b613415565b602002602001015187828151811061274557612745613415565b6020026020010181815250505050505b8061275f816137e7565b915050612631565b5050509392505050565b6000808251604114156127a85760208301516040840151606085015160001a61279c878285856129cc565b945094505050506127da565b8251604014156127d257602083015160408401516127c7868383612ab9565b9350935050506127da565b506000905060025b9250929050565b60008160048111156127f5576127f5613a83565b14156127fe5750565b600181600481111561281257612812613a83565b14156128605760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161057d565b600281600481111561287457612874613a83565b14156128c25760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161057d565b60038160048111156128d6576128d6613a83565b141561292f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161057d565b600481600481111561294357612943613a83565b141561230d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161057d565b600054610100900460ff166129c35760405162461bcd60e51b815260040161057d90613a38565b610dfb336124d3565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612a035750600090506003612ab0565b8460ff16601b14158015612a1b57508460ff16601c14155b15612a2c5750600090506004612ab0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612a80573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612aa957600060019250925050612ab0565b9150600090505b94509492505050565b6000806001600160ff1b03831681612ad660ff86901c601b6137cf565b9050612ae4878288856129cc565b935093505050935093915050565b828054828255906000526020600020908101928215612b3f579160200282015b82811115612b3f5782518051612b2f918491602090910190612b4f565b5091602001919060010190612b12565b50612b4b929150612bcf565b5090565b828054612b5b90613667565b90600052602060002090601f016020900481019282612b7d5760008555612bc3565b82601f10612b9657805160ff1916838001178555612bc3565b82800160010185558215612bc3579182015b82811115612bc3578251825591602001919060010190612ba8565b50612b4b929150612bec565b80821115612b4b576000612be38282612c01565b50600101612bcf565b5b80821115612b4b5760008155600101612bed565b508054612c0d90613667565b6000825580601f10612c1d575050565b601f01602090049060005260206000209081019061230d9190612bec565b600060208284031215612c4d57600080fd5b5035919050565b80356001600160a01b03811681146125ad57600080fd5b60008060408385031215612c7e57600080fd5b82359150612c8e60208401612c54565b90509250929050565b60008083601f840112612ca957600080fd5b5081356001600160401b03811115612cc057600080fd5b6020830191508360208285010111156127da57600080fd5b60008060008060408587031215612cee57600080fd5b84356001600160401b0380821115612d0557600080fd5b612d1188838901612c97565b90965094506020870135915080821115612d2a57600080fd5b50612d3787828801612c97565b95989497509550505050565b600081518084526020808501945080840160005b83811015612d7357815187529582019590820190600101612d57565b509495945050505050565b600081518084526020808501945080840160005b83811015612d735781516001600160a01b031687529582019590820190600101612d92565b608081526000612dca6080830187612d43565b8281036020840152612ddc8187612d7e565b90508281036040840152612df08186612d43565b90508281036060840152612e048185612d43565b979650505050505050565b606081526000612e226060830186612d43565b8281036020840152612e348186612d7e565b905082810360408401526121cf8185612d43565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612e8657612e86612e48565b604052919050565b60006001600160401b03821115612ea757612ea7612e48565b5060051b60200190565b60006001600160401b03831115612eca57612eca612e48565b612edd601f8401601f1916602001612e5e565b9050828152838383011115612ef157600080fd5b828260208301376000602084830101529392505050565b60006020808385031215612f1b57600080fd5b82356001600160401b0380821115612f3257600080fd5b818501915085601f830112612f4657600080fd5b8135612f59612f5482612e8e565b612e5e565b81815260059190911b83018401908481019088831115612f7857600080fd5b8585015b83811015612fc557803585811115612f945760008081fd5b8601603f81018b13612fa65760008081fd5b612fb78b8983013560408401612eb1565b845250918601918601612f7c565b5098975050505050505050565b600060208284031215612fe457600080fd5b6117e782612c54565b6000815180845260005b8181101561301357602081850181015186830182015201612ff7565b81811115613025576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006117e76020830184612fed565b6000806020838503121561306057600080fd5b82356001600160401b038082111561307757600080fd5b818501915085601f83011261308b57600080fd5b81358181111561309a57600080fd5b8660208260051b85010111156130af57600080fd5b60209290920196919550909350505050565b6000806000606084860312156130d657600080fd5b833592506130e660208501612c54565b9150604084013590509250925092565b600082601f83011261310757600080fd5b81356020613117612f5483612e8e565b82815260059290921b8401810191818101908684111561313657600080fd5b8286015b84811015613151578035835291830191830161313a565b509695505050505050565b60006020828403121561316e57600080fd5b81356001600160401b0381111561318457600080fd5b613190848285016130f6565b949350505050565b600080604083850312156131ab57600080fd5b6131b483612c54565b946020939093013593505050565b6000806000606084860312156131d757600080fd5b6131e084612c54565b92506131ee60208501612c54565b91506131fc60408501612c54565b90509250925092565b600082601f83011261321657600080fd5b81356020613226612f5483612e8e565b82815260059290921b8401810191818101908684111561324557600080fd5b8286015b848110156131515761325a81612c54565b8352918301918301613249565b60008060006060848603121561327c57600080fd5b83356001600160401b038082111561329357600080fd5b61329f878388016130f6565b945060208601359150808211156132b557600080fd5b6132c187838801613205565b935060408601359150808211156132d757600080fd5b506132e4868287016130f6565b9150509250925092565b6000806000806080858703121561330457600080fd5b84356001600160401b038082111561331b57600080fd5b613327888389016130f6565b9550602087013591508082111561333d57600080fd5b61334988838901613205565b9450604087013591508082111561335f57600080fd5b5061336c878288016130f6565b949793965093946060013593505050565b6000806040838503121561339057600080fd5b82356001600160401b03808211156133a757600080fd5b6133b3868387016130f6565b935060208501359150808211156133c957600080fd5b506133d6858286016130f6565b9150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156134535761345361342b565b500390565b634e487b7160e01b600052603160045260246000fd5b600082601f83011261347f57600080fd5b6117e783833560208501612eb1565b600080600080608085870312156134a457600080fd5b84356001600160401b03808211156134bb57600080fd5b6134c7888389016130f6565b955060208701359150808211156134dd57600080fd5b6134e988838901613205565b945060408701359150808211156134ff57600080fd5b61350b888389016130f6565b9350606087013591508082111561352157600080fd5b5061352e8782880161346e565b91505092959194509250565b80516000906020808401838315612d7357815187529582019590820190600101612d57565b600061356b828661353a565b8451602080870160005b8381101561359a5781516001600160a01b031685529382019390820190600101613575565b505050506121cf818561353a565b60208082526013908201527214da59db995c881a5cc81a5b98dbdc9c9958dd606a1b604082015260600190565b6000806000606084860312156135ea57600080fd5b83356001600160401b038082111561360157600080fd5b61360d878388016130f6565b9450602086013591508082111561362357600080fd5b61362f878388016130f6565b9350604086013591508082111561364557600080fd5b506132e48682870161346e565b6000613190613661838661353a565b8461353a565b600181811c9082168061367b57607f821691505b6020821081141561369c57634e487b7160e01b600052602260045260246000fd5b50919050565b600060a0820160018060a01b0388168352602060a08185015281885480845260c08601915060c08160051b870101935060008a8152838120815b838110156137935788870360bf1901855281548390600181811c908083168061370657607f831692505b8a831081141561372457634e487b7160e01b88526022600452602488fd5b828c5260208c0181801561373f57600181146137505761377a565b60ff19861682528c8201965061377a565b6000898152602090208a5b8681101561377457815484820152908501908e0161375b565b83019750505b50949b50509789019794909401935050506001016136dc565b50505050505082810360408401526137ab8187612fed565b6001600160e01b031986166060850152905082810360808401526118548185612fed565b600082198211156137e2576137e261342b565b500190565b60006000198214156137fb576137fb61342b565b5060010190565b600181815b8085111561383d5781600019048211156138235761382361342b565b8085161561383057918102915b93841c9390800290613807565b509250929050565b600082613854575060016117ea565b81613861575060006117ea565b816001811461387757600281146138815761389d565b60019150506117ea565b60ff8411156138925761389261342b565b50506001821b6117ea565b5060208310610133831016604e8410600b84101617156138c0575081810a6117ea565b6138ca8383613802565b80600019048211156138de576138de61342b565b029392505050565b60006117e760ff841683613845565b600081600019048311821515161561390f5761390f61342b565b500290565b60008261393157634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561394857600080fd5b5051919050565b6000806040838503121561396257600080fd5b82356001600160401b038082111561397957600080fd5b613985868387016130f6565b9350602085013591508082111561399b57600080fd5b506133d68582860161346e565b60006117e7828461353a565b600080604083850312156139c757600080fd5b82519150602083015160ff811681146139df57600080fd5b809150509250929050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fdfea26469706673582212208187da15a2d7bfd5a58299042aad332e9c3ed0c8b059ff0a028498b4dd3b35ed64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c8063836a104011610130578063c0c53b8b116100b8578063ec2e54c71161007c578063ec2e54c7146104de578063ece90e90146104f1578063f2fde38b146104f9578063f851a4401461050c578063fd6878cc1461051f57600080fd5b8063c0c53b8b1461047f578063cb25bb6514610492578063d3b974a0146104a5578063da3bc85c146104b8578063dd8aae41146104cb57600080fd5b80639f86d4dd116100ff5780639f86d4dd1461041f578063a08ce52014610432578063a7645a2014610445578063af05a74914610458578063b47c6a271461046057600080fd5b8063836a1040146103d55780638da5cb5b146103e857806397cd02e6146103f95780639dc29fac1461040c57600080fd5b806357016b0a116101b3578063704b6c0211610182578063704b6c0214610374578063715018a614610387578063796676be1461038f5780637ed66ec6146103af5780637fb2df42146103c257600080fd5b806357016b0a146103305780635796d0b0146103435780635c975abb1461034b5780636cc895a91461036157600080fd5b806338a87163116101fa57806338a87163146102bd57806340b8e57f146102e057806349445553146102f35780634f64b2be146103155780635042f9b61461032857600080fd5b806309d23e241461022c5780631c60ffc3146102525780632630c12f1461027d57806336c5d724146102a8575b600080fd5b61023f61023a366004612c3b565b610532565b6040519081526020015b60405180910390f35b61023f610260366004612c6b565b60cc60209081526000928352604080842090915290825290205481565b60cf54610290906001600160a01b031681565b6040516001600160a01b039091168152602001610249565b6102bb6102b6366004612c3b565b610553565b005b6102d06102cb366004612cd8565b610843565b6040516102499493929190612db7565b61023f6102ee366004612cd8565b61093c565b610306610301366004612c3b565b6109b3565b60405161024993929190612e0f565b610290610323366004612c3b565b610a27565b61023f610a51565b6102bb61033e366004612c6b565b610a9c565b6102d0610ca8565b60655460ff166040519015158152602001610249565b6102bb61036f366004612f08565b610cfb565b6102bb610382366004612fd2565b610d3c565b6102bb610dc7565b6103a261039d366004612c3b565b610dfd565b604051610249919061303a565b6103066103bd366004612cd8565b610ea9565b6102bb6103d036600461304d565b610f43565b6102bb6103e33660046130c1565b611078565b6097546001600160a01b0316610290565b61023f61040736600461315c565b61136b565b6102bb61041a366004613198565b611438565b61023f61042d366004613198565b611674565b61023f610440366004612cd8565b6117f0565b61023f610453366004612c3b565b611860565b61023f611870565b6104686118bb565b6040805192835260ff909116602083015201610249565b6102bb61048d3660046131c2565b611956565b6102d06104a0366004613267565b611bbb565b6103066104b33660046132ee565b611db9565b61023f6104c636600461337d565b6120f0565b61023f6104d936600461315c565b6121d9565b60ce54610290906001600160a01b031681565b61023f61222a565b6102bb610507366004612fd2565b612275565b60cd54610290906001600160a01b031681565b61023f61052d366004612cd8565b612310565b60c9818154811061054257600080fd5b600091825260209091200154905081565b6097546001600160a01b031633146105865760405162461bcd60e51b815260040161057d906133e0565b60405180910390fd5b60ca548082106105c65760405162461bcd60e51b815260206004820152600b60248201526a125b9d985b1a59081d1a5960aa1b604482015260640161057d565b600060c983815481106105db576105db613415565b90600052602060002001549050600060ca84815481106105fd576105fd613415565b600091825260208220015460cb80546001600160a01b039092169350908690811061062a5761062a613415565b9060005260206000200154905060c96001856106469190613441565b8154811061065657610656613415565b906000526020600020015460c9868154811061067457610674613415565b60009182526020909120015560c980548061069157610691613458565b6001900381819060005260206000200160009055905560ca6001856106b69190613441565b815481106106c6576106c6613415565b60009182526020909120015460ca80546001600160a01b0390921691879081106106f2576106f2613415565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060ca80548061073157610731613458565b600082815260209020810160001990810180546001600160a01b031916905501905560cb610760600186613441565b8154811061077057610770613415565b906000526020600020015460cb868154811061078e5761078e613415565b60009182526020909120015560cb8054806107ab576107ab613458565b60008281526020808220830160001990810183905590920190925584825260cc815260408083206001600160a01b03861684529091528120556107ec612374565b604080518481526001600160a01b0384166020820152908101829052606081018690527fd8cc1d279bf727e9ee02c4ed116f7c12f4965ace9b477482de71a7929a1871b39060800160405180910390a15050505050565b606080808060008080806108598b8d018d61348e565b935093509350935060006108e98286868660405160200161087c9392919061355f565b60408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c01604051602081830303815290604052805190602001206124b790919063ffffffff16565b60cd549091506001600160a01b038083169116146109195760405162461bcd60e51b815260040161057d906135a8565b610924858585611bbb565b98509850985098505050505050945094509450949050565b600080808061094d878901896135d5565b925092509250600061096c82858560405160200161087c929190613652565b60cd549091506001600160a01b0380831691161461099c5760405162461bcd60e51b815260040161057d906135a8565b6109a684846120f0565b9998505050505050505050565b6040805160048152602481018252602080820180516001600160e01b0316633c1d708960e01b179052825190810184905260609283928392309260d09291633f6b376360e11b91015b60408051601f1981840301815290829052630556f18360e41b825261057d95949392916004016136a2565b60ca8181548110610a3757600080fd5b6000918252602090912001546001600160a01b0316905081565b6040805160048152602481018252602080820180516001600160e01b03166328217cdb60e11b179052825160009181018290529092309260d0929091630504672960e51b91016109fc565b6097546001600160a01b03163314610ac65760405162461bcd60e51b815260040161057d906133e0565b600082815260cc602090815260408083206001600160a01b038516845290915290205480158015610b15575060c9600081548110610b0657610b06613415565b90600052602060002001548314155b8015610b4c575060ca600081548110610b3057610b30613415565b6000918252602090912001546001600160a01b03838116911614155b610b885760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b604482015260640161057d565b60c9805460018082019092557f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d280184905560ca805480830182557f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee10180546001600160a01b0319166001600160a01b03861617905560cb8054808401825560009182527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb015554610c399190613441565b600084815260cc602090815260408083206001600160a01b038716808552908352928190208490558051878152918201929092529081018290529091507fefa15d4fefbb71d07b3cdc624ab208ebe2d3b6933946582fd8b807e8a5bc93cc9060600160405180910390a1505050565b6040805160048152602481018252602080820180516001600160e01b03166305796d0b60e41b1790528251600091810191909152606092839283928392309260d09290916338a8716360e01b91016109fc565b6097546001600160a01b03163314610d255760405162461bcd60e51b815260040161057d906133e0565b8051610d389060d0906020840190612af2565b5050565b6097546001600160a01b03163314610d665760405162461bcd60e51b815260040161057d906133e0565b60cd80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9f0ac88be9159761bacf6c9e7c294c397ebf594607f6b3f2f70e7e0841ea68e8910160405180910390a15050565b6097546001600160a01b03163314610df15760405162461bcd60e51b815260040161057d906133e0565b610dfb60006124d3565b565b60d08181548110610e0d57600080fd5b906000526020600020016000915090508054610e2890613667565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5490613667565b8015610ea15780601f10610e7657610100808354040283529160200191610ea1565b820191906000526020600020905b815481529060010190602001808311610e8457829003601f168201915b505050505081565b606080806000610ebb85870187612c3b565b90506000808080610ece8b8d018d61348e565b93509350935093506000610ef18286868660405160200161087c9392919061355f565b60cd549091506001600160a01b03808316911614610f215760405162461bcd60e51b815260040161057d906135a8565b610f2d85858589611db9565b9850985098505050505050509450945094915050565b6097546001600160a01b03163314610f6d5760405162461bcd60e51b815260040161057d906133e0565b60cb5481908114610fb05760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a590818dbdd5b9d609a1b604482015260640161057d565b6000805b8281101561102c57848482818110610fce57610fce613415565b9050602002013560cb8281548110610fe857610fe8613415565b60009182526020909120015584848281811061100657611006613415565b905060200201358261101891906137cf565b915080611024816137e7565b915050610fb4565b5061271081146110725760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103830b930b6b2ba32b960791b604482015260640161057d565b50505050565b6097546001600160a01b031633148061109b575060cd546001600160a01b031633145b6110dd5760405162461bcd60e51b815260206004820152601360248201527227b7363c9037bbb732b91037b91030b236b4b760691b604482015260640161057d565b600260015414156111305760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161057d565b600260015560655460ff161561117b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161057d565b6000806111866118bb565b9092509050600061119882600a6138e6565b836111a88664e8d4a510006138f5565b6111b291906138f5565b6111bc9190613914565b90508581106111cc5760006111d6565b6111d68187613441565b9550600060ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561122857600080fd5b505afa15801561123c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112609190613936565b9050600081158061126f575087155b61128d578761127e84846138f5565b6112889190613914565b61128f565b825b90506103e86112a0826103e56138f5565b6112aa9190613914565b60ce546040516340c10f1960e01b81526001600160a01b038a81166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b1580156112fa57600080fd5b505af115801561130e573d6000803e3d6000fd5b5050604080516001600160a01b038b168152602081018790529081018490527f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f9250606001905060405180910390a1505060018055505050505050565b60008060ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113bc57600080fd5b505afa1580156113d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f49190613936565b90508061140b5750670de0b6b3a764000092915050565b80611415846121d9565b61142790670de0b6b3a76400006138f5565b6114319190613914565b9392505050565b6097546001600160a01b031633148061145b575060cd546001600160a01b031633145b61149d5760405162461bcd60e51b815260206004820152601360248201527227b7363c9037bbb732b91037b91030b236b4b760691b604482015260640161057d565b600260015414156114f05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161057d565b60026001558015801590611580575060ce546040516370a0823160e01b81526001600160a01b038481166004830152909116906370a082319060240160206040518083038186803b15801561154457600080fd5b505afa158015611558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157c9190613936565b8111155b6115c35760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081cda185c9948185b5bdd5b9d60621b604482015260640161057d565b60ce5460405163079cc67960e41b81526001600160a01b03848116600483015260248201849052909116906379cc679090604401600060405180830381600087803b15801561161157600080fd5b505af1158015611625573d6000803e3d6000fd5b5050604080516001600160a01b0386168152602081018590527fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5935001905060405180910390a1505060018055565b6000816000108015611702575060ce546040516370a0823160e01b81526001600160a01b038581166004830152909116906370a082319060240160206040518083038186803b1580156116c657600080fd5b505afa1580156116da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fe9190613936565b8211155b6117455760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081cda185c9948185b5bdd5b9d60621b604482015260640161057d565b60ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179357600080fd5b505afa1580156117a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cb9190613936565b6117dd83670de0b6b3a76400006138f5565b6117e79190613914565b90505b92915050565b600080806118008688018861394f565b91509150600061181b828460405160200161087c91906139a8565b60cd549091506001600160a01b0380831691161461184b5760405162461bcd60e51b815260040161057d906135a8565b611854836121d9565b98975050505050505050565b60cb818154811061054257600080fd5b6040805160048152602481018252602080820180516001600160e01b031663af05a74960e01b179052825160009181018290529092309260d0929091633f5a1e3360e21b91016109fc565b60cf5460405163b3596f0760e01b815273c7198437980c041c805a1edcba50c1ce5db95118600482015260009182916001600160a01b039091169063b3596f0790602401604080518083038186803b15801561191657600080fd5b505afa15801561192a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194e91906139b4565b915091509091565b60006119626001612525565b9050801561197a576000805461ff0019166101001790555b6119826125b2565b60cd80546001600160a01b038087166001600160a01b03199283161790925560ce805486841690831617905560cf80549285169282169290921790915560c980546001818101835560897f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d28928301558254808201845561a86a908301558254808201909355634e454152929091019190915560ca805480830182557f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee190810180548516730d500b1d8e8ef31e21c99d1db9a6444d3adf12701790558154808401835581018054851673b31f66aa3c1e785363f0875a1b74e27b85fd66c7179055815480840190925501805490921673c42c30ac6cc15fac9bd938618bcaa1a1fae8501d1790915560cb805480830182556000829052610fa07fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb9182018190558254808501845582015581549283019091556107d0910155611b01612374565b60d0805460018101825560009190915260408051808201909152601680825275687474703a2f2f6c6f63616c686f73743a383030302f60501b6020909201918252611b6f927fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb019190612b4f565b508015611072576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b606080606080611bcc8787876125e1565b80519092506000805b82811015611c1657848181518110611bef57611bef613415565b602002602001015182611c0291906137cf565b915080611c0e816137e7565b915050611bd5565b50816001600160401b03811115611c2f57611c2f612e48565b604051908082528060200260200182016040528015611c58578160200160208202803683370190505b50925060005b82811015611cf1578115611ca35781612710868381518110611c8257611c82613415565b6020026020010151611c9491906138f5565b611c9e9190613914565b611cc2565b60cb8181548110611cb657611cb6613415565b90600052602060002001545b848281518110611cd457611cd4613415565b602090810291909101015280611ce9816137e7565b915050611c5e565b5060c960ca858583805480602002602001604051908101604052809291908181526020018280548015611d4357602002820191906000526020600020905b815481526020019060010190808311611d2f575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015611d9f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d81575b505050505092509550955095509550505093509350935093565b6060806060600080611dcc898989611bbb565b935093505050600081519050600080611de36118bb565b90925090506000611df582600a6138e6565b83611e058c64e8d4a510006138f5565b611e0f91906138f5565b611e199190613914565b905060005b84811015611e5f57868181518110611e3857611e38613415565b602002602001015182611e4b91906137cf565b915080611e57816137e7565b915050611e1e565b50600080856001600160401b03811115611e7b57611e7b612e48565b604051908082528060200260200182016040528015611ea4578160200160208202803683370190505b50905060005b86811015611f7557600061271060cb8381548110611eca57611eca613415565b906000526020600020015486611ee091906138f5565b611eea9190613914565b9050808a8381518110611eff57611eff613415565b60200260200101511015611f625760008a8381518110611f2157611f21613415565b602002602001015182611f349190613441565b905080848481518110611f4957611f49613415565b6020908102919091010152611f5e81866137cf565b9450505b5080611f6d816137e7565b915050611eaa565b50856001600160401b03811115611f8e57611f8e612e48565b604051908082528060200260200182016040528015611fb7578160200160208202803683370190505b50985060005b868110156120245782828281518110611fd857611fd8613415565b60200260200101518e611feb91906138f5565b611ff59190613914565b8a828151811061200757612007613415565b60209081029190910101528061201c816137e7565b915050611fbd565b5060c960ca8a8280548060200260200160405190810160405280929190818152602001828054801561207557602002820191906000526020600020905b815481526020019060010190808311612061575b50505050509250818054806020026020016040519081016040528092919081815260200182805480156120d157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120b3575b505050505091509a509a509a5050505050505050509450945094915050565b8151815160009190811461213f5760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b604482015260640161057d565b600061214a856121d9565b90508061215c576000925050506117ea565b6000805b838110156121c45786818151811061217a5761217a613415565b602002602001015186828151811061219457612194613415565b60200260200101516121a691906138f5565b6121b090836137cf565b9150806121bc816137e7565b915050612160565b506121cf8282613914565b9695505050505050565b805160009081805b82811015612222578481815181106121fb576121fb613415565b60200260200101518261220e91906137cf565b91508061221a816137e7565b9150506121e1565b509392505050565b6040805160048152602481018252602080820180516001600160e01b0316630ece90e960e41b179052825160009181018290529092309260d09290916340b8e57f60e01b91016109fc565b6097546001600160a01b0316331461229f5760405162461bcd60e51b815260040161057d906133e0565b6001600160a01b0381166123045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161057d565b61230d816124d3565b50565b600080806123208688018861394f565b91509150600061233b828460405160200161087c91906139a8565b60cd549091506001600160a01b0380831691161461236b5760405162461bcd60e51b815260040161057d906135a8565b6118548361136b565b600060c98054806020026020016040519081016040528092919081815260200182805480156123c257602002820191906000526020600020905b8154815260200190600101908083116123ae575b50505050509050600060ca80548060200260200160405190810160405280929190818152602001828054801561242157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612403575b505083519394506000925050505b81811015611072578060cc600086848151811061244e5761244e613415565b60200260200101518152602001908152602001600020600085848151811061247857612478613415565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555080806124af906137e7565b91505061242f565b60008060006124c68585612771565b91509150612222816127e1565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff161561256c578160ff1660011480156125485750303b155b6125645760405162461bcd60e51b815260040161057d906139ea565b506000919050565b60005460ff8084169116106125935760405162461bcd60e51b815260040161057d906139ea565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166125d95760405162461bcd60e51b815260040161057d90613a38565b610dfb61299c565b815160ca5460609190806001600160401b0381111561260257612602612e48565b60405190808252806020026020018201604052801561262b578160200160208202803683370190505b50925060005b8281101561276757600087828151811061264d5761264d613415565b60200260200101519050600087838151811061266b5761266b613415565b602090810291909101810151600084815260cc835260408082206001600160a01b038416835290935291909120549091508085116126ab57505050612755565b8015801561270c575060c96000815481106126c8576126c8613415565b90600052602060002001548314158061270c575060ca6000815481106126f0576126f0613415565b6000918252602090912001546001600160a01b03838116911614155b1561271957505050612755565b87848151811061272b5761272b613415565b602002602001015187828151811061274557612745613415565b6020026020010181815250505050505b8061275f816137e7565b915050612631565b5050509392505050565b6000808251604114156127a85760208301516040840151606085015160001a61279c878285856129cc565b945094505050506127da565b8251604014156127d257602083015160408401516127c7868383612ab9565b9350935050506127da565b506000905060025b9250929050565b60008160048111156127f5576127f5613a83565b14156127fe5750565b600181600481111561281257612812613a83565b14156128605760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161057d565b600281600481111561287457612874613a83565b14156128c25760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161057d565b60038160048111156128d6576128d6613a83565b141561292f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161057d565b600481600481111561294357612943613a83565b141561230d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161057d565b600054610100900460ff166129c35760405162461bcd60e51b815260040161057d90613a38565b610dfb336124d3565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612a035750600090506003612ab0565b8460ff16601b14158015612a1b57508460ff16601c14155b15612a2c5750600090506004612ab0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612a80573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612aa957600060019250925050612ab0565b9150600090505b94509492505050565b6000806001600160ff1b03831681612ad660ff86901c601b6137cf565b9050612ae4878288856129cc565b935093505050935093915050565b828054828255906000526020600020908101928215612b3f579160200282015b82811115612b3f5782518051612b2f918491602090910190612b4f565b5091602001919060010190612b12565b50612b4b929150612bcf565b5090565b828054612b5b90613667565b90600052602060002090601f016020900481019282612b7d5760008555612bc3565b82601f10612b9657805160ff1916838001178555612bc3565b82800160010185558215612bc3579182015b82811115612bc3578251825591602001919060010190612ba8565b50612b4b929150612bec565b80821115612b4b576000612be38282612c01565b50600101612bcf565b5b80821115612b4b5760008155600101612bed565b508054612c0d90613667565b6000825580601f10612c1d575050565b601f01602090049060005260206000209081019061230d9190612bec565b600060208284031215612c4d57600080fd5b5035919050565b80356001600160a01b03811681146125ad57600080fd5b60008060408385031215612c7e57600080fd5b82359150612c8e60208401612c54565b90509250929050565b60008083601f840112612ca957600080fd5b5081356001600160401b03811115612cc057600080fd5b6020830191508360208285010111156127da57600080fd5b60008060008060408587031215612cee57600080fd5b84356001600160401b0380821115612d0557600080fd5b612d1188838901612c97565b90965094506020870135915080821115612d2a57600080fd5b50612d3787828801612c97565b95989497509550505050565b600081518084526020808501945080840160005b83811015612d7357815187529582019590820190600101612d57565b509495945050505050565b600081518084526020808501945080840160005b83811015612d735781516001600160a01b031687529582019590820190600101612d92565b608081526000612dca6080830187612d43565b8281036020840152612ddc8187612d7e565b90508281036040840152612df08186612d43565b90508281036060840152612e048185612d43565b979650505050505050565b606081526000612e226060830186612d43565b8281036020840152612e348186612d7e565b905082810360408401526121cf8185612d43565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612e8657612e86612e48565b604052919050565b60006001600160401b03821115612ea757612ea7612e48565b5060051b60200190565b60006001600160401b03831115612eca57612eca612e48565b612edd601f8401601f1916602001612e5e565b9050828152838383011115612ef157600080fd5b828260208301376000602084830101529392505050565b60006020808385031215612f1b57600080fd5b82356001600160401b0380821115612f3257600080fd5b818501915085601f830112612f4657600080fd5b8135612f59612f5482612e8e565b612e5e565b81815260059190911b83018401908481019088831115612f7857600080fd5b8585015b83811015612fc557803585811115612f945760008081fd5b8601603f81018b13612fa65760008081fd5b612fb78b8983013560408401612eb1565b845250918601918601612f7c565b5098975050505050505050565b600060208284031215612fe457600080fd5b6117e782612c54565b6000815180845260005b8181101561301357602081850181015186830182015201612ff7565b81811115613025576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006117e76020830184612fed565b6000806020838503121561306057600080fd5b82356001600160401b038082111561307757600080fd5b818501915085601f83011261308b57600080fd5b81358181111561309a57600080fd5b8660208260051b85010111156130af57600080fd5b60209290920196919550909350505050565b6000806000606084860312156130d657600080fd5b833592506130e660208501612c54565b9150604084013590509250925092565b600082601f83011261310757600080fd5b81356020613117612f5483612e8e565b82815260059290921b8401810191818101908684111561313657600080fd5b8286015b84811015613151578035835291830191830161313a565b509695505050505050565b60006020828403121561316e57600080fd5b81356001600160401b0381111561318457600080fd5b613190848285016130f6565b949350505050565b600080604083850312156131ab57600080fd5b6131b483612c54565b946020939093013593505050565b6000806000606084860312156131d757600080fd5b6131e084612c54565b92506131ee60208501612c54565b91506131fc60408501612c54565b90509250925092565b600082601f83011261321657600080fd5b81356020613226612f5483612e8e565b82815260059290921b8401810191818101908684111561324557600080fd5b8286015b848110156131515761325a81612c54565b8352918301918301613249565b60008060006060848603121561327c57600080fd5b83356001600160401b038082111561329357600080fd5b61329f878388016130f6565b945060208601359150808211156132b557600080fd5b6132c187838801613205565b935060408601359150808211156132d757600080fd5b506132e4868287016130f6565b9150509250925092565b6000806000806080858703121561330457600080fd5b84356001600160401b038082111561331b57600080fd5b613327888389016130f6565b9550602087013591508082111561333d57600080fd5b61334988838901613205565b9450604087013591508082111561335f57600080fd5b5061336c878288016130f6565b949793965093946060013593505050565b6000806040838503121561339057600080fd5b82356001600160401b03808211156133a757600080fd5b6133b3868387016130f6565b935060208501359150808211156133c957600080fd5b506133d6858286016130f6565b9150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156134535761345361342b565b500390565b634e487b7160e01b600052603160045260246000fd5b600082601f83011261347f57600080fd5b6117e783833560208501612eb1565b600080600080608085870312156134a457600080fd5b84356001600160401b03808211156134bb57600080fd5b6134c7888389016130f6565b955060208701359150808211156134dd57600080fd5b6134e988838901613205565b945060408701359150808211156134ff57600080fd5b61350b888389016130f6565b9350606087013591508082111561352157600080fd5b5061352e8782880161346e565b91505092959194509250565b80516000906020808401838315612d7357815187529582019590820190600101612d57565b600061356b828661353a565b8451602080870160005b8381101561359a5781516001600160a01b031685529382019390820190600101613575565b505050506121cf818561353a565b60208082526013908201527214da59db995c881a5cc81a5b98dbdc9c9958dd606a1b604082015260600190565b6000806000606084860312156135ea57600080fd5b83356001600160401b038082111561360157600080fd5b61360d878388016130f6565b9450602086013591508082111561362357600080fd5b61362f878388016130f6565b9350604086013591508082111561364557600080fd5b506132e48682870161346e565b6000613190613661838661353a565b8461353a565b600181811c9082168061367b57607f821691505b6020821081141561369c57634e487b7160e01b600052602260045260246000fd5b50919050565b600060a0820160018060a01b0388168352602060a08185015281885480845260c08601915060c08160051b870101935060008a8152838120815b838110156137935788870360bf1901855281548390600181811c908083168061370657607f831692505b8a831081141561372457634e487b7160e01b88526022600452602488fd5b828c5260208c0181801561373f57600181146137505761377a565b60ff19861682528c8201965061377a565b6000898152602090208a5b8681101561377457815484820152908501908e0161375b565b83019750505b50949b50509789019794909401935050506001016136dc565b50505050505082810360408401526137ab8187612fed565b6001600160e01b031986166060850152905082810360808401526118548185612fed565b600082198211156137e2576137e261342b565b500190565b60006000198214156137fb576137fb61342b565b5060010190565b600181815b8085111561383d5781600019048211156138235761382361342b565b8085161561383057918102915b93841c9390800290613807565b509250929050565b600082613854575060016117ea565b81613861575060006117ea565b816001811461387757600281146138815761389d565b60019150506117ea565b60ff8411156138925761389261342b565b50506001821b6117ea565b5060208310610133831016604e8410600b84101617156138c0575081810a6117ea565b6138ca8383613802565b80600019048211156138de576138de61342b565b029392505050565b60006117e760ff841683613845565b600081600019048311821515161561390f5761390f61342b565b500290565b60008261393157634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561394857600080fd5b5051919050565b6000806040838503121561396257600080fd5b82356001600160401b038082111561397957600080fd5b613985868387016130f6565b9350602085013591508082111561399b57600080fd5b506133d68582860161346e565b60006117e7828461353a565b600080604083850312156139c757600080fd5b82519150602083015160ff811681146139df57600080fd5b809150509250929050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fdfea26469706673582212208187da15a2d7bfd5a58299042aad332e9c3ed0c8b059ff0a028498b4dd3b35ed64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(address,uint256)": {
        "details": "mint BNIs according to the deposited USDT",
        "params": {
          "_account": "account to which BNIs will be minted",
          "_share": "amount of BNI to be burnt"
        }
      },
      "getDepositTokenComposition(uint256[],address[],uint256[],uint256)": {
        "params": {
          "_USDTAmt": "amount of USDT with 6 decimals"
        },
        "returns": {
          "_0": "_USDTAmts amount of USDT should be deposited to each pools"
        }
      },
      "getUSDTPriceInUSD()": {
        "returns": {
          "_0": "the price of USDT in USD."
        }
      },
      "getWithdrawPerc(address,uint256)": {
        "params": {
          "_share": "amount of BNI to be withdrawn"
        },
        "returns": {
          "_sharePerc": "percentage of assets which should be withdrawn. It's 18 decimals"
        }
      },
      "mint(uint256,address,uint256)": {
        "details": "mint BNIs according to the deposited USDT",
        "params": {
          "_USDTAmt": "the deposited amount of USDT with 6 decimals",
          "_account": "account to which BNIs will be minted",
          "_pool": "total USD worth in all pools of BNI after deposited"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToken(uint256,address)": {
        "notice": "After this method called, setTokenCompositionTargetPerc should be called to adjust percentages."
      },
      "getAPR(uint256[],uint256[])": {
        "notice": "The length of array is based on network count. And the lengths should be same on the arraies."
      },
      "getAllPoolInUSD(uint256[])": {
        "notice": "The length of array is based on network count. And the lengths should be same on the arraies."
      },
      "getCurrentTokenCompositionPerc(uint256[],address[],uint256[])": {
        "notice": "The length of array is based on token count. And the lengths should be same on the arraies."
      },
      "getDepositTokenComposition(uint256[],address[],uint256[],uint256)": {
        "notice": "The length of array is based on token count. And the lengths should be same on the arraies."
      },
      "getPricePerFullShare(uint256[])": {
        "notice": "Can be used for calculate both user shares & APR"
      },
      "getWithdrawPerc(address,uint256)": {
        "notice": "The length of array is based on token count. And the lengths should be same on the arraies."
      },
      "removeToken(uint256)": {
        "notice": "After this method called, setTokenCompositionTargetPerc should be called to adjust percentages."
      },
      "setTokenCompositionTargetPerc(uint256[])": {
        "notice": "The length of array is based on token count."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 390,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 434,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1657,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 286,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 375,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2504,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "chainIDs",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2507,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "tokens",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2510,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "targetPercentages",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2516,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "tid",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2518,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "admin",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 2521,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "BNI",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IBNI)2420"
      },
      {
        "astId": 2524,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "priceOracle",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IPriceOracle)8663"
      },
      {
        "astId": 2527,
        "contract": "contracts/bni/BNIMinter.sol:BNIMinter",
        "label": "urls",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBNI)2420": {
        "encoding": "inplace",
        "label": "contract IBNI",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)8663": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}