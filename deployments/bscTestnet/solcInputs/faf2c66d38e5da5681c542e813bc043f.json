{
  "language": "Solidity",
  "sources": {
    "contracts/lci/deps/Vault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../libs/Math.sol\";\nimport \"../libs/Price.sol\";\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n\n}\n\ninterface IUniPair is IERC20Upgradeable{\n    function getReserves() external view returns (uint, uint);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n}\n\ninterface IMasterChefV2 {\n    function poolInfo(\n        uint pid\n    ) external view returns(\n        uint accCakePerShare, uint lastRewardBlock, uint allocPoint, uint totalBoostedShare, bool isRegular\n    );\n\n    function userInfo(\n        uint pid, address user\n    ) external view returns(\n        uint amount, uint rewardDebt, uint boostMultiplier\n    );\n\n    function pendingCake(uint pid, address user) external view returns (uint);\n    function lpToken(uint pid) external view returns (address);\n    function totalRegularAllocPoint() external view returns (uint);\n    function totalSpecialAllocPoint() external view returns (uint);\n    function cakePerBlock(bool isRegular) external view returns (uint amount);\n\n    function deposit(uint pid, uint amount) external;\n    function withdraw(uint pid, uint amount) external;\n}\n\ncontract BscVault is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    using SafeERC20Upgradeable for IUniPair;\n\n    IERC20Upgradeable public constant CAKE  = IERC20Upgradeable(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);\n    IERC20Upgradeable public constant WBNB = IERC20Upgradeable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\n\n    IUniRouter public constant PckRouter = IUniRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    IMasterChefV2 public constant MasterChefV2 = IMasterChefV2(0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652);\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    uint public pid;\n    IUniPair public lpToken;\n    IERC20Upgradeable public token0;\n    IERC20Upgradeable public token1;\n\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n    uint constant BSC_BLOCK_TIME = 3;\n    uint constant BLOCKS_PER_YEAR = (60 / BSC_BLOCK_TIME) * 60 * 24 * 365; // 10512000\n\n    uint public lpRewardApr;\n    uint public lpReservePerShare;\n    uint public lpDataLastUpdate;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        uint _pid,\n        address _treasury, address _admin\n    ) external initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        yieldFee = 2000; //20%\n        pid = _pid;\n\n        address _lpToken = MasterChefV2.lpToken(_pid);\n\n        lpToken = IUniPair(_lpToken);\n        token0 = IERC20Upgradeable(lpToken.token0());\n        token1 = IERC20Upgradeable(lpToken.token1());\n        \n        treasuryWallet = _treasury;\n        admin = _admin;\n        \n        lpToken.safeApprove(address(MasterChefV2), type(uint).max);\n        CAKE.safeApprove(address(PckRouter), type(uint).max);\n        token0.approve(address(PckRouter), type(uint).max);\n        token1.approve(address(PckRouter), type(uint).max);\n\n        _updateLpRewardApr();\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        require(_amount > 0, \"Invalid amount\");\n\n        depositedBlock[msg.sender] = block.number;\n        lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint _pool = getAllPool();\n        MasterChefV2.deposit(pid, _amount);\n\n        uint _totalSupply = totalSupply();\n        uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        _mint(msg.sender, _shares);\n\n        emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        require(_shares > 0, \"Invalid Amount\");\n        require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        uint lpTokenAvailable = lpToken.balanceOf(address(this));\n        if(lpTokenAvailable < _amountToWithdraw) {\n            MasterChefV2.withdraw(pid, _amountToWithdraw - lpTokenAvailable );\n        }\n        _burn(msg.sender, _shares);\n\n        lpToken.safeTransfer(msg.sender, _amountToWithdraw);\n        emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() private returns (uint available){\n        available = lpToken.balanceOf(address(this));\n        if(available > 0) {\n            MasterChefV2.deposit(pid, available);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        _yield();\n        (uint stakedTokens,,) = MasterChefV2.userInfo(pid, address(this));\n        if(stakedTokens > 0 ) {\n            MasterChefV2.withdraw(pid, stakedTokens);\n        }\n        emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < DENOMINATOR, \"yieldFeePerc invalid\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n        _updateLpRewardApr();\n    }\n\n    function _yield() private {\n        uint cakeBalance = CAKE.balanceOf(address(this));\n        \n        if(cakeBalance > 0) {\n            uint fee = cakeBalance * yieldFee / DENOMINATOR; //yield fee\n            CAKE.safeTransfer(treasuryWallet, fee);\n            cakeBalance -= fee;\n\n            uint _token0Amount = token0 == CAKE ? cakeBalance /2 : _swap(address(CAKE), address(token0), cakeBalance/2)[1];\n            uint _token1Amount = token1 == CAKE ? cakeBalance /2 :  _swap(address(CAKE), address(token1), cakeBalance/2)[1];\n\n            PckRouter.addLiquidity(address(token0), address(token1), _token0Amount, _token1Amount, 0, 0, address(this), block.timestamp);\n\n            _invest();\n\n            (uint CAKEPriceInUSD, uint denominator) = PriceLib.getCAKEPriceInUSD();\n            emit Yield((cakeBalance + fee) * CAKEPriceInUSD / denominator);\n            emit YieldFee(fee * CAKEPriceInUSD / denominator);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint[] memory amounts){\n        address[] memory path = new address[](2);\n\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n\n        amounts = PckRouter.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp);\n    }\n\n    function getAllPool() public view returns (uint ) {\n        (uint stakedTokens,,) = MasterChefV2.userInfo(pid, address(this));\n        return lpToken.balanceOf(address(this)) + stakedTokens;\n    }\n\n    function getAllPoolInBNB() public view returns (uint _valueInBNB) {\n        return _getValueInBNB(getAllPool());\n    }\n\n    function _getValueInBNB(uint lpAmt) public view returns (uint _valueInBNB) {\n        uint _totalSupply = lpToken.totalSupply();\n\n        (uint _reserve0, uint _reserve1) = lpToken.getReserves();\n        \n        uint _total0 = lpAmt * _reserve0 / _totalSupply;\n        uint _total1 = lpAmt * _reserve1 / _totalSupply;\n        \n        _valueInBNB = (_total0 * _getPriceInBNB(address(token0))) + \n        (_total1 * _getPriceInBNB(address(token1))) ;\n\n        _valueInBNB = _valueInBNB / 1e18;\n    }\n\n    function _getPriceInBNB(address _token) private view returns (uint) {\n        if(_token == address(WBNB)) {\n            return 1e18;\n        } else {\n            address[] memory path = new address[](2);\n\n            path[0] = _token;\n            path[1] = address(WBNB);\n            return PckRouter.getAmountsOut(1e18, path)[1];\n        }\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        (uint BNBPriceInUSD, uint denominator) = PriceLib.getBNBPriceInUSD();\n        return getAllPoolInBNB() * BNBPriceInUSD / denominator;\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return inUSD == true ?\n            getAllPoolInUSD() * 1e18 / _totalSupply :\n            getAllPool() * 1e18 / _totalSupply;\n    }\n\n    ///@notice Returns the pending rewards in UDS.\n    function getPendingRewards() public view returns (uint) {\n        uint pendingCake = MasterChefV2.pendingCake(pid, address(this));\n        (uint CAKEPriceInUSD, uint denominator) = PriceLib.getCAKEPriceInUSD();\n        return pendingCake * CAKEPriceInUSD / denominator;\n    }\n\n    function getAPR() external view returns (uint) {\n        (uint _lpRewardApr,,) = getLpRewardApr();\n        uint _farmRewardApr = getCakeRewardApr();\n        _farmRewardApr = _farmRewardApr * (DENOMINATOR-yieldFee) / DENOMINATOR;\n        return (_lpRewardApr + _farmRewardApr);\n    }\n\n    function _updateLpRewardApr() private {\n        (uint _lpRewardApr, uint _lpReservePerShare, bool _update) = getLpRewardApr();\n        if (_update) {\n            lpRewardApr = _lpRewardApr;\n            lpReservePerShare = _lpReservePerShare;\n            lpDataLastUpdate = block.timestamp;\n        }\n    }\n\n    function _getLpReservePerShare() private view returns (uint) {\n        uint _totalSupply = lpToken.totalSupply();\n        if (_totalSupply == 0) return 0;\n        (uint reserve0, uint reserve1) = lpToken.getReserves();\n        return Math.sqrt(reserve0 * reserve1) / _totalSupply;\n    }\n\n    function getLpRewardApr() public view returns (uint, uint, bool) {\n        if (lpRewardApr == 0 || (lpDataLastUpdate+DAY_IN_SEC) <= block.timestamp) {\n            uint _lpReservePerShare = _getLpReservePerShare();\n            if (0 < lpReservePerShare && lpReservePerShare < _lpReservePerShare) {\n                uint _lpRewardApr = (_lpReservePerShare-lpReservePerShare) * YEAR_IN_SEC * 1e18 / (lpReservePerShare * (block.timestamp-lpDataLastUpdate));\n                return (_lpRewardApr, _lpReservePerShare, true);\n            } else {\n                return (0, _lpReservePerShare, true);\n            }\n        } else {\n            return (lpRewardApr, lpReservePerShare, false);\n        }\n    }\n\n    function getCakeRewardApr() public view returns (uint) {\n        uint yearlyCakeReward = _getYearlyCakeReward();\n        (uint CAKEPriceInUSD, uint cakeDenominator) = PriceLib.getCAKEPriceInUSD();\n        uint yearlyRewardInUSD = yearlyCakeReward * CAKEPriceInUSD / cakeDenominator;\n\n        uint poolInBNB = _getValueInBNB(lpToken.balanceOf(address(MasterChefV2)));\n        (uint BNBPriceInUSD, uint bnbDenominator) = PriceLib.getBNBPriceInUSD();\n        uint poolInUSD = poolInBNB * BNBPriceInUSD / bnbDenominator;\n\n        return yearlyRewardInUSD * 1e18 / poolInUSD;\n    }\n\n    function _getYearlyCakeReward() private view returns (uint) {\n        (,, uint allocPoint, , bool isRegular) = MasterChefV2.poolInfo(pid);\n        uint totalAllocPoint = isRegular ? MasterChefV2.totalRegularAllocPoint() : MasterChefV2.totalSpecialAllocPoint();\n        uint cakePerBlock = MasterChefV2.cakePerBlock(isRegular);\n        return cakePerBlock * BLOCKS_PER_YEAR * allocPoint / totalAllocPoint;\n    }\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/lci/libs/Math.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/lci/libs/Price.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\ninterface IChainlink {\n    function latestAnswer() external view returns (int256);\n}\n\nlibrary PriceLib {\n    function getBNBPriceInUSD() internal view returns (uint, uint) {\n        uint BNBPriceInUSD = uint(IChainlink(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE).latestAnswer()); // 8 decimals\n        return (BNBPriceInUSD, 1e8);\n    }\n\n    function getCAKEPriceInUSD() internal view returns (uint, uint) {\n        uint CAKEPriceInUSD = uint(IChainlink(0xB6064eD41d4f67e353768aA239cA86f4F73665a1).latestAnswer()); // 8 decimals\n        return (CAKEPriceInUSD, 1e8);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/lci/deps/VaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../libs/Math.sol\";\nimport \"../libs/Price.sol\";\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n\n}\n\ninterface IUniPair is IERC20Upgradeable{\n    function getReserves() external view returns (uint, uint);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n}\n\ninterface IMasterChefV2 {\n    function poolInfo(\n        uint pid\n    ) external view returns(\n        uint accCakePerShare, uint lastRewardBlock, uint allocPoint, uint totalBoostedShare, bool isRegular\n    );\n\n    function userInfo(\n        uint pid, address user\n    ) external view returns(\n        uint amount, uint rewardDebt, uint boostMultiplier\n    );\n\n    function pendingCake(uint pid, address user) external view returns (uint);\n    function lpToken(uint pid) external view returns (address);\n    function totalRegularAllocPoint() external view returns (uint);\n    function totalSpecialAllocPoint() external view returns (uint);\n    function cakePerBlock(bool isRegular) external view returns (uint amount);\n\n    function deposit(uint pid, uint amount) external;\n    function withdraw(uint pid, uint amount) external;\n}\n\ncontract BscVaultTest is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    using SafeERC20Upgradeable for IUniPair;\n\n    IERC20Upgradeable public constant CAKE  = IERC20Upgradeable(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);\n    IERC20Upgradeable public constant WBNB = IERC20Upgradeable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\n\n    IUniRouter public constant PckRouter = IUniRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    IMasterChefV2 public constant MasterChefV2 = IMasterChefV2(0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652);\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    uint public pid;\n    IUniPair public lpToken;\n    IERC20Upgradeable public token0;\n    IERC20Upgradeable public token1;\n\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n    uint constant BSC_BLOCK_TIME = 3;\n    uint constant BLOCKS_PER_YEAR = (60 / BSC_BLOCK_TIME) * 60 * 24 * 365; // 10512000\n\n    uint public lpRewardApr;\n    uint public lpReservePerShare;\n    uint public lpDataLastUpdate;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        uint _pid,\n        address _treasury, address _admin\n    ) external initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        yieldFee = 2000; //20%\n        pid = _pid;\n\n        // address _lpToken = MasterChefV2.lpToken(_pid);\n\n        // lpToken = IUniPair(_lpToken);\n        // token0 = IERC20Upgradeable(lpToken.token0());\n        // token1 = IERC20Upgradeable(lpToken.token1());\n        \n        treasuryWallet = _treasury;\n        admin = _admin;\n        \n        // lpToken.safeApprove(address(MasterChefV2), type(uint).max);\n        // CAKE.safeApprove(address(PckRouter), type(uint).max);\n        // token0.approve(address(PckRouter), type(uint).max);\n        // token1.approve(address(PckRouter), type(uint).max);\n\n        _updateLpRewardApr();\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        // require(_amount > 0, \"Invalid amount\");\n\n        // depositedBlock[msg.sender] = block.number;\n        // lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n\n        // uint _pool = getAllPool();\n        // MasterChefV2.deposit(pid, _amount);\n\n        // uint _totalSupply = totalSupply();\n        // uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        // _mint(msg.sender, _shares);\n\n        // emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        // require(_shares > 0, \"Invalid Amount\");\n        // require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        // require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        // uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        // uint lpTokenAvailable = lpToken.balanceOf(address(this));\n        // if(lpTokenAvailable < _amountToWithdraw) {\n        //     MasterChefV2.withdraw(pid, _amountToWithdraw - lpTokenAvailable );\n        // }\n        // _burn(msg.sender, _shares);\n\n        // lpToken.safeTransfer(msg.sender, _amountToWithdraw);\n        // emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() private returns (uint available){\n        available = lpToken.balanceOf(address(this));\n        if(available > 0) {\n            MasterChefV2.deposit(pid, available);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        // _yield();\n        // (uint stakedTokens,,) = MasterChefV2.userInfo(pid, address(this));\n        // if(stakedTokens > 0 ) {\n        //     MasterChefV2.withdraw(pid, stakedTokens);\n        // }\n        // emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        // _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < DENOMINATOR, \"yieldFeePerc invalid\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        // _yield();\n        _updateLpRewardApr();\n    }\n\n    function _yield() private {\n        uint cakeBalance = CAKE.balanceOf(address(this));\n        \n        if(cakeBalance > 0) {\n            uint fee = cakeBalance * yieldFee / DENOMINATOR; //yield fee\n            CAKE.safeTransfer(treasuryWallet, fee);\n            cakeBalance -= fee;\n\n            uint _token0Amount = token0 == CAKE ? cakeBalance /2 : _swap(address(CAKE), address(token0), cakeBalance/2)[1];\n            uint _token1Amount = token1 == CAKE ? cakeBalance /2 :  _swap(address(CAKE), address(token1), cakeBalance/2)[1];\n\n            PckRouter.addLiquidity(address(token0), address(token1), _token0Amount, _token1Amount, 0, 0, address(this), block.timestamp);\n\n            _invest();\n\n            (uint CAKEPriceInUSD, uint denominator) = PriceLib.getCAKEPriceInUSD();\n            emit Yield((cakeBalance + fee) * CAKEPriceInUSD / denominator);\n            emit YieldFee(fee * CAKEPriceInUSD / denominator);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint[] memory amounts){\n        address[] memory path = new address[](2);\n\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n\n        amounts = PckRouter.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp);\n    }\n\n    function getAllPool() public view returns (uint ) {\n        // (uint stakedTokens,,) = MasterChefV2.userInfo(pid, address(this));\n        // return lpToken.balanceOf(address(this)) + stakedTokens;\n        return 0;\n    }\n\n    function getAllPoolInBNB() public view returns (uint _valueInBNB) {\n        // return _getValueInBNB(getAllPool());\n        return 0;\n    }\n\n    function _getValueInBNB(uint lpAmt) public view returns (uint _valueInBNB) {\n        uint _totalSupply = lpToken.totalSupply();\n\n        (uint _reserve0, uint _reserve1) = lpToken.getReserves();\n        \n        uint _total0 = lpAmt * _reserve0 / _totalSupply;\n        uint _total1 = lpAmt * _reserve1 / _totalSupply;\n        \n        _valueInBNB = (_total0 * _getPriceInBNB(address(token0))) + \n        (_total1 * _getPriceInBNB(address(token1))) ;\n\n        _valueInBNB = _valueInBNB / 1e18;\n    }\n\n    function _getPriceInBNB(address _token) private view returns (uint) {\n        if(_token == address(WBNB)) {\n            return 1e18;\n        } else {\n            address[] memory path = new address[](2);\n\n            path[0] = _token;\n            path[1] = address(WBNB);\n            return PckRouter.getAmountsOut(1e18, path)[1];\n        }\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // (uint BNBPriceInUSD, uint denominator) = PriceLib.getBNBPriceInUSD();\n        // return getAllPoolInBNB() * BNBPriceInUSD / denominator;\n        return 0;\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        // uint _totalSupply = totalSupply();\n        // if (_totalSupply == 0) return 1e18;\n        // return inUSD == true ?\n        //     getAllPoolInUSD() * 1e18 / _totalSupply :\n        //     getAllPool() * 1e18 / _totalSupply;\n        return 1e18;\n    }\n\n    ///@notice Returns the pending rewards in UDS.\n    function getPendingRewards() public view returns (uint) {\n        // uint pendingCake = MasterChefV2.pendingCake(pid, address(this));\n        // (uint CAKEPriceInUSD, uint denominator) = PriceLib.getCAKEPriceInUSD();\n        // return pendingCake * CAKEPriceInUSD / denominator;\n        return 10e18;\n    }\n\n    function getAPR() external view returns (uint) {\n        (uint _lpRewardApr,,) = getLpRewardApr();\n        uint _farmRewardApr = getCakeRewardApr();\n        _farmRewardApr = _farmRewardApr * (DENOMINATOR-yieldFee) / DENOMINATOR;\n        return (_lpRewardApr + _farmRewardApr);\n    }\n\n    function _updateLpRewardApr() private {\n        (uint _lpRewardApr, uint _lpReservePerShare, bool _update) = getLpRewardApr();\n        if (_update) {\n            lpRewardApr = _lpRewardApr;\n            lpReservePerShare = _lpReservePerShare;\n            lpDataLastUpdate = block.timestamp;\n        }\n    }\n\n    function _getLpReservePerShare() private view returns (uint) {\n        uint _totalSupply = lpToken.totalSupply();\n        if (_totalSupply == 0) return 0;\n        (uint reserve0, uint reserve1) = lpToken.getReserves();\n        return Math.sqrt(reserve0 * reserve1) / _totalSupply;\n    }\n\n    function getLpRewardApr() public view returns (uint, uint, bool) {\n        // if (lpRewardApr == 0 || (lpDataLastUpdate+DAY_IN_SEC) <= block.timestamp) {\n        //     uint _lpReservePerShare = _getLpReservePerShare();\n        //     if (0 < lpReservePerShare && lpReservePerShare < _lpReservePerShare) {\n        //         uint _lpRewardApr = (_lpReservePerShare-lpReservePerShare) * YEAR_IN_SEC * 1e18 / (lpReservePerShare * (block.timestamp-lpDataLastUpdate));\n        //         return (_lpRewardApr, _lpReservePerShare, true);\n        //     } else {\n        //         return (0, _lpReservePerShare, true);\n        //     }\n        // } else {\n        //     return (lpRewardApr, lpReservePerShare, false);\n        // }\n        return (0, 0, false);\n    }\n\n    function getCakeRewardApr() public view returns (uint) {\n        // uint yearlyCakeReward = _getYearlyCakeReward();\n        // (uint CAKEPriceInUSD, uint cakeDenominator) = PriceLib.getCAKEPriceInUSD();\n        // uint yearlyRewardInUSD = yearlyCakeReward * CAKEPriceInUSD / cakeDenominator;\n\n        // uint poolInBNB = _getValueInBNB(lpToken.balanceOf(address(MasterChefV2)));\n        // (uint BNBPriceInUSD, uint bnbDenominator) = PriceLib.getBNBPriceInUSD();\n        // uint poolInUSD = poolInBNB * BNBPriceInUSD / bnbDenominator;\n\n        // return yearlyRewardInUSD * 1e18 / poolInUSD;\n        return 7e15;\n    }\n\n    function _getYearlyCakeReward() private view returns (uint) {\n        (,, uint allocPoint, , bool isRegular) = MasterChefV2.poolInfo(pid);\n        uint totalAllocPoint = isRegular ? MasterChefV2.totalRegularAllocPoint() : MasterChefV2.totalSpecialAllocPoint();\n        uint cakePerBlock = MasterChefV2.cakePerBlock(isRegular);\n        return cakePerBlock * BLOCKS_PER_YEAR * allocPoint / totalAllocPoint;\n    }\n\n}\n"
    },
    "contracts/lci/LCIVaultTest.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../libs/BaseRelayRecipient.sol\";\n\ninterface IChainlink {\n    function latestAnswer() external view returns (int256);\n}\n\ninterface IStrategy {\n    function invest(uint amount) external;\n    function withdrawPerc(uint sharePerc) external;\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external returns (uint);\n    function emergencyWithdraw() external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ncontract LCIVaultTest is ERC20Upgradeable, OwnableUpgradeable, \n        ReentrancyGuardUpgradeable, PausableUpgradeable, BaseRelayRecipient {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x1F326a8CA5399418a76eA0efa0403Cbb00790C67);\n\n    IStrategy public strategy;\n    address public treasuryWallet;\n    address public admin;\n\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit, uint shareMinted);\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint shareBurned);\n    event Rebalance(uint farmIndex, uint sharePerc, uint amount);\n    event Reinvest(uint amount);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    event SetBiconomy(address oldBiconomy, address newBiconomy);\n    \n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _biconomy, address _strategy\n    ) external initializer {\n        __ERC20_init(\"Low-risk Crypto Index\", \"LCI\");\n        __Ownable_init();\n\n        strategy = IStrategy(_strategy);\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        trustedForwarder = _biconomy;\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    function deposit(uint amount) external nonReentrant whenNotPaused {\n        require(msg.sender == tx.origin || isTrustedForwarder(msg.sender), \"Only EOA or Biconomy\");\n        require(amount > 0, \"Amount must > 0\");\n\n        uint pool = getAllPoolInUSD();\n\n        address msgSender = _msgSender();\n        USDT.safeTransferFrom(msgSender, address(this), amount);\n\n        strategy.invest(amount);\n\n        uint amtDeposit = amount; // USDT's decimals is 18\n        uint _totalSupply = totalSupply();\n        uint share = (_totalSupply == 0 || pool <= _totalSupply)  ? amtDeposit : amtDeposit * _totalSupply / pool;\n        _mint(msgSender, share);\n\n        emit Deposit(msgSender, amtDeposit, address(USDT), share);\n    }\n\n    function withdraw(uint share) external nonReentrant {\n        require(msg.sender == tx.origin, \"Only EOA\");\n        require(share > 0, \"Shares must > 0\");\n        require(share <= balanceOf(msg.sender), \"Not enough share to withdraw\");\n        \n        uint _totalSupply = totalSupply();\n        uint withdrawAmt = getAllPoolInUSD() * share / _totalSupply;\n\n        if (!paused()) {\n            strategy.withdrawPerc(share * 1e18 / _totalSupply);\n            USDT.safeTransfer(msg.sender, USDT.balanceOf(address(this)));\n        } else {\n            USDT.safeTransfer(msg.sender, withdrawAmt); // USDT's decimals is 18\n        }\n        _burn(msg.sender, share);\n        emit Withdraw(msg.sender, withdrawAmt, address(USDT), share);\n    }\n\n    function rebalance(uint farmIndex, uint sharePerc) external onlyOwnerOrAdmin {\n        uint USDTAmt = strategy.withdrawFromFarm(farmIndex, sharePerc);\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Rebalance(farmIndex, sharePerc, USDTAmt);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n    }\n\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        address oldBiconomy = trustedForwarder;\n        trustedForwarder = _biconomy;\n        emit SetBiconomy(oldBiconomy, _biconomy);\n    }\n\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n    \n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        if (paused()) return USDT.balanceOf(address(this)); // USDT's decimals is 18\n        return strategy.getAllPoolInUSD();\n    }\n\n    /// @notice Can be use for calculate both user shares & APR    \n    function getPricePerFullShare() external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD() * 1e18 / _totalSupply;\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n}\n"
    },
    "libs/BaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity 0.8.9;\n\nimport \"../interfaces/IRelayRecipient.sol\";\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\nabstract contract BaseRelayRecipient is IRelayRecipient {\n\n    /*\n     * Forwarder singleton we accept calls from\n     */\n    address public trustedForwarder;\n\n    /*\n     * require a function to be called through GSN only\n     */\n    modifier trustedForwarderOnly() {\n        require(msg.sender == address(trustedForwarder), \"Function can only be called through the trusted Forwarder\");\n        _;\n    }\n\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\n        return forwarder == trustedForwarder;\n    }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal override virtual view returns (address ret) {\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n}"
    },
    "interfaces/IRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity 0.8.9;\n\n/**\n * a contract must implement this interface in order to support relayed transaction.\n * It is better to inherit the BaseRelayRecipient as its implementation.\n */\nabstract contract IRelayRecipient {\n\n    /**\n     * return if the forwarder is trusted to forward relayed transactions to us.\n     * the forwarder is required to verify the sender's signature, and verify\n     * the call is not a replay.\n     */\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n     * of the msg.data.\n     * otherwise, return `msg.sender`\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal virtual view returns (address);\n\n    function versionRecipient() external virtual view returns (string memory);\n}"
    },
    "contracts/lci/LCIVault.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../libs/BaseRelayRecipient.sol\";\n\ninterface IChainlink {\n    function latestAnswer() external view returns (int256);\n}\n\ninterface IStrategy {\n    function invest(uint amount) external;\n    function withdrawPerc(uint sharePerc) external;\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external returns (uint);\n    function emergencyWithdraw() external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ncontract LCIVault is ERC20Upgradeable, OwnableUpgradeable, \n        ReentrancyGuardUpgradeable, PausableUpgradeable, BaseRelayRecipient {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x55d398326f99059fF775485246999027B3197955);\n\n    IStrategy public strategy;\n    address public treasuryWallet;\n    address public admin;\n\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit, uint shareMinted);\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint shareBurned);\n    event Rebalance(uint farmIndex, uint sharePerc, uint amount);\n    event Reinvest(uint amount);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    event SetBiconomy(address oldBiconomy, address newBiconomy);\n    \n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _biconomy, address _strategy\n    ) external initializer {\n        __ERC20_init(\"Low-risk Crypto Index\", \"LCI\");\n        __Ownable_init();\n\n        strategy = IStrategy(_strategy);\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        trustedForwarder = _biconomy;\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    function deposit(uint amount) external nonReentrant whenNotPaused {\n        require(msg.sender == tx.origin || isTrustedForwarder(msg.sender), \"Only EOA or Biconomy\");\n        require(amount > 0, \"Amount must > 0\");\n\n        uint pool = getAllPoolInUSD();\n\n        address msgSender = _msgSender();\n        USDT.safeTransferFrom(msgSender, address(this), amount);\n\n        strategy.invest(amount);\n\n        uint amtDeposit = amount; // USDT's decimals is 18\n        uint _totalSupply = totalSupply();\n        uint share = (_totalSupply == 0 || pool <= _totalSupply)  ? amtDeposit : amtDeposit * _totalSupply / pool;\n        _mint(msgSender, share);\n\n        emit Deposit(msgSender, amtDeposit, address(USDT), share);\n    }\n\n    function withdraw(uint share) external nonReentrant {\n        require(msg.sender == tx.origin, \"Only EOA\");\n        require(share > 0, \"Shares must > 0\");\n        require(share <= balanceOf(msg.sender), \"Not enough share to withdraw\");\n        \n        uint _totalSupply = totalSupply();\n        uint withdrawAmt = getAllPoolInUSD() * share / _totalSupply;\n\n        if (!paused()) {\n            strategy.withdrawPerc(share * 1e18 / _totalSupply);\n            USDT.safeTransfer(msg.sender, USDT.balanceOf(address(this)));\n        } else {\n            USDT.safeTransfer(msg.sender, withdrawAmt); // USDT's decimals is 18\n        }\n        _burn(msg.sender, share);\n        emit Withdraw(msg.sender, withdrawAmt, address(USDT), share);\n    }\n\n    function rebalance(uint farmIndex, uint sharePerc) external onlyOwnerOrAdmin {\n        uint USDTAmt = strategy.withdrawFromFarm(farmIndex, sharePerc);\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Rebalance(farmIndex, sharePerc, USDTAmt);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n    }\n\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        address oldBiconomy = trustedForwarder;\n        trustedForwarder = _biconomy;\n        emit SetBiconomy(oldBiconomy, _biconomy);\n    }\n\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n    \n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        if (paused()) return USDT.balanceOf(address(this)); // USDT's decimals is 18\n        return strategy.getAllPoolInUSD();\n    }\n\n    /// @notice Can be use for calculate both user shares & APR    \n    function getPricePerFullShare() external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD() * 1e18 / _totalSupply;\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n}\n"
    },
    "contracts/lci/LCIStrategyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ninterface IRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ninterface IL2Vault is IERC20Upgradeable {\n    function deposit(uint amount) external;\n    function withdraw(uint share) external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getAPR() external view returns (uint);\n}\n\ncontract LCIStrategyTest is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x1F326a8CA5399418a76eA0efa0403Cbb00790C67);\n    IERC20Upgradeable public constant USDC = IERC20Upgradeable(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\n    IERC20Upgradeable public constant BUSD = IERC20Upgradeable(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\n    IERC20Upgradeable public constant USDT_MAIN = IERC20Upgradeable(0x55d398326f99059fF775485246999027B3197955);\n    IERC20Upgradeable public constant USDC_MAIN = IERC20Upgradeable(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\n    IERC20Upgradeable public constant BUSD_MAIN = IERC20Upgradeable(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\n\n    IERC20Upgradeable public constant USDTUSDC = IERC20Upgradeable(0xEc6557348085Aa57C72514D67070dC863C0a5A8c);\n    IERC20Upgradeable public constant USDTBUSD = IERC20Upgradeable(0x7EFaEf62fDdCCa950418312c6C91Aef321375A00);\n    IERC20Upgradeable public constant USDCBUSD = IERC20Upgradeable(0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1);\n\n    IRouter public constant PnckRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n\n    IL2Vault public USDTUSDCVault;\n    IL2Vault public USDTBUSDVault;\n    IL2Vault public USDCBUSDVault;\n    \n    uint constant DENOMINATOR = 10000;\n    uint constant USDTUSDCTargetPerc = 6000; // 60%\n    uint constant USDTBUSDTargetPerc = 2000; // 20%\n    uint constant USDCBUSDTargetPerc = 2000; // 20%\n\n    address public vault;\n\n    event TargetComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDTargetPool);\n    event CurrentComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDCurrentPool);\n    event InvestUSDTUSDC(uint USDTAmt, uint USDTUSDCAmt);\n    event InvestUSDTBUSD(uint USDTAmt, uint USDTBUSDAmt);\n    event InvestUSDCBUSD(uint USDTAmt, uint USDCBUSDAmt);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event WithdrawUSDTUSDC(uint lpTokenAmt, uint USDTAmt);\n    event WithdrawUSDTBUSD(uint lpTokenAmt, uint USDTAmt);\n    event WithdrawUSDCBUSD(uint lpTokenAmt, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(IL2Vault _USDTUSDCVault, IL2Vault _USDTBUSDVault, IL2Vault _USDCBUSDVault) external initializer {\n        __Ownable_init();\n\n        USDTUSDCVault = _USDTUSDCVault;\n        USDTBUSDVault = _USDTBUSDVault;\n        USDCBUSDVault = _USDCBUSDVault;\n\n        // USDT.safeApprove(address(PnckRouter), type(uint).max);\n        // USDC.safeApprove(address(PnckRouter), type(uint).max);\n        // BUSD.safeApprove(address(PnckRouter), type(uint).max);\n\n        // USDTUSDC.safeApprove(address(USDTUSDCVault), type(uint).max);\n        // USDTBUSD.safeApprove(address(USDTBUSDVault), type(uint).max);\n        // USDCBUSD.safeApprove(address(USDCBUSDVault), type(uint).max);\n\n        // USDTUSDC.safeApprove(address(PnckRouter), type(uint).max);\n        // USDTBUSD.safeApprove(address(PnckRouter), type(uint).max);\n        // USDCBUSD.safeApprove(address(PnckRouter), type(uint).max);\n    }\n\n    function invest(uint USDTAmt) external onlyVault {\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n        // USDTAmt = USDT.balanceOf(address(this));\n        \n        // uint[] memory pools = getEachPoolInUSD();\n        // uint pool = pools[0] + pools[1] + pools[2] + USDTAmt; // USDT's decimals is 18\n        // uint USDTUSDCTargetPool = pool * USDTUSDCTargetPerc / DENOMINATOR;\n        // uint USDTBUSDTargetPool = pool * USDTBUSDTargetPerc / DENOMINATOR;\n        // uint USDCBUSDTargetPool = pool * USDCBUSDTargetPerc / DENOMINATOR;\n\n        // // Rebalancing invest\n        // if (\n        //     USDTUSDCTargetPool > pools[0] &&\n        //     USDTBUSDTargetPool > pools[1] &&\n        //     USDCBUSDTargetPool > pools[2]\n        // ) {\n        //     _investUSDTUSDC(USDTUSDCTargetPool - pools[0]);\n        //     _investUSDTBUSD(USDTBUSDTargetPool - pools[1]);\n        //     _investUSDCBUSD(USDCBUSDTargetPool - pools[2]);\n        // } else {\n        //     uint furthest;\n        //     uint farmIndex;\n        //     uint diff;\n\n        //     if (USDTUSDCTargetPool > pools[0]) {\n        //         diff = USDTUSDCTargetPool - pools[0];\n        //         furthest = diff;\n        //         farmIndex = 0;\n        //     }\n        //     if (USDTBUSDTargetPool > pools[1]) {\n        //         diff = USDTBUSDTargetPool - pools[1];\n        //         if (diff > furthest) {\n        //             furthest = diff;\n        //             farmIndex = 1;\n        //         }\n        //     }\n        //     if (USDTBUSDTargetPool > pools[2]) {\n        //         diff = USDTBUSDTargetPool - pools[2];\n        //         if (diff > furthest) {\n        //             farmIndex = 2;\n        //         }\n        //     }\n\n        //     if (farmIndex == 0) _investUSDTUSDC(USDTAmt);\n        //     else if (farmIndex == 1) _investUSDTBUSD(USDTAmt);\n        //     else _investUSDCBUSD(USDTAmt);\n        // }\n\n        // emit TargetComposition(USDTUSDCTargetPool, USDTBUSDTargetPool, USDCBUSDTargetPool);\n        // emit CurrentComposition(pools[0], pools[1], pools[2]);\n    }\n\n\n    function _investUSDTUSDC(uint _usdtAmt) private {\n        uint _amt = _usdtAmt/2;\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\n\n        uint _USDCAmt = USDC.balanceOf(address(this));\n        uint lpTokens = _addLiquidity(address(USDT), address(USDC), _amt, _USDCAmt);\n\n        USDTUSDCVault.deposit(lpTokens);\n        emit InvestUSDTUSDC(_usdtAmt, lpTokens);\n    }\n\n    function _investUSDTBUSD(uint _usdtAmt) private {\n        uint _amt = _usdtAmt / 2 ;\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\n\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\n        uint lpTokens = _addLiquidity(address(USDT), address(BUSD), _amt, _BUSDAmt);\n\n        USDTBUSDVault.deposit(lpTokens);\n        emit InvestUSDTBUSD(_usdtAmt, lpTokens);\n    }\n\n    function _investUSDCBUSD(uint _usdtAmt) private {\n        uint _amt = _usdtAmt / 2 ;\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\n\n        uint _USDCAmt = USDC.balanceOf(address(this));\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\n\n        uint lpTokens = _addLiquidity(address(USDC), address(BUSD), _USDCAmt, _BUSDAmt);\n\n        USDCBUSDVault.deposit(lpTokens);\n        emit InvestUSDCBUSD(_usdtAmt, lpTokens);\n    }\n\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        \n        // uint USDTAmtBefore = USDT.balanceOf(address(this));\n        // _withdrawUSDTUSDC(sharePerc);\n        // _withdrawUSDTBUSD(sharePerc);\n        // _withdrawUSDCBUSD(sharePerc);\n        // USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n\n        emit Withdraw(sharePerc, USDTAmt);\n    }\n\n    function _withdrawUSDTUSDC(uint _sharePerc) private {\n        uint amount = USDTUSDCVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTUSDCVault.withdraw(amount);\n\n            uint _amt = USDTUSDC.balanceOf(address(this));\n            (uint _amtUSDT, uint _amtUSDC) = _removeLiquidity(address(USDT), address(USDC), _amt);\n            _amtUSDT += _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\n\n            emit WithdrawUSDTUSDC(_amt, _amtUSDT);\n        }\n    }\n\n    function _withdrawUSDTBUSD(uint _sharePerc) private {\n        uint amount = USDTBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTBUSDVault.withdraw(amount);\n\n            uint _amt = USDTBUSD.balanceOf(address(this));\n            (uint _amtUSDT, uint _amtBUSD) = _removeLiquidity(address(USDT), address(BUSD), _amt);\n            _amtUSDT += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\n\n            emit WithdrawUSDTBUSD(_amt, _amtUSDT);\n        }\n    }\n\n    function _withdrawUSDCBUSD(uint _sharePerc) private {\n        uint amount = USDCBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDCBUSDVault.withdraw(amount);\n\n            uint _amt = USDCBUSD.balanceOf(address(this));\n            (uint _amtUSDC, uint _amtBUSD) = _removeLiquidity(address(USDC), address(BUSD), _amt);\n            uint _usdtAmt = _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\n            _usdtAmt += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\n\n            emit WithdrawUSDCBUSD(_amt, _usdtAmt);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (PnckRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _addLiquidity(address _tokenA, address _tokenB, uint _amtA, uint _amtB) private returns (uint liquidity) {\n        (,,liquidity) = PnckRouter.addLiquidity(_tokenA, _tokenB, _amtA, _amtB, 0, 0, address(this), block.timestamp);\n    }\n\n    function _removeLiquidity(address _tokenA, address _tokenB, uint _amt) private returns (uint _amtA, uint _amtB) {\n        (_amtA, _amtB) = PnckRouter.removeLiquidity(_tokenA, _tokenB, _amt, 0, 0, address(this), block.timestamp);\n    }\n\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        // require(sharePerc <= 1e18, \"Over 100%\");\n        // if (farmIndex == 0) _withdrawUSDTUSDC(sharePerc); \n        // else if (farmIndex == 1) _withdrawUSDTBUSD(sharePerc);\n        // else if (farmIndex == 2) _withdrawUSDCBUSD(sharePerc);\n        // USDTAmt = USDT.balanceOf(address(this));\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        // _withdrawUSDTUSDC(1e18);\n        // _withdrawUSDTBUSD(1e18);\n        // _withdrawUSDCBUSD(1e18);\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function getUSDTUSDCPoolInUSD() private view  returns (uint) {\n        uint amt = USDTUSDCVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTUSDCVault.balanceOf(address(this)) / USDTUSDCVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getUSDTBUSDPoolInUSD() private view returns (uint) {\n        uint amt = USDTBUSDVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTBUSDVault.balanceOf(address(this)) / USDTBUSDVault.totalSupply();\n    }\n\n    function getUSDCBUSDPoolInUSD() private view returns (uint) {\n        uint amt = USDCBUSDVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDCBUSDVault.balanceOf(address(this)) / USDCBUSDVault.totalSupply();\n    }\n\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\n        pools = new uint[](3);\n        // pools[0] = getUSDTUSDCPoolInUSD();\n        // pools[1] = getUSDTBUSDPoolInUSD();\n        // pools[2] = getUSDCBUSDPoolInUSD();\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // uint[] memory pools = getEachPoolInUSD();\n        // return pools[0] + pools[1] + pools[2];\n        return USDT.balanceOf(address(this));\n    }\n\n    function getCurrentLPCompositionPerc() public view returns (uint[] memory percentages) {\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2];\n        percentages = new uint[](3);\n        percentages[0] = allPool == 0 ? USDTUSDCTargetPerc : pools[0] * DENOMINATOR / allPool;\n        percentages[1] = allPool == 0 ? USDTBUSDTargetPerc : pools[1] * DENOMINATOR / allPool;\n        percentages[2] = allPool == 0 ? USDCBUSDTargetPerc : pools[2] * DENOMINATOR / allPool;\n    }\n\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\n        tokens = new address[](3);\n        tokens[0] = address(USDT_MAIN);\n        tokens[1] = address(USDC_MAIN);\n        tokens[2] = address(BUSD_MAIN);\n        percentages = new uint[](3);\n        percentages[0] = (lpPerc[0] + lpPerc[1]) / 2;\n        percentages[1] = (lpPerc[0] + lpPerc[2]) / 2;\n        percentages[2] = (lpPerc[1] + lpPerc[2]) / 2;\n    }\n\n    function getAPR() external view returns (uint) {\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\n        uint allApr = USDTUSDCVault.getAPR() * lpPerc[0]\n                    + USDTBUSDVault.getAPR() * lpPerc[1]\n                    + USDCBUSDVault.getAPR() * lpPerc[2];\n        return (allApr / DENOMINATOR);\n    }\n\n}\n"
    },
    "contracts/lci/LCIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ninterface IRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ninterface IL2Vault is IERC20Upgradeable {\n    function deposit(uint amount) external;\n    function withdraw(uint share) external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getAPR() external view returns (uint);\n}\n\ncontract LCIStrategy is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x55d398326f99059fF775485246999027B3197955);\n    IERC20Upgradeable public constant USDC = IERC20Upgradeable(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\n    IERC20Upgradeable public constant BUSD = IERC20Upgradeable(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\n\n    IERC20Upgradeable public constant USDTUSDC = IERC20Upgradeable(0xEc6557348085Aa57C72514D67070dC863C0a5A8c);\n    IERC20Upgradeable public constant USDTBUSD = IERC20Upgradeable(0x7EFaEf62fDdCCa950418312c6C91Aef321375A00);\n    IERC20Upgradeable public constant USDCBUSD = IERC20Upgradeable(0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1);\n\n    IRouter public constant PnckRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n\n    IL2Vault public USDTUSDCVault;\n    IL2Vault public USDTBUSDVault;\n    IL2Vault public USDCBUSDVault;\n    \n    uint constant DENOMINATOR = 10000;\n    uint constant USDTUSDCTargetPerc = 6000; // 60%\n    uint constant USDTBUSDTargetPerc = 2000; // 20%\n    uint constant USDCBUSDTargetPerc = 2000; // 20%\n\n    address public vault;\n\n    event TargetComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDTargetPool);\n    event CurrentComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDCurrentPool);\n    event InvestUSDTUSDC(uint USDTAmt, uint USDTUSDCAmt);\n    event InvestUSDTBUSD(uint USDTAmt, uint USDTBUSDAmt);\n    event InvestUSDCBUSD(uint USDTAmt, uint USDCBUSDAmt);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event WithdrawUSDTUSDC(uint lpTokenAmt, uint USDTAmt);\n    event WithdrawUSDTBUSD(uint lpTokenAmt, uint USDTAmt);\n    event WithdrawUSDCBUSD(uint lpTokenAmt, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(IL2Vault _USDTUSDCVault, IL2Vault _USDTBUSDVault, IL2Vault _USDCBUSDVault) external initializer {\n        __Ownable_init();\n\n        USDTUSDCVault = _USDTUSDCVault;\n        USDTBUSDVault = _USDTBUSDVault;\n        USDCBUSDVault = _USDCBUSDVault;\n\n        USDT.safeApprove(address(PnckRouter), type(uint).max);\n        USDC.safeApprove(address(PnckRouter), type(uint).max);\n        BUSD.safeApprove(address(PnckRouter), type(uint).max);\n\n        USDTUSDC.safeApprove(address(USDTUSDCVault), type(uint).max);\n        USDTBUSD.safeApprove(address(USDTBUSDVault), type(uint).max);\n        USDCBUSD.safeApprove(address(USDCBUSDVault), type(uint).max);\n\n        USDTUSDC.safeApprove(address(PnckRouter), type(uint).max);\n        USDTBUSD.safeApprove(address(PnckRouter), type(uint).max);\n        USDCBUSD.safeApprove(address(PnckRouter), type(uint).max);\n    }\n\n    function invest(uint USDTAmt) external onlyVault {\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n        USDTAmt = USDT.balanceOf(address(this));\n        \n        uint[] memory pools = getEachPoolInUSD();\n        uint pool = pools[0] + pools[1] + pools[2] + USDTAmt; // USDT's decimals is 18\n        uint USDTUSDCTargetPool = pool * USDTUSDCTargetPerc / DENOMINATOR;\n        uint USDTBUSDTargetPool = pool * USDTBUSDTargetPerc / DENOMINATOR;\n        uint USDCBUSDTargetPool = pool * USDCBUSDTargetPerc / DENOMINATOR;\n\n        // Rebalancing invest\n        if (\n            USDTUSDCTargetPool > pools[0] &&\n            USDTBUSDTargetPool > pools[1] &&\n            USDCBUSDTargetPool > pools[2]\n        ) {\n            _investUSDTUSDC(USDTUSDCTargetPool - pools[0]);\n            _investUSDTBUSD(USDTBUSDTargetPool - pools[1]);\n            _investUSDCBUSD(USDCBUSDTargetPool - pools[2]);\n        } else {\n            uint furthest;\n            uint farmIndex;\n            uint diff;\n\n            if (USDTUSDCTargetPool > pools[0]) {\n                diff = USDTUSDCTargetPool - pools[0];\n                furthest = diff;\n                farmIndex = 0;\n            }\n            if (USDTBUSDTargetPool > pools[1]) {\n                diff = USDTBUSDTargetPool - pools[1];\n                if (diff > furthest) {\n                    furthest = diff;\n                    farmIndex = 1;\n                }\n            }\n            if (USDTBUSDTargetPool > pools[2]) {\n                diff = USDTBUSDTargetPool - pools[2];\n                if (diff > furthest) {\n                    farmIndex = 2;\n                }\n            }\n\n            if (farmIndex == 0) _investUSDTUSDC(USDTAmt);\n            else if (farmIndex == 1) _investUSDTBUSD(USDTAmt);\n            else _investUSDCBUSD(USDTAmt);\n        }\n\n        emit TargetComposition(USDTUSDCTargetPool, USDTBUSDTargetPool, USDCBUSDTargetPool);\n        emit CurrentComposition(pools[0], pools[1], pools[2]);\n    }\n\n\n    function _investUSDTUSDC(uint _usdtAmt) private {\n        uint _amt = _usdtAmt/2;\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\n\n        uint _USDCAmt = USDC.balanceOf(address(this));\n        uint lpTokens = _addLiquidity(address(USDT), address(USDC), _amt, _USDCAmt);\n\n        USDTUSDCVault.deposit(lpTokens);\n        emit InvestUSDTUSDC(_usdtAmt, lpTokens);\n    }\n\n    function _investUSDTBUSD(uint _usdtAmt) private {\n        uint _amt = _usdtAmt / 2 ;\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\n\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\n        uint lpTokens = _addLiquidity(address(USDT), address(BUSD), _amt, _BUSDAmt);\n\n        USDTBUSDVault.deposit(lpTokens);\n        emit InvestUSDTBUSD(_usdtAmt, lpTokens);\n    }\n\n    function _investUSDCBUSD(uint _usdtAmt) private {\n        uint _amt = _usdtAmt / 2 ;\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\n\n        uint _USDCAmt = USDC.balanceOf(address(this));\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\n\n        uint lpTokens = _addLiquidity(address(USDC), address(BUSD), _USDCAmt, _BUSDAmt);\n\n        USDCBUSDVault.deposit(lpTokens);\n        emit InvestUSDCBUSD(_usdtAmt, lpTokens);\n    }\n\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        \n        uint USDTAmtBefore = USDT.balanceOf(address(this));\n        _withdrawUSDTUSDC(sharePerc);\n        _withdrawUSDTBUSD(sharePerc);\n        _withdrawUSDCBUSD(sharePerc);\n        USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\n        USDT.safeTransfer(vault, USDTAmt);\n\n        emit Withdraw(sharePerc, USDTAmt);\n    }\n\n    function _withdrawUSDTUSDC(uint _sharePerc) private {\n        uint amount = USDTUSDCVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTUSDCVault.withdraw(amount);\n\n            uint _amt = USDTUSDC.balanceOf(address(this));\n            (uint _amtUSDT, uint _amtUSDC) = _removeLiquidity(address(USDT), address(USDC), _amt);\n            _amtUSDT += _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\n\n            emit WithdrawUSDTUSDC(_amt, _amtUSDT);\n        }\n    }\n\n    function _withdrawUSDTBUSD(uint _sharePerc) private {\n        uint amount = USDTBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTBUSDVault.withdraw(amount);\n\n            uint _amt = USDTBUSD.balanceOf(address(this));\n            (uint _amtUSDT, uint _amtBUSD) = _removeLiquidity(address(USDT), address(BUSD), _amt);\n            _amtUSDT += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\n\n            emit WithdrawUSDTBUSD(_amt, _amtUSDT);\n        }\n    }\n\n    function _withdrawUSDCBUSD(uint _sharePerc) private {\n        uint amount = USDCBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDCBUSDVault.withdraw(amount);\n\n            uint _amt = USDCBUSD.balanceOf(address(this));\n            (uint _amtUSDC, uint _amtBUSD) = _removeLiquidity(address(USDC), address(BUSD), _amt);\n            uint _usdtAmt = _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\n            _usdtAmt += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\n\n            emit WithdrawUSDCBUSD(_amt, _usdtAmt);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (PnckRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _addLiquidity(address _tokenA, address _tokenB, uint _amtA, uint _amtB) private returns (uint liquidity) {\n        (,,liquidity) = PnckRouter.addLiquidity(_tokenA, _tokenB, _amtA, _amtB, 0, 0, address(this), block.timestamp);\n    }\n\n    function _removeLiquidity(address _tokenA, address _tokenB, uint _amt) private returns (uint _amtA, uint _amtB) {\n        (_amtA, _amtB) = PnckRouter.removeLiquidity(_tokenA, _tokenB, _amt, 0, 0, address(this), block.timestamp);\n    }\n\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        if (farmIndex == 0) _withdrawUSDTUSDC(sharePerc); \n        else if (farmIndex == 1) _withdrawUSDTBUSD(sharePerc);\n        else if (farmIndex == 2) _withdrawUSDCBUSD(sharePerc);\n        USDTAmt = USDT.balanceOf(address(this));\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        _withdrawUSDTUSDC(1e18);\n        _withdrawUSDTBUSD(1e18);\n        _withdrawUSDCBUSD(1e18);\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function getUSDTUSDCPoolInUSD() private view  returns (uint) {\n        uint amt = USDTUSDCVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTUSDCVault.balanceOf(address(this)) / USDTUSDCVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getUSDTBUSDPoolInUSD() private view returns (uint) {\n        uint amt = USDTBUSDVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTBUSDVault.balanceOf(address(this)) / USDTBUSDVault.totalSupply();\n    }\n\n    function getUSDCBUSDPoolInUSD() private view returns (uint) {\n        uint amt = USDCBUSDVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDCBUSDVault.balanceOf(address(this)) / USDCBUSDVault.totalSupply();\n    }\n\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\n        pools = new uint[](3);\n        pools[0] = getUSDTUSDCPoolInUSD();\n        pools[1] = getUSDTBUSDPoolInUSD();\n        pools[2] = getUSDCBUSDPoolInUSD();\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint[] memory pools = getEachPoolInUSD();\n        return pools[0] + pools[1] + pools[2];\n    }\n\n    function getCurrentLPCompositionPerc() public view returns (uint[] memory percentages) {\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2];\n        percentages = new uint[](3);\n        percentages[0] = allPool == 0 ? USDTUSDCTargetPerc : pools[0] * DENOMINATOR / allPool;\n        percentages[1] = allPool == 0 ? USDTBUSDTargetPerc : pools[1] * DENOMINATOR / allPool;\n        percentages[2] = allPool == 0 ? USDCBUSDTargetPerc : pools[2] * DENOMINATOR / allPool;\n    }\n\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\n        tokens = new address[](3);\n        tokens[0] = address(USDT);\n        tokens[1] = address(USDC);\n        tokens[2] = address(BUSD);\n        percentages = new uint[](3);\n        percentages[0] = (lpPerc[0] + lpPerc[1]) / 2;\n        percentages[1] = (lpPerc[0] + lpPerc[2]) / 2;\n        percentages[2] = (lpPerc[1] + lpPerc[2]) / 2;\n    }\n\n    function getAPR() external view returns (uint) {\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\n        uint allApr = USDTUSDCVault.getAPR() * lpPerc[0]\n                    + USDTBUSDVault.getAPR() * lpPerc[1]\n                    + USDCBUSDVault.getAPR() * lpPerc[2];\n        return (allApr / DENOMINATOR);\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}