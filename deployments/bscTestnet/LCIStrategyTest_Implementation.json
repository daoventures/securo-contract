{
  "address": "0xc7c76e5e35d00B27aeA363Ef7087aF71B511b59b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTUSDCTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTBUSDTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDCBUSDCurrentPool",
          "type": "uint256"
        }
      ],
      "name": "CurrentComposition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDCBUSDAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestUSDCBUSD",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTBUSDAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestUSDTBUSD",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTUSDCAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestUSDTUSDC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTUSDCTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTBUSDTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDCBUSDTargetPool",
          "type": "uint256"
        }
      ],
      "name": "TargetComposition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawUSDCBUSD",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawUSDTBUSD",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawUSDTUSDC",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BUSD",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BUSD_MAIN",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PnckRouter",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDCBUSD",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDCBUSDVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC_MAIN",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTBUSD",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTBUSDVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTUSDC",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTUSDCVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_MAIN",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentLPCompositionPerc",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTokenCompositionPerc",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "_USDTUSDCVault",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_USDTBUSDVault",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_USDCBUSDVault",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "farmIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromFarm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5db80d5e14fe24af5a747890a8dbc6ee5126cb23a9635b30a8665276008a91d5",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0xc7c76e5e35d00B27aeA363Ef7087aF71B511b59b",
    "transactionIndex": 3,
    "gasUsed": "1429237",
    "logsBloom": "0x
    "blockHash": "0x41c0fab71e3aaa6ab04dfa983f9ce4b874c0ab05ec2bd3204f321a693a6deedc",
    "transactionHash": "0x5db80d5e14fe24af5a747890a8dbc6ee5126cb23a9635b30a8665276008a91d5",
    "logs": [],
    "blockNumber": 20070260,
    "cumulativeGasUsed": "1578892",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "faf2c66d38e5da5681c542e813bc043f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTUSDCTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTBUSDTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDCBUSDCurrentPool\",\"type\":\"uint256\"}],\"name\":\"CurrentComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDCBUSDAmt\",\"type\":\"uint256\"}],\"name\":\"InvestUSDCBUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTBUSDAmt\",\"type\":\"uint256\"}],\"name\":\"InvestUSDTBUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTUSDCAmt\",\"type\":\"uint256\"}],\"name\":\"InvestUSDTUSDC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTUSDCTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTBUSDTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDCBUSDTargetPool\",\"type\":\"uint256\"}],\"name\":\"TargetComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawUSDCBUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawUSDTBUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawUSDTUSDC\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSD_MAIN\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PnckRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCBUSD\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCBUSDVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_MAIN\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTBUSD\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTBUSDVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTUSDC\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTUSDCVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_MAIN\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLPCompositionPerc\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenCompositionPerc\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"_USDTUSDCVault\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_USDTBUSDVault\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_USDCBUSDVault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"farmIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawFromFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lci/LCIStrategyTest.sol\":\"LCIStrategyTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/lci/LCIStrategyTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ninterface IRouter {\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IL2Vault is IERC20Upgradeable {\\n    function deposit(uint amount) external;\\n    function withdraw(uint share) external;\\n    function getAllPoolInUSD() external view returns (uint);\\n    function getAPR() external view returns (uint);\\n}\\n\\ncontract LCIStrategyTest is OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x1F326a8CA5399418a76eA0efa0403Cbb00790C67);\\n    IERC20Upgradeable public constant USDC = IERC20Upgradeable(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\\n    IERC20Upgradeable public constant BUSD = IERC20Upgradeable(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\n    IERC20Upgradeable public constant USDT_MAIN = IERC20Upgradeable(0x55d398326f99059fF775485246999027B3197955);\\n    IERC20Upgradeable public constant USDC_MAIN = IERC20Upgradeable(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\\n    IERC20Upgradeable public constant BUSD_MAIN = IERC20Upgradeable(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\n\\n    IERC20Upgradeable public constant USDTUSDC = IERC20Upgradeable(0xEc6557348085Aa57C72514D67070dC863C0a5A8c);\\n    IERC20Upgradeable public constant USDTBUSD = IERC20Upgradeable(0x7EFaEf62fDdCCa950418312c6C91Aef321375A00);\\n    IERC20Upgradeable public constant USDCBUSD = IERC20Upgradeable(0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1);\\n\\n    IRouter public constant PnckRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n\\n    IL2Vault public USDTUSDCVault;\\n    IL2Vault public USDTBUSDVault;\\n    IL2Vault public USDCBUSDVault;\\n    \\n    uint constant DENOMINATOR = 10000;\\n    uint constant USDTUSDCTargetPerc = 6000; // 60%\\n    uint constant USDTBUSDTargetPerc = 2000; // 20%\\n    uint constant USDCBUSDTargetPerc = 2000; // 20%\\n\\n    address public vault;\\n\\n    event TargetComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDTargetPool);\\n    event CurrentComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDCurrentPool);\\n    event InvestUSDTUSDC(uint USDTAmt, uint USDTUSDCAmt);\\n    event InvestUSDTBUSD(uint USDTAmt, uint USDTBUSDAmt);\\n    event InvestUSDCBUSD(uint USDTAmt, uint USDCBUSDAmt);\\n    event Withdraw(uint sharePerc, uint USDTAmt);\\n    event WithdrawUSDTUSDC(uint lpTokenAmt, uint USDTAmt);\\n    event WithdrawUSDTBUSD(uint lpTokenAmt, uint USDTAmt);\\n    event WithdrawUSDCBUSD(uint lpTokenAmt, uint USDTAmt);\\n    event EmergencyWithdraw(uint USDTAmt);\\n\\n    modifier onlyVault {\\n        require(msg.sender == vault, \\\"Only vault\\\");\\n        _;\\n    }\\n\\n    function initialize(IL2Vault _USDTUSDCVault, IL2Vault _USDTBUSDVault, IL2Vault _USDCBUSDVault) external initializer {\\n        __Ownable_init();\\n\\n        USDTUSDCVault = _USDTUSDCVault;\\n        USDTBUSDVault = _USDTBUSDVault;\\n        USDCBUSDVault = _USDCBUSDVault;\\n\\n        // USDT.safeApprove(address(PnckRouter), type(uint).max);\\n        // USDC.safeApprove(address(PnckRouter), type(uint).max);\\n        // BUSD.safeApprove(address(PnckRouter), type(uint).max);\\n\\n        // USDTUSDC.safeApprove(address(USDTUSDCVault), type(uint).max);\\n        // USDTBUSD.safeApprove(address(USDTBUSDVault), type(uint).max);\\n        // USDCBUSD.safeApprove(address(USDCBUSDVault), type(uint).max);\\n\\n        // USDTUSDC.safeApprove(address(PnckRouter), type(uint).max);\\n        // USDTBUSD.safeApprove(address(PnckRouter), type(uint).max);\\n        // USDCBUSD.safeApprove(address(PnckRouter), type(uint).max);\\n    }\\n\\n    function invest(uint USDTAmt) external onlyVault {\\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\\n        // USDTAmt = USDT.balanceOf(address(this));\\n        \\n        // uint[] memory pools = getEachPoolInUSD();\\n        // uint pool = pools[0] + pools[1] + pools[2] + USDTAmt; // USDT's decimals is 18\\n        // uint USDTUSDCTargetPool = pool * USDTUSDCTargetPerc / DENOMINATOR;\\n        // uint USDTBUSDTargetPool = pool * USDTBUSDTargetPerc / DENOMINATOR;\\n        // uint USDCBUSDTargetPool = pool * USDCBUSDTargetPerc / DENOMINATOR;\\n\\n        // // Rebalancing invest\\n        // if (\\n        //     USDTUSDCTargetPool > pools[0] &&\\n        //     USDTBUSDTargetPool > pools[1] &&\\n        //     USDCBUSDTargetPool > pools[2]\\n        // ) {\\n        //     _investUSDTUSDC(USDTUSDCTargetPool - pools[0]);\\n        //     _investUSDTBUSD(USDTBUSDTargetPool - pools[1]);\\n        //     _investUSDCBUSD(USDCBUSDTargetPool - pools[2]);\\n        // } else {\\n        //     uint furthest;\\n        //     uint farmIndex;\\n        //     uint diff;\\n\\n        //     if (USDTUSDCTargetPool > pools[0]) {\\n        //         diff = USDTUSDCTargetPool - pools[0];\\n        //         furthest = diff;\\n        //         farmIndex = 0;\\n        //     }\\n        //     if (USDTBUSDTargetPool > pools[1]) {\\n        //         diff = USDTBUSDTargetPool - pools[1];\\n        //         if (diff > furthest) {\\n        //             furthest = diff;\\n        //             farmIndex = 1;\\n        //         }\\n        //     }\\n        //     if (USDTBUSDTargetPool > pools[2]) {\\n        //         diff = USDTBUSDTargetPool - pools[2];\\n        //         if (diff > furthest) {\\n        //             farmIndex = 2;\\n        //         }\\n        //     }\\n\\n        //     if (farmIndex == 0) _investUSDTUSDC(USDTAmt);\\n        //     else if (farmIndex == 1) _investUSDTBUSD(USDTAmt);\\n        //     else _investUSDCBUSD(USDTAmt);\\n        // }\\n\\n        // emit TargetComposition(USDTUSDCTargetPool, USDTBUSDTargetPool, USDCBUSDTargetPool);\\n        // emit CurrentComposition(pools[0], pools[1], pools[2]);\\n    }\\n\\n\\n    function _investUSDTUSDC(uint _usdtAmt) private {\\n        uint _amt = _usdtAmt/2;\\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\\n\\n        uint _USDCAmt = USDC.balanceOf(address(this));\\n        uint lpTokens = _addLiquidity(address(USDT), address(USDC), _amt, _USDCAmt);\\n\\n        USDTUSDCVault.deposit(lpTokens);\\n        emit InvestUSDTUSDC(_usdtAmt, lpTokens);\\n    }\\n\\n    function _investUSDTBUSD(uint _usdtAmt) private {\\n        uint _amt = _usdtAmt / 2 ;\\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\\n\\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\\n        uint lpTokens = _addLiquidity(address(USDT), address(BUSD), _amt, _BUSDAmt);\\n\\n        USDTBUSDVault.deposit(lpTokens);\\n        emit InvestUSDTBUSD(_usdtAmt, lpTokens);\\n    }\\n\\n    function _investUSDCBUSD(uint _usdtAmt) private {\\n        uint _amt = _usdtAmt / 2 ;\\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\\n\\n        uint _USDCAmt = USDC.balanceOf(address(this));\\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\\n\\n        uint lpTokens = _addLiquidity(address(USDC), address(BUSD), _USDCAmt, _BUSDAmt);\\n\\n        USDCBUSDVault.deposit(lpTokens);\\n        emit InvestUSDCBUSD(_usdtAmt, lpTokens);\\n    }\\n\\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\\n        require(sharePerc <= 1e18, \\\"Over 100%\\\");\\n        \\n        // uint USDTAmtBefore = USDT.balanceOf(address(this));\\n        // _withdrawUSDTUSDC(sharePerc);\\n        // _withdrawUSDTBUSD(sharePerc);\\n        // _withdrawUSDCBUSD(sharePerc);\\n        // USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\\n        USDT.safeTransfer(vault, USDTAmt);\\n\\n        emit Withdraw(sharePerc, USDTAmt);\\n    }\\n\\n    function _withdrawUSDTUSDC(uint _sharePerc) private {\\n        uint amount = USDTUSDCVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            USDTUSDCVault.withdraw(amount);\\n\\n            uint _amt = USDTUSDC.balanceOf(address(this));\\n            (uint _amtUSDT, uint _amtUSDC) = _removeLiquidity(address(USDT), address(USDC), _amt);\\n            _amtUSDT += _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\\n\\n            emit WithdrawUSDTUSDC(_amt, _amtUSDT);\\n        }\\n    }\\n\\n    function _withdrawUSDTBUSD(uint _sharePerc) private {\\n        uint amount = USDTBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            USDTBUSDVault.withdraw(amount);\\n\\n            uint _amt = USDTBUSD.balanceOf(address(this));\\n            (uint _amtUSDT, uint _amtBUSD) = _removeLiquidity(address(USDT), address(BUSD), _amt);\\n            _amtUSDT += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\\n\\n            emit WithdrawUSDTBUSD(_amt, _amtUSDT);\\n        }\\n    }\\n\\n    function _withdrawUSDCBUSD(uint _sharePerc) private {\\n        uint amount = USDCBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            USDCBUSDVault.withdraw(amount);\\n\\n            uint _amt = USDCBUSD.balanceOf(address(this));\\n            (uint _amtUSDC, uint _amtBUSD) = _removeLiquidity(address(USDC), address(BUSD), _amt);\\n            uint _usdtAmt = _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\\n            _usdtAmt += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\\n\\n            emit WithdrawUSDCBUSD(_amt, _usdtAmt);\\n        }\\n    }\\n\\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = _tokenB;\\n        return (PnckRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\\n    }\\n\\n    function _addLiquidity(address _tokenA, address _tokenB, uint _amtA, uint _amtB) private returns (uint liquidity) {\\n        (,,liquidity) = PnckRouter.addLiquidity(_tokenA, _tokenB, _amtA, _amtB, 0, 0, address(this), block.timestamp);\\n    }\\n\\n    function _removeLiquidity(address _tokenA, address _tokenB, uint _amt) private returns (uint _amtA, uint _amtB) {\\n        (_amtA, _amtB) = PnckRouter.removeLiquidity(_tokenA, _tokenB, _amt, 0, 0, address(this), block.timestamp);\\n    }\\n\\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\\n        // require(sharePerc <= 1e18, \\\"Over 100%\\\");\\n        // if (farmIndex == 0) _withdrawUSDTUSDC(sharePerc); \\n        // else if (farmIndex == 1) _withdrawUSDTBUSD(sharePerc);\\n        // else if (farmIndex == 2) _withdrawUSDCBUSD(sharePerc);\\n        // USDTAmt = USDT.balanceOf(address(this));\\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\\n        USDT.safeTransfer(vault, USDTAmt);\\n    }\\n\\n    function setVault(address _vault) external onlyOwner {\\n        require(vault == address(0), \\\"Vault set\\\");\\n        vault = _vault;\\n    }\\n\\n    function emergencyWithdraw() external onlyVault {\\n        // 1e18 == 100% of share\\n        // _withdrawUSDTUSDC(1e18);\\n        // _withdrawUSDTBUSD(1e18);\\n        // _withdrawUSDCBUSD(1e18);\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if (0 < USDTAmt) {\\n            USDT.safeTransfer(vault, USDTAmt);\\n        }\\n        emit EmergencyWithdraw(USDTAmt);\\n    }\\n\\n    function getUSDTUSDCPoolInUSD() private view  returns (uint) {\\n        uint amt = USDTUSDCVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * USDTUSDCVault.balanceOf(address(this)) / USDTUSDCVault.totalSupply(); //to exclude L1 deposits from other addresses\\n    }\\n\\n    function getUSDTBUSDPoolInUSD() private view returns (uint) {\\n        uint amt = USDTBUSDVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * USDTBUSDVault.balanceOf(address(this)) / USDTBUSDVault.totalSupply();\\n    }\\n\\n    function getUSDCBUSDPoolInUSD() private view returns (uint) {\\n        uint amt = USDCBUSDVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * USDCBUSDVault.balanceOf(address(this)) / USDCBUSDVault.totalSupply();\\n    }\\n\\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\\n        pools = new uint[](3);\\n        // pools[0] = getUSDTUSDCPoolInUSD();\\n        // pools[1] = getUSDTBUSDPoolInUSD();\\n        // pools[2] = getUSDCBUSDPoolInUSD();\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint) {\\n        // uint[] memory pools = getEachPoolInUSD();\\n        // return pools[0] + pools[1] + pools[2];\\n        return USDT.balanceOf(address(this));\\n    }\\n\\n    function getCurrentLPCompositionPerc() public view returns (uint[] memory percentages) {\\n        uint[] memory pools = getEachPoolInUSD();\\n        uint allPool = pools[0] + pools[1] + pools[2];\\n        percentages = new uint[](3);\\n        percentages[0] = allPool == 0 ? USDTUSDCTargetPerc : pools[0] * DENOMINATOR / allPool;\\n        percentages[1] = allPool == 0 ? USDTBUSDTargetPerc : pools[1] * DENOMINATOR / allPool;\\n        percentages[2] = allPool == 0 ? USDCBUSDTargetPerc : pools[2] * DENOMINATOR / allPool;\\n    }\\n\\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\\n        tokens = new address[](3);\\n        tokens[0] = address(USDT_MAIN);\\n        tokens[1] = address(USDC_MAIN);\\n        tokens[2] = address(BUSD_MAIN);\\n        percentages = new uint[](3);\\n        percentages[0] = (lpPerc[0] + lpPerc[1]) / 2;\\n        percentages[1] = (lpPerc[0] + lpPerc[2]) / 2;\\n        percentages[2] = (lpPerc[1] + lpPerc[2]) / 2;\\n    }\\n\\n    function getAPR() external view returns (uint) {\\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\\n        uint allApr = USDTUSDCVault.getAPR() * lpPerc[0]\\n                    + USDTBUSDVault.getAPR() * lpPerc[1]\\n                    + USDCBUSDVault.getAPR() * lpPerc[2];\\n        return (allApr / DENOMINATOR);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc36ddfed16a99fe0de33e694ac19b8c5fa8e03a82184f4e32ac5a087e42b6344\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506118e3806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806384fed5f5116100f9578063c89d5b8b11610097578063ed47d90911610071578063ed47d9091461037f578063f177eb9914610392578063f2fde38b146103a7578063fbfa77cf146103ba57600080fd5b8063c89d5b8b1461035c578063db2e21bc14610364578063e1ee05af1461036c57600080fd5b8063993f64f3116100d3578063993f64f31461030b578063bd244af414610326578063c0c53b8b1461032e578063c54e44eb1461034157600080fd5b806384fed5f5146102e757806389a30271146102cc5780638da5cb5b146102fa57600080fd5b80634631b246116101665780636817031b116101405780636817031b146102905780636e21950f146102a3578063715018a6146102c457806382d0f273146102cc57600080fd5b80634631b24614610267578063484f4ea9146102015780635846dc2b1461027d57600080fd5b806302910e3b146101ae57806312166f1e146101e65780632839eec7146102015780632afcf4801461021c5780633779b8db146102315780633e8f12a41461024c575b600080fd5b6101c97310ed43c718714eb63d5aa57b78b54704e256024e81565b6040516001600160a01b0390911681526020015b60405180910390f35b6101c97355d398326f99059ff775485246999027b319795581565b6101c973e9e7cea3dedca5984780bafc599bd69add087d5681565b61022f61022a36600461151a565b6103cd565b005b6101c9737efaef62fddcca950418312c6c91aef321375a0081565b6101c9732354ef4df11afacb85a5c7f98b624072eccddbb181565b61026f610430565b6040516101dd92919061156e565b6066546101c9906001600160a01b031681565b61022f61029e3660046115e3565b610695565b6102b66102b1366004611600565b610726565b6040519081526020016101dd565b61022f61082a565b6101c9738ac76a51cc950d9822d68b83fe1ad97b32cd580d81565b6067546101c9906001600160a01b031681565b6033546001600160a01b03166101c9565b6101c973ec6557348085aa57c72514d67070dc863c0a5a8c81565b6102b6610860565b61022f61033c366004611622565b6108ea565b6101c9731f326a8ca5399418a76ea0efa0403cbb00790c6781565b6102b661099f565b61022f610bd8565b6065546101c9906001600160a01b031681565b6102b661038d36600461151a565b610cf1565b61039a610e71565b6040516101dd919061166d565b61022f6103b53660046115e3565b61102f565b6068546101c9906001600160a01b031681565b6068546001600160a01b031633146104005760405162461bcd60e51b81526004016103f790611680565b60405180910390fd5b60685461042d90731f326a8ca5399418a76ea0efa0403cbb00790c67906001600160a01b031630846110c7565b50565b606080600061043d610e71565b60408051600380825260808201909252919250602082016060803683370190505092507355d398326f99059ff775485246999027b319795583600081518110610488576104886116a4565b60200260200101906001600160a01b031690816001600160a01b031681525050738ac76a51cc950d9822d68b83fe1ad97b32cd580d836001815181106104d0576104d06116a4565b60200260200101906001600160a01b031690816001600160a01b03168152505073e9e7cea3dedca5984780bafc599bd69add087d5683600281518110610518576105186116a4565b6001600160a01b039290921660209283029190910182015260408051600380825260808201909252918201606080368337019050509150600281600181518110610564576105646116a4565b60200260200101518260008151811061057f5761057f6116a4565b602002602001015161059191906116d0565b61059b91906116e8565b826000815181106105ae576105ae6116a4565b6020026020010181815250506002816002815181106105cf576105cf6116a4565b6020026020010151826000815181106105ea576105ea6116a4565b60200260200101516105fc91906116d0565b61060691906116e8565b82600181518110610619576106196116a4565b60200260200101818152505060028160028151811061063a5761063a6116a4565b602002602001015182600181518110610655576106556116a4565b602002602001015161066791906116d0565b61067191906116e8565b82600281518110610684576106846116a4565b602002602001018181525050509091565b6033546001600160a01b031633146106bf5760405162461bcd60e51b81526004016103f79061170a565b6068546001600160a01b0316156107045760405162461bcd60e51b815260206004820152600960248201526815985d5b1d081cd95d60ba1b60448201526064016103f7565b606880546001600160a01b0319166001600160a01b0392909216919091179055565b6068546000906001600160a01b031633146107535760405162461bcd60e51b81526004016103f790611680565b6040516370a0823160e01b8152306004820152670de0b6b3a7640000908390731f326a8ca5399418a76ea0efa0403cbb00790c67906370a082319060240160206040518083038186803b1580156107a957600080fd5b505afa1580156107bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e1919061173f565b6107eb9190611758565b6107f591906116e8565b60685490915061082490731f326a8ca5399418a76ea0efa0403cbb00790c67906001600160a01b031683611132565b92915050565b6033546001600160a01b031633146108545760405162461bcd60e51b81526004016103f79061170a565b61085e6000611167565b565b6040516370a0823160e01b8152306004820152600090731f326a8ca5399418a76ea0efa0403cbb00790c67906370a082319060240160206040518083038186803b1580156108ad57600080fd5b505afa1580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e5919061173f565b905090565b60006108f660016111b9565b9050801561090e576000805461ff0019166101001790555b610916611241565b606580546001600160a01b038087166001600160a01b0319928316179092556066805486841690831617905560678054928516929091169190911790558015610999576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000806109aa610e71565b90506000816002815181106109c1576109c16116a4565b6020026020010151606760009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1757600080fd5b505afa158015610a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f919061173f565b610a599190611758565b82600181518110610a6c57610a6c6116a4565b6020026020010151606660009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac257600080fd5b505afa158015610ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afa919061173f565b610b049190611758565b83600081518110610b1757610b176116a4565b6020026020010151606560009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b6d57600080fd5b505afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba5919061173f565b610baf9190611758565b610bb991906116d0565b610bc391906116d0565b9050610bd1612710826116e8565b9250505090565b6068546001600160a01b03163314610c025760405162461bcd60e51b81526004016103f790611680565b6040516370a0823160e01b8152306004820152600090731f326a8ca5399418a76ea0efa0403cbb00790c67906370a082319060240160206040518083038186803b158015610c4f57600080fd5b505afa158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c87919061173f565b90508015610cbb57606854610cbb90731f326a8ca5399418a76ea0efa0403cbb00790c67906001600160a01b031683611132565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c9060200160405180910390a150565b6068546000906001600160a01b03163314610d1e5760405162461bcd60e51b81526004016103f790611680565b670de0b6b3a7640000821115610d625760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103f7565b6040516370a0823160e01b8152306004820152670de0b6b3a7640000908390731f326a8ca5399418a76ea0efa0403cbb00790c67906370a082319060240160206040518083038186803b158015610db857600080fd5b505afa158015610dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df0919061173f565b610dfa9190611758565b610e0491906116e8565b606854909150610e3390731f326a8ca5399418a76ea0efa0403cbb00790c67906001600160a01b031683611132565b60408051838152602081018390527f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8910160405180910390a1919050565b60606000610e7d611270565b9050600081600281518110610e9457610e946116a4565b602002602001015182600181518110610eaf57610eaf6116a4565b602002602001015183600081518110610eca57610eca6116a4565b6020026020010151610edc91906116d0565b610ee691906116d0565b60408051600380825260808201909252919250602082016060803683370190505092508015610f47578061271083600081518110610f2657610f266116a4565b6020026020010151610f389190611758565b610f4291906116e8565b610f4b565b6117705b83600081518110610f5e57610f5e6116a4565b60209081029190910101528015610fa7578061271083600181518110610f8657610f866116a4565b6020026020010151610f989190611758565b610fa291906116e8565b610fab565b6107d05b83600181518110610fbe57610fbe6116a4565b60209081029190910101528015611007578061271083600281518110610fe657610fe66116a4565b6020026020010151610ff89190611758565b61100291906116e8565b61100b565b6107d05b8360028151811061101e5761101e6116a4565b602002602001018181525050505090565b6033546001600160a01b031633146110595760405162461bcd60e51b81526004016103f79061170a565b6001600160a01b0381166110be5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f7565b61042d81611167565b6040516001600160a01b03808516602483015283166044820152606481018290526109999085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611295565b6040516001600160a01b03831660248201526044810182905261116290849063a9059cbb60e01b906064016110fb565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615611200578160ff1660011480156111dc5750303b155b6111f85760405162461bcd60e51b81526004016103f790611777565b506000919050565b60005460ff8084169116106112275760405162461bcd60e51b81526004016103f790611777565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166112685760405162461bcd60e51b81526004016103f7906117c5565b61085e611367565b6040805160038082526080820190925260609160208201838036833701905050905090565b60006112ea826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113979092919063ffffffff16565b80519091501561116257808060200190518101906113089190611810565b6111625760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103f7565b600054610100900460ff1661138e5760405162461bcd60e51b81526004016103f7906117c5565b61085e33611167565b60606113a684846000856113b0565b90505b9392505050565b6060824710156114115760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103f7565b6001600160a01b0385163b6114685760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f7565b600080866001600160a01b03168587604051611484919061185e565b60006040518083038185875af1925050503d80600081146114c1576040519150601f19603f3d011682016040523d82523d6000602084013e6114c6565b606091505b50915091506114d68282866114e1565b979650505050505050565b606083156114f05750816113a9565b8251156115005782518084602001fd5b8160405162461bcd60e51b81526004016103f7919061187a565b60006020828403121561152c57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561156357815187529582019590820190600101611547565b509495945050505050565b604080825283519082018190526000906020906060840190828701845b828110156115b05781516001600160a01b03168452928401929084019060010161158b565b505050838103828501526115c48186611533565b9695505050505050565b6001600160a01b038116811461042d57600080fd5b6000602082840312156115f557600080fd5b81356113a9816115ce565b6000806040838503121561161357600080fd5b50508035926020909101359150565b60008060006060848603121561163757600080fd5b8335611642816115ce565b92506020840135611652816115ce565b91506040840135611662816115ce565b809150509250925092565b6020815260006113a96020830184611533565b6020808252600a908201526913db9b1e481d985d5b1d60b21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156116e3576116e36116ba565b500190565b60008261170557634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561175157600080fd5b5051919050565b6000816000190483118215151615611772576117726116ba565b500290565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561182257600080fd5b815180151581146113a957600080fd5b60005b8381101561184d578181015183820152602001611835565b838111156109995750506000910152565b60008251611870818460208701611832565b9190910192915050565b6020815260008251806020840152611899816040850160208701611832565b601f01601f1916919091016040019291505056fea264697066735822122003e6ae66a1920d32a2101cac4c29900c44040be82e213d47e611cc265ec6183c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c806384fed5f5116100f9578063c89d5b8b11610097578063ed47d90911610071578063ed47d9091461037f578063f177eb9914610392578063f2fde38b146103a7578063fbfa77cf146103ba57600080fd5b8063c89d5b8b1461035c578063db2e21bc14610364578063e1ee05af1461036c57600080fd5b8063993f64f3116100d3578063993f64f31461030b578063bd244af414610326578063c0c53b8b1461032e578063c54e44eb1461034157600080fd5b806384fed5f5146102e757806389a30271146102cc5780638da5cb5b146102fa57600080fd5b80634631b246116101665780636817031b116101405780636817031b146102905780636e21950f146102a3578063715018a6146102c457806382d0f273146102cc57600080fd5b80634631b24614610267578063484f4ea9146102015780635846dc2b1461027d57600080fd5b806302910e3b146101ae57806312166f1e146101e65780632839eec7146102015780632afcf4801461021c5780633779b8db146102315780633e8f12a41461024c575b600080fd5b6101c97310ed43c718714eb63d5aa57b78b54704e256024e81565b6040516001600160a01b0390911681526020015b60405180910390f35b6101c97355d398326f99059ff775485246999027b319795581565b6101c973e9e7cea3dedca5984780bafc599bd69add087d5681565b61022f61022a36600461151a565b6103cd565b005b6101c9737efaef62fddcca950418312c6c91aef321375a0081565b6101c9732354ef4df11afacb85a5c7f98b624072eccddbb181565b61026f610430565b6040516101dd92919061156e565b6066546101c9906001600160a01b031681565b61022f61029e3660046115e3565b610695565b6102b66102b1366004611600565b610726565b6040519081526020016101dd565b61022f61082a565b6101c9738ac76a51cc950d9822d68b83fe1ad97b32cd580d81565b6067546101c9906001600160a01b031681565b6033546001600160a01b03166101c9565b6101c973ec6557348085aa57c72514d67070dc863c0a5a8c81565b6102b6610860565b61022f61033c366004611622565b6108ea565b6101c9731f326a8ca5399418a76ea0efa0403cbb00790c6781565b6102b661099f565b61022f610bd8565b6065546101c9906001600160a01b031681565b6102b661038d36600461151a565b610cf1565b61039a610e71565b6040516101dd919061166d565b61022f6103b53660046115e3565b61102f565b6068546101c9906001600160a01b031681565b6068546001600160a01b031633146104005760405162461bcd60e51b81526004016103f790611680565b60405180910390fd5b60685461042d90731f326a8ca5399418a76ea0efa0403cbb00790c67906001600160a01b031630846110c7565b50565b606080600061043d610e71565b60408051600380825260808201909252919250602082016060803683370190505092507355d398326f99059ff775485246999027b319795583600081518110610488576104886116a4565b60200260200101906001600160a01b031690816001600160a01b031681525050738ac76a51cc950d9822d68b83fe1ad97b32cd580d836001815181106104d0576104d06116a4565b60200260200101906001600160a01b031690816001600160a01b03168152505073e9e7cea3dedca5984780bafc599bd69add087d5683600281518110610518576105186116a4565b6001600160a01b039290921660209283029190910182015260408051600380825260808201909252918201606080368337019050509150600281600181518110610564576105646116a4565b60200260200101518260008151811061057f5761057f6116a4565b602002602001015161059191906116d0565b61059b91906116e8565b826000815181106105ae576105ae6116a4565b6020026020010181815250506002816002815181106105cf576105cf6116a4565b6020026020010151826000815181106105ea576105ea6116a4565b60200260200101516105fc91906116d0565b61060691906116e8565b82600181518110610619576106196116a4565b60200260200101818152505060028160028151811061063a5761063a6116a4565b602002602001015182600181518110610655576106556116a4565b602002602001015161066791906116d0565b61067191906116e8565b82600281518110610684576106846116a4565b602002602001018181525050509091565b6033546001600160a01b031633146106bf5760405162461bcd60e51b81526004016103f79061170a565b6068546001600160a01b0316156107045760405162461bcd60e51b815260206004820152600960248201526815985d5b1d081cd95d60ba1b60448201526064016103f7565b606880546001600160a01b0319166001600160a01b0392909216919091179055565b6068546000906001600160a01b031633146107535760405162461bcd60e51b81526004016103f790611680565b6040516370a0823160e01b8152306004820152670de0b6b3a7640000908390731f326a8ca5399418a76ea0efa0403cbb00790c67906370a082319060240160206040518083038186803b1580156107a957600080fd5b505afa1580156107bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e1919061173f565b6107eb9190611758565b6107f591906116e8565b60685490915061082490731f326a8ca5399418a76ea0efa0403cbb00790c67906001600160a01b031683611132565b92915050565b6033546001600160a01b031633146108545760405162461bcd60e51b81526004016103f79061170a565b61085e6000611167565b565b6040516370a0823160e01b8152306004820152600090731f326a8ca5399418a76ea0efa0403cbb00790c67906370a082319060240160206040518083038186803b1580156108ad57600080fd5b505afa1580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e5919061173f565b905090565b60006108f660016111b9565b9050801561090e576000805461ff0019166101001790555b610916611241565b606580546001600160a01b038087166001600160a01b0319928316179092556066805486841690831617905560678054928516929091169190911790558015610999576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000806109aa610e71565b90506000816002815181106109c1576109c16116a4565b6020026020010151606760009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1757600080fd5b505afa158015610a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f919061173f565b610a599190611758565b82600181518110610a6c57610a6c6116a4565b6020026020010151606660009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac257600080fd5b505afa158015610ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afa919061173f565b610b049190611758565b83600081518110610b1757610b176116a4565b6020026020010151606560009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b6d57600080fd5b505afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba5919061173f565b610baf9190611758565b610bb991906116d0565b610bc391906116d0565b9050610bd1612710826116e8565b9250505090565b6068546001600160a01b03163314610c025760405162461bcd60e51b81526004016103f790611680565b6040516370a0823160e01b8152306004820152600090731f326a8ca5399418a76ea0efa0403cbb00790c67906370a082319060240160206040518083038186803b158015610c4f57600080fd5b505afa158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c87919061173f565b90508015610cbb57606854610cbb90731f326a8ca5399418a76ea0efa0403cbb00790c67906001600160a01b031683611132565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c9060200160405180910390a150565b6068546000906001600160a01b03163314610d1e5760405162461bcd60e51b81526004016103f790611680565b670de0b6b3a7640000821115610d625760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103f7565b6040516370a0823160e01b8152306004820152670de0b6b3a7640000908390731f326a8ca5399418a76ea0efa0403cbb00790c67906370a082319060240160206040518083038186803b158015610db857600080fd5b505afa158015610dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df0919061173f565b610dfa9190611758565b610e0491906116e8565b606854909150610e3390731f326a8ca5399418a76ea0efa0403cbb00790c67906001600160a01b031683611132565b60408051838152602081018390527f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8910160405180910390a1919050565b60606000610e7d611270565b9050600081600281518110610e9457610e946116a4565b602002602001015182600181518110610eaf57610eaf6116a4565b602002602001015183600081518110610eca57610eca6116a4565b6020026020010151610edc91906116d0565b610ee691906116d0565b60408051600380825260808201909252919250602082016060803683370190505092508015610f47578061271083600081518110610f2657610f266116a4565b6020026020010151610f389190611758565b610f4291906116e8565b610f4b565b6117705b83600081518110610f5e57610f5e6116a4565b60209081029190910101528015610fa7578061271083600181518110610f8657610f866116a4565b6020026020010151610f989190611758565b610fa291906116e8565b610fab565b6107d05b83600181518110610fbe57610fbe6116a4565b60209081029190910101528015611007578061271083600281518110610fe657610fe66116a4565b6020026020010151610ff89190611758565b61100291906116e8565b61100b565b6107d05b8360028151811061101e5761101e6116a4565b602002602001018181525050505090565b6033546001600160a01b031633146110595760405162461bcd60e51b81526004016103f79061170a565b6001600160a01b0381166110be5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f7565b61042d81611167565b6040516001600160a01b03808516602483015283166044820152606481018290526109999085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611295565b6040516001600160a01b03831660248201526044810182905261116290849063a9059cbb60e01b906064016110fb565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615611200578160ff1660011480156111dc5750303b155b6111f85760405162461bcd60e51b81526004016103f790611777565b506000919050565b60005460ff8084169116106112275760405162461bcd60e51b81526004016103f790611777565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166112685760405162461bcd60e51b81526004016103f7906117c5565b61085e611367565b6040805160038082526080820190925260609160208201838036833701905050905090565b60006112ea826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113979092919063ffffffff16565b80519091501561116257808060200190518101906113089190611810565b6111625760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103f7565b600054610100900460ff1661138e5760405162461bcd60e51b81526004016103f7906117c5565b61085e33611167565b60606113a684846000856113b0565b90505b9392505050565b6060824710156114115760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103f7565b6001600160a01b0385163b6114685760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f7565b600080866001600160a01b03168587604051611484919061185e565b60006040518083038185875af1925050503d80600081146114c1576040519150601f19603f3d011682016040523d82523d6000602084013e6114c6565b606091505b50915091506114d68282866114e1565b979650505050505050565b606083156114f05750816113a9565b8251156115005782518084602001fd5b8160405162461bcd60e51b81526004016103f7919061187a565b60006020828403121561152c57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561156357815187529582019590820190600101611547565b509495945050505050565b604080825283519082018190526000906020906060840190828701845b828110156115b05781516001600160a01b03168452928401929084019060010161158b565b505050838103828501526115c48186611533565b9695505050505050565b6001600160a01b038116811461042d57600080fd5b6000602082840312156115f557600080fd5b81356113a9816115ce565b6000806040838503121561161357600080fd5b50508035926020909101359150565b60008060006060848603121561163757600080fd5b8335611642816115ce565b92506020840135611652816115ce565b91506040840135611662816115ce565b809150509250925092565b6020815260006113a96020830184611533565b6020808252600a908201526913db9b1e481d985d5b1d60b21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156116e3576116e36116ba565b500190565b60008261170557634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561175157600080fd5b5051919050565b6000816000190483118215151615611772576117726116ba565b500290565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561182257600080fd5b815180151581146113a957600080fd5b60005b8381101561184d578181015183820152602001611835565b838111156109995750506000910152565b60008251611870818460208701611832565b9190910192915050565b6020815260008251806020840152611899816040850160208701611832565b601f01601f1916919091016040019291505056fea264697066735822122003e6ae66a1920d32a2101cac4c29900c44040be82e213d47e611cc265ec6183c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/lci/LCIStrategyTest.sol:LCIStrategyTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/lci/LCIStrategyTest.sol:LCIStrategyTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1657,
        "contract": "contracts/lci/LCIStrategyTest.sol:LCIStrategyTest",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/lci/LCIStrategyTest.sol:LCIStrategyTest",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/lci/LCIStrategyTest.sol:LCIStrategyTest",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3664,
        "contract": "contracts/lci/LCIStrategyTest.sol:LCIStrategyTest",
        "label": "USDTUSDCVault",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IL2Vault)3595"
      },
      {
        "astId": 3667,
        "contract": "contracts/lci/LCIStrategyTest.sol:LCIStrategyTest",
        "label": "USDTBUSDVault",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IL2Vault)3595"
      },
      {
        "astId": 3670,
        "contract": "contracts/lci/LCIStrategyTest.sol:LCIStrategyTest",
        "label": "USDCBUSDVault",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IL2Vault)3595"
      },
      {
        "astId": 3684,
        "contract": "contracts/lci/LCIStrategyTest.sol:LCIStrategyTest",
        "label": "vault",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IL2Vault)3595": {
        "encoding": "inplace",
        "label": "contract IL2Vault",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}