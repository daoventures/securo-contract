{
  "address": "0x561E00Bb99Aa9397f3B4EaB4cd18822822Bf33A8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTUSDCTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTBUSDTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDCBUSDCurrentPool",
          "type": "uint256"
        }
      ],
      "name": "CurrentComposition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDCBUSDAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestUSDCBUSD",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTBUSDAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestUSDTBUSD",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTUSDCAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestUSDTUSDC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTUSDCTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTBUSDTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDCBUSDTargetPool",
          "type": "uint256"
        }
      ],
      "name": "TargetComposition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawUSDCBUSD",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawUSDTBUSD",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawUSDTUSDC",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BUSD",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PnckRouter",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDCBUSD",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDCBUSDVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTBUSD",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTBUSDVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTUSDC",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTUSDCVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentLPCompositionPerc",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTokenCompositionPerc",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "_USDTUSDCVault",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_USDTBUSDVault",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_USDCBUSDVault",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_targetPerc",
          "type": "uint256[]"
        }
      ],
      "name": "setLPCompositionTargetPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "targetPercentages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "farmIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromFarm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6baa1321fa1b12e25ec7aeb66addcd68c3d06a30d74f42e86e27503f80ca8a9b",
  "receipt": {
    "to": null,
    "from": "0x3f68A3c1023d736D8Be867CA49Cb18c543373B99",
    "contractAddress": "0x561E00Bb99Aa9397f3B4EaB4cd18822822Bf33A8",
    "transactionIndex": 123,
    "gasUsed": "3320977",
    "logsBloom": "0x
    "blockHash": "0xe635f8f235c77507a510982505f6edc46c1b9075112cde1441fa5cea3d54effe",
    "transactionHash": "0x6baa1321fa1b12e25ec7aeb66addcd68c3d06a30d74f42e86e27503f80ca8a9b",
    "logs": [],
    "blockNumber": 19085567,
    "cumulativeGasUsed": "16760263",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "193be678b50e19b63a4c1742147ab0d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTUSDCTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTBUSDTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDCBUSDCurrentPool\",\"type\":\"uint256\"}],\"name\":\"CurrentComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDCBUSDAmt\",\"type\":\"uint256\"}],\"name\":\"InvestUSDCBUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTBUSDAmt\",\"type\":\"uint256\"}],\"name\":\"InvestUSDTBUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTUSDCAmt\",\"type\":\"uint256\"}],\"name\":\"InvestUSDTUSDC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTUSDCTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTBUSDTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDCBUSDTargetPool\",\"type\":\"uint256\"}],\"name\":\"TargetComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawUSDCBUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawUSDTBUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawUSDTUSDC\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PnckRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCBUSD\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCBUSDVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTBUSD\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTBUSDVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTUSDC\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTUSDCVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLPCompositionPerc\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenCompositionPerc\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"_USDTUSDCVault\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_USDTBUSDVault\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_USDCBUSDVault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_targetPerc\",\"type\":\"uint256[]\"}],\"name\":\"setLPCompositionTargetPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"farmIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawFromFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lci/LCIStrategy.sol\":\"LCIStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/lci/LCIStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./libs/Price.sol\\\";\\n\\ninterface IRouter {\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IL2Vault is IERC20Upgradeable {\\n    function deposit(uint amount) external;\\n    function withdraw(uint share) external;\\n    function getAllPoolInUSD() external view returns (uint);\\n    function getAPR() external view returns (uint);\\n}\\n\\ncontract LCIStrategy is OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x55d398326f99059fF775485246999027B3197955);\\n    IERC20Upgradeable public constant USDC = IERC20Upgradeable(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\\n    IERC20Upgradeable public constant BUSD = IERC20Upgradeable(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\n\\n    IERC20Upgradeable public constant USDTUSDC = IERC20Upgradeable(0xEc6557348085Aa57C72514D67070dC863C0a5A8c);\\n    IERC20Upgradeable public constant USDTBUSD = IERC20Upgradeable(0x7EFaEf62fDdCCa950418312c6C91Aef321375A00);\\n    IERC20Upgradeable public constant USDCBUSD = IERC20Upgradeable(0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1);\\n\\n    IRouter public constant PnckRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n\\n    uint constant POOL_COUNT = 3;\\n    IL2Vault public USDTUSDCVault;\\n    IL2Vault public USDTBUSDVault;\\n    IL2Vault public USDCBUSDVault;\\n    \\n    uint constant DENOMINATOR = 10000;\\n    uint[] public targetPercentages;\\n\\n    address public vault;\\n\\n    event TargetComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDTargetPool);\\n    event CurrentComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDCurrentPool);\\n    event InvestUSDTUSDC(uint USDTAmt, uint USDTUSDCAmt);\\n    event InvestUSDTBUSD(uint USDTAmt, uint USDTBUSDAmt);\\n    event InvestUSDCBUSD(uint USDTAmt, uint USDCBUSDAmt);\\n    event Withdraw(uint sharePerc, uint USDTAmt);\\n    event WithdrawUSDTUSDC(uint lpTokenAmt, uint USDTAmt);\\n    event WithdrawUSDTBUSD(uint lpTokenAmt, uint USDTAmt);\\n    event WithdrawUSDCBUSD(uint lpTokenAmt, uint USDTAmt);\\n    event EmergencyWithdraw(uint USDTAmt);\\n\\n    modifier onlyVault {\\n        require(msg.sender == vault, \\\"Only vault\\\");\\n        _;\\n    }\\n\\n    function initialize(IL2Vault _USDTUSDCVault, IL2Vault _USDTBUSDVault, IL2Vault _USDCBUSDVault) external initializer {\\n        __Ownable_init();\\n\\n        targetPercentages.push(6000); // 60%\\n        targetPercentages.push(2000); // 20%\\n        targetPercentages.push(2000); // 20%\\n\\n        USDTUSDCVault = _USDTUSDCVault;\\n        USDTBUSDVault = _USDTBUSDVault;\\n        USDCBUSDVault = _USDCBUSDVault;\\n\\n        USDT.safeApprove(address(PnckRouter), type(uint).max);\\n        USDC.safeApprove(address(PnckRouter), type(uint).max);\\n        BUSD.safeApprove(address(PnckRouter), type(uint).max);\\n\\n        USDTUSDC.safeApprove(address(USDTUSDCVault), type(uint).max);\\n        USDTBUSD.safeApprove(address(USDTBUSDVault), type(uint).max);\\n        USDCBUSD.safeApprove(address(USDCBUSDVault), type(uint).max);\\n\\n        USDTUSDC.safeApprove(address(PnckRouter), type(uint).max);\\n        USDTBUSD.safeApprove(address(PnckRouter), type(uint).max);\\n        USDCBUSD.safeApprove(address(PnckRouter), type(uint).max);\\n    }\\n\\n    function invest(uint USDTAmt) external onlyVault {\\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\\n        USDTAmt = USDT.balanceOf(address(this));\\n        (uint USDTPriceInUSD, uint denominator) = PriceLib.getUSDTPriceInUSD();\\n\\n        uint[] memory pools = getEachPoolInUSD();\\n        uint allPool = pools[0] + pools[1] + pools[2] + USDTAmt * USDTPriceInUSD / denominator; // USDT's decimals is 18\\n\\n        uint totalAllocation;\\n        uint[] memory allocations = new uint[](POOL_COUNT);\\n        for (uint i = 0; i < POOL_COUNT; i ++) {\\n            uint target = allPool * targetPercentages[i] / DENOMINATOR;\\n            if (pools[i] < target) {\\n                uint diff = target - pools[i];\\n                allocations[i] = diff;\\n                totalAllocation += diff;\\n            }\\n        }\\n\\n        uint[] memory USDTAmts = new uint[](POOL_COUNT);\\n        for (uint i = 0; i < POOL_COUNT; i ++) {\\n            USDTAmts[i] = USDTAmt * allocations[i] / totalAllocation;\\n        }\\n\\n        if (USDTAmts[0] > 0) {\\n            _investUSDTUSDC(USDTAmts[0]);\\n        }\\n        if (USDTAmts[1] > 0) {\\n            _investUSDTBUSD(USDTAmts[1]);\\n        }\\n        if (USDTAmts[2] > 0) {\\n            _investUSDCBUSD(USDT.balanceOf(address(this)));\\n        }\\n\\n        emit CurrentComposition(pools[0], pools[1], pools[2]);\\n        emit TargetComposition(targetPercentages[0], targetPercentages[1], targetPercentages[2]);\\n    }\\n\\n\\n    function _investUSDTUSDC(uint _usdtAmt) private {\\n        uint _amt = _usdtAmt/2;\\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\\n\\n        uint _USDCAmt = USDC.balanceOf(address(this));\\n        uint lpTokens = _addLiquidity(address(USDT), address(USDC), _amt, _USDCAmt);\\n\\n        USDTUSDCVault.deposit(lpTokens);\\n        emit InvestUSDTUSDC(_usdtAmt, lpTokens);\\n    }\\n\\n    function _investUSDTBUSD(uint _usdtAmt) private {\\n        uint _amt = _usdtAmt / 2 ;\\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\\n\\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\\n        uint lpTokens = _addLiquidity(address(USDT), address(BUSD), _amt, _BUSDAmt);\\n\\n        USDTBUSDVault.deposit(lpTokens);\\n        emit InvestUSDTBUSD(_usdtAmt, lpTokens);\\n    }\\n\\n    function _investUSDCBUSD(uint _usdtAmt) private {\\n        uint _amt = _usdtAmt / 2 ;\\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\\n\\n        uint _USDCAmt = USDC.balanceOf(address(this));\\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\\n\\n        uint lpTokens = _addLiquidity(address(USDC), address(BUSD), _USDCAmt, _BUSDAmt);\\n\\n        USDCBUSDVault.deposit(lpTokens);\\n        emit InvestUSDCBUSD(_usdtAmt, lpTokens);\\n    }\\n\\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\\n        require(sharePerc <= 1e18, \\\"Over 100%\\\");\\n        \\n        uint USDTAmtBefore = USDT.balanceOf(address(this));\\n        _withdrawUSDTUSDC(sharePerc);\\n        _withdrawUSDTBUSD(sharePerc);\\n        _withdrawUSDCBUSD(sharePerc);\\n        USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\\n        USDT.safeTransfer(vault, USDTAmt);\\n\\n        emit Withdraw(sharePerc, USDTAmt);\\n    }\\n\\n    function _withdrawUSDTUSDC(uint _sharePerc) private {\\n        uint amount = USDTUSDCVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            USDTUSDCVault.withdraw(amount);\\n\\n            uint _amt = USDTUSDC.balanceOf(address(this));\\n            (uint _amtUSDT,) = _removeLiquidity(address(USDT), address(USDC), _amt);\\n            uint _amtUSDC = USDC.balanceOf(address(this));\\n            _amtUSDT += _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\\n\\n            emit WithdrawUSDTUSDC(_amt, _amtUSDT);\\n        }\\n    }\\n\\n    function _withdrawUSDTBUSD(uint _sharePerc) private {\\n        uint amount = USDTBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            USDTBUSDVault.withdraw(amount);\\n\\n            uint _amt = USDTBUSD.balanceOf(address(this));\\n            (uint _amtUSDT,) = _removeLiquidity(address(USDT), address(BUSD), _amt);\\n            uint _amtBUSD = BUSD.balanceOf(address(this));\\n            _amtUSDT += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\\n\\n            emit WithdrawUSDTBUSD(_amt, _amtUSDT);\\n        }\\n    }\\n\\n    function _withdrawUSDCBUSD(uint _sharePerc) private {\\n        uint amount = USDCBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            USDCBUSDVault.withdraw(amount);\\n\\n            uint _amt = USDCBUSD.balanceOf(address(this));\\n            _removeLiquidity(address(USDC), address(BUSD), _amt);\\n            uint _amtUSDC = USDC.balanceOf(address(this));\\n            uint _amtBUSD = BUSD.balanceOf(address(this));\\n            uint _usdtAmt = _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\\n            _usdtAmt += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\\n\\n            emit WithdrawUSDCBUSD(_amt, _usdtAmt);\\n        }\\n    }\\n\\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = _tokenB;\\n        return (PnckRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\\n    }\\n\\n    function _addLiquidity(address _tokenA, address _tokenB, uint _amtA, uint _amtB) private returns (uint liquidity) {\\n        (,,liquidity) = PnckRouter.addLiquidity(_tokenA, _tokenB, _amtA, _amtB, 0, 0, address(this), block.timestamp);\\n    }\\n\\n    function _removeLiquidity(address _tokenA, address _tokenB, uint _amt) private returns (uint _amtA, uint _amtB) {\\n        (_amtA, _amtB) = PnckRouter.removeLiquidity(_tokenA, _tokenB, _amt, 0, 0, address(this), block.timestamp);\\n    }\\n\\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\\n        require(sharePerc <= 1e18, \\\"Over 100%\\\");\\n        if (farmIndex == 0) _withdrawUSDTUSDC(sharePerc); \\n        else if (farmIndex == 1) _withdrawUSDTBUSD(sharePerc);\\n        else if (farmIndex == 2) _withdrawUSDCBUSD(sharePerc);\\n        USDTAmt = USDT.balanceOf(address(this));\\n        USDT.safeTransfer(vault, USDTAmt);\\n    }\\n\\n    function emergencyWithdraw() external onlyVault {\\n        // 1e18 == 100% of share\\n        _withdrawUSDTUSDC(1e18);\\n        _withdrawUSDTBUSD(1e18);\\n        _withdrawUSDCBUSD(1e18);\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if (0 < USDTAmt) {\\n            USDT.safeTransfer(vault, USDTAmt);\\n        }\\n        emit EmergencyWithdraw(USDTAmt);\\n    }\\n\\n    function setVault(address _vault) external onlyOwner {\\n        require(vault == address(0), \\\"Vault set\\\");\\n        vault = _vault;\\n    }\\n\\n    function setLPCompositionTargetPerc(uint[] calldata _targetPerc) external onlyOwner {\\n        uint targetCnt = _targetPerc.length;\\n        require(targetCnt == targetPercentages.length, \\\"Invalid count\\\");\\n\\n        uint sum;\\n        for (uint i = 0; i < targetCnt; i ++) {\\n            targetPercentages[i] = _targetPerc[i];\\n            sum += _targetPerc[i];\\n        }\\n        require(sum == DENOMINATOR, \\\"Invalid parameter\\\");\\n    }\\n\\n    function getUSDTUSDCPoolInUSD() private view  returns (uint) {\\n        uint amt = USDTUSDCVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * USDTUSDCVault.balanceOf(address(this)) / USDTUSDCVault.totalSupply(); //to exclude L1 deposits from other addresses\\n    }\\n\\n    function getUSDTBUSDPoolInUSD() private view returns (uint) {\\n        uint amt = USDTBUSDVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * USDTBUSDVault.balanceOf(address(this)) / USDTBUSDVault.totalSupply();\\n    }\\n\\n    function getUSDCBUSDPoolInUSD() private view returns (uint) {\\n        uint amt = USDCBUSDVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * USDCBUSDVault.balanceOf(address(this)) / USDCBUSDVault.totalSupply();\\n    }\\n\\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\\n        pools = new uint[](POOL_COUNT);\\n        pools[0] = getUSDTUSDCPoolInUSD();\\n        pools[1] = getUSDTBUSDPoolInUSD();\\n        pools[2] = getUSDCBUSDPoolInUSD();\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint) {\\n        uint[] memory pools = getEachPoolInUSD();\\n        return pools[0] + pools[1] + pools[2];\\n    }\\n\\n    function getCurrentLPCompositionPerc() public view returns (uint[] memory percentages) {\\n        uint[] memory pools = getEachPoolInUSD();\\n        uint allPool = pools[0] + pools[1] + pools[2];\\n        percentages = new uint[](POOL_COUNT);\\n        for (uint i = 0; i < POOL_COUNT; i ++) {\\n            percentages[i] = allPool == 0 ? targetPercentages[i] : pools[i] * DENOMINATOR / allPool;\\n        }\\n    }\\n\\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\\n        tokens = new address[](POOL_COUNT);\\n        tokens[0] = address(USDT);\\n        tokens[1] = address(USDC);\\n        tokens[2] = address(BUSD);\\n        percentages = new uint[](POOL_COUNT);\\n        percentages[0] = (lpPerc[0] + lpPerc[1]) / 2;\\n        percentages[1] = (lpPerc[0] + lpPerc[2]) / 2;\\n        percentages[2] = (lpPerc[1] + lpPerc[2]) / 2;\\n    }\\n\\n    function getAPR() external view returns (uint) {\\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\\n        uint allApr = USDTUSDCVault.getAPR() * lpPerc[0]\\n                    + USDTBUSDVault.getAPR() * lpPerc[1]\\n                    + USDCBUSDVault.getAPR() * lpPerc[2];\\n        return (allApr / DENOMINATOR);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6383edfd2f85dec97e1a993b36b00d24110b870766bedf1c07dc2bca430eeeb5\",\"license\":\"MIT\"},\"contracts/lci/libs/Price.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\ninterface IChainlink {\\n    function latestAnswer() external view returns (int256);\\n}\\n\\nlibrary PriceLib {\\n\\n    address internal constant USDT = 0x55d398326f99059fF775485246999027B3197955;\\n    address internal constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n\\n    /// @return the price in USD of 8 decimals in precision.\\n    function getAssetPrice(address asset) internal view returns (uint) {\\n        if (asset == USDT) {\\n            return uint(IChainlink(0xB97Ad0E74fa7d920791E90258A6E2085088b4320).latestAnswer());\\n        } else if (asset == USDC) {\\n            return uint(IChainlink(0x51597f405303C4377E36123cBc172b13269EA163).latestAnswer());\\n        } else if (asset == BUSD) {\\n            return uint(IChainlink(0xcBb98864Ef56E9042e7d2efef76141f15731B82f).latestAnswer());\\n        }\\n        return 0;\\n    }\\n\\n    function getBNBPriceInUSD() internal view returns (uint, uint) {\\n        uint BNBPriceInUSD = uint(IChainlink(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE).latestAnswer()); // 8 decimals\\n        return (BNBPriceInUSD, 1e8);\\n    }\\n\\n    function getCAKEPriceInUSD() internal view returns (uint, uint) {\\n        uint CAKEPriceInUSD = uint(IChainlink(0xB6064eD41d4f67e353768aA239cA86f4F73665a1).latestAnswer()); // 8 decimals\\n        return (CAKEPriceInUSD, 1e8);\\n    }\\n\\n    function getUSDTPriceInUSD() internal view returns (uint, uint) {\\n        uint USDTPriceInUSD = uint(IChainlink(0xB97Ad0E74fa7d920791E90258A6E2085088b4320).latestAnswer()); // 8 decimals\\n        return (USDTPriceInUSD, 1e8);\\n    }\\n}\\n\",\"keccak256\":\"0xa611b5b44fa8500b260fb6614d08d0b713704d14c75ee423f36baf3261b5a01e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613b22806100206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063993f64f3116100de578063c89d5b8b11610097578063ed47d90911610071578063ed47d9091461035d578063f177eb9914610370578063f2fde38b14610385578063fbfa77cf1461039857600080fd5b8063c89d5b8b1461033a578063db2e21bc14610342578063e1ee05af1461034a57600080fd5b8063993f64f3146102c95780639a6a839e146102e4578063a7645a20146102f7578063bd244af41461030a578063c0c53b8b14610312578063c54e44eb1461032557600080fd5b80635846dc2b1161014b578063715018a611610125578063715018a61461028857806384fed5f51461029057806389a30271146102a35780638da5cb5b146102b857600080fd5b80635846dc2b146102415780636817031b146102545780636e21950f1461026757600080fd5b806302910e3b146101935780632afcf480146101cb5780633779b8db146101e05780633e8f12a4146101fb5780634631b24614610216578063484f4ea91461022c575b600080fd5b6101ae7310ed43c718714eb63d5aa57b78b54704e256024e81565b6040516001600160a01b0390911681526020015b60405180910390f35b6101de6101d93660046134e9565b6103ab565b005b6101ae737efaef62fddcca950418312c6c91aef321375a0081565b6101ae732354ef4df11afacb85a5c7f98b624072eccddbb181565b61021e61091f565b6040516101c2929190613576565b6101ae600080516020613a8d83398151915281565b6066546101ae906001600160a01b031681565b6101de6102623660046135b9565b610b72565b61027a6102753660046135d6565b610c03565b6040519081526020016101c2565b6101de610d56565b6067546101ae906001600160a01b031681565b6101ae600080516020613acd83398151915281565b6033546001600160a01b03166101ae565b6101ae73ec6557348085aa57c72514d67070dc863c0a5a8c81565b6101de6102f23660046135f8565b610d8c565b61027a6103053660046134e9565b610ec1565b61027a610ee2565b6101de61032036600461366d565b610f5a565b6101ae600080516020613aad83398151915281565b61027a611217565b6101de611450565b6065546101ae906001600160a01b031681565b61027a61036b3660046134e9565b611590565b61037861178d565b6040516101c291906136b8565b6101de6103933660046135b9565b6118c2565b6069546101ae906001600160a01b031681565b6069546001600160a01b031633146103de5760405162461bcd60e51b81526004016103d5906136cb565b60405180910390fd5b60695461040590600080516020613aad833981519152906001600160a01b0316308461195d565b6040516370a0823160e01b8152306004820152600080516020613aad833981519152906370a082319060240160206040518083038186803b15801561044957600080fd5b505afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048191906136ef565b905060008061048e6119c8565b91509150600061049c611a5f565b90506000826104ab858761371e565b6104b5919061373d565b826002815181106104c8576104c861375f565b6020026020010151836001815181106104e3576104e361375f565b6020026020010151846000815181106104fe576104fe61375f565b60200260200101516105109190613775565b61051a9190613775565b6105249190613775565b6040805160038082526080820190925291925060009182916020820160608036833701905050905060005b600381101561061b576000612710606883815481106105705761057061375f565b906000526020600020015486610586919061371e565b610590919061373d565b9050808683815181106105a5576105a561375f565b602002602001015110156106085760008683815181106105c7576105c761375f565b6020026020010151826105da91906137a3565b9050808484815181106105ef576105ef61375f565b60209081029190910101526106048186613775565b9450505b5080610613816137ba565b91505061054f565b50604080516003808252608082019092526000916020820160608036833701905050905060005b60038110156106aa578383828151811061065e5761065e61375f565b60200260200101518a610671919061371e565b61067b919061373d565b82828151811061068d5761068d61375f565b6020908102919091010152806106a2816137ba565b915050610642565b506000816000815181106106c0576106c061375f565b602002602001015111156106f1576106f1816000815181106106e4576106e461375f565b6020026020010151611af9565b6000816001815181106107065761070661375f565b60200260200101511115610737576107378160018151811061072a5761072a61375f565b6020026020010151611c88565b60008160028151811061074c5761074c61375f565b602002602001015111156107df576040516370a0823160e01b81523060048201526107df90600080516020613aad833981519152906370a082319060240160206040518083038186803b1580156107a257600080fd5b505afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da91906136ef565b611e08565b7ffe1569189b90a5384ab10f6f852b375150f2bfc96432e2ec3a161f817fe2bcce856000815181106108135761081361375f565b60200260200101518660018151811061082e5761082e61375f565b6020026020010151876002815181106108495761084961375f565b6020026020010151604051610871939291909283526020830191909152604082015260600190565b60405180910390a17f78ab7e568a4cc9615209aa598a68edf063eecc26e7267dbe086b18b4f299cddc60686000815481106108ae576108ae61375f565b906000526020600020015460686001815481106108cd576108cd61375f565b906000526020600020015460686002815481106108ec576108ec61375f565b60009182526020918290200154604080519485529184019290925282015260600160405180910390a15050505050505050565b606080600061092c61178d565b6040805160038082526080820190925291925060208201606080368337019050509250600080516020613aad833981519152836000815181106109715761097161375f565b60200260200101906001600160a01b031690816001600160a01b031681525050600080516020613acd833981519152836001815181106109b3576109b361375f565b60200260200101906001600160a01b031690816001600160a01b031681525050600080516020613a8d833981519152836002815181106109f5576109f561375f565b6001600160a01b039290921660209283029190910182015260408051600380825260808201909252918201606080368337019050509150600281600181518110610a4157610a4161375f565b602002602001015182600081518110610a5c57610a5c61375f565b6020026020010151610a6e9190613775565b610a78919061373d565b82600081518110610a8b57610a8b61375f565b602002602001018181525050600281600281518110610aac57610aac61375f565b602002602001015182600081518110610ac757610ac761375f565b6020026020010151610ad99190613775565b610ae3919061373d565b82600181518110610af657610af661375f565b602002602001018181525050600281600281518110610b1757610b1761375f565b602002602001015182600181518110610b3257610b3261375f565b6020026020010151610b449190613775565b610b4e919061373d565b82600281518110610b6157610b6161375f565b602002602001018181525050509091565b6033546001600160a01b03163314610b9c5760405162461bcd60e51b81526004016103d5906137d5565b6069546001600160a01b031615610be15760405162461bcd60e51b815260206004820152600960248201526815985d5b1d081cd95d60ba1b60448201526064016103d5565b606980546001600160a01b0319166001600160a01b0392909216919091179055565b6069546000906001600160a01b03163314610c305760405162461bcd60e51b81526004016103d5906136cb565b670de0b6b3a7640000821115610c745760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103d5565b82610c8757610c8282612045565b610cab565b8260011415610c9957610c82826122f2565b8260021415610cab57610cab8261259b565b6040516370a0823160e01b8152306004820152600080516020613aad833981519152906370a082319060240160206040518083038186803b158015610cef57600080fd5b505afa158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2791906136ef565b606954909150610d5090600080516020613aad833981519152906001600160a01b031683612900565b92915050565b6033546001600160a01b03163314610d805760405162461bcd60e51b81526004016103d5906137d5565b610d8a6000612935565b565b6033546001600160a01b03163314610db65760405162461bcd60e51b81526004016103d5906137d5565b60685481908114610df95760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a590818dbdd5b9d609a1b60448201526064016103d5565b6000805b82811015610e7557848482818110610e1757610e1761375f565b9050602002013560688281548110610e3157610e3161375f565b600091825260209091200155848482818110610e4f57610e4f61375f565b9050602002013582610e619190613775565b915080610e6d816137ba565b915050610dfd565b506127108114610ebb5760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103830b930b6b2ba32b960791b60448201526064016103d5565b50505050565b60688181548110610ed157600080fd5b600091825260209091200154905081565b600080610eed611a5f565b905080600281518110610f0257610f0261375f565b602002602001015181600181518110610f1d57610f1d61375f565b602002602001015182600081518110610f3857610f3861375f565b6020026020010151610f4a9190613775565b610f549190613775565b91505090565b6000610f666001612987565b90508015610f7e576000805461ff0019166101001790555b610f86612a0f565b606880546001818101835560008390526117707fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c2209775392830155825480820184556107d090830181905583549182019093550155606580546001600160a01b038087166001600160a01b031992831617909255606680548684169083161790556067805492851692909116919091179055611044600080516020613aad8339815191527310ed43c718714eb63d5aa57b78b54704e256024e600019612a3e565b611073600080516020613acd8339815191527310ed43c718714eb63d5aa57b78b54704e256024e600019612a3e565b6110a2600080516020613a8d8339815191527310ed43c718714eb63d5aa57b78b54704e256024e600019612a3e565b6065546110d09073ec6557348085aa57c72514d67070dc863c0a5a8c906001600160a01b0316600019612a3e565b6066546110fe90737efaef62fddcca950418312c6c91aef321375a00906001600160a01b0316600019612a3e565b60675461112c90732354ef4df11afacb85a5c7f98b624072eccddbb1906001600160a01b0316600019612a3e565b61116173ec6557348085aa57c72514d67070dc863c0a5a8c7310ed43c718714eb63d5aa57b78b54704e256024e600019612a3e565b611196737efaef62fddcca950418312c6c91aef321375a007310ed43c718714eb63d5aa57b78b54704e256024e600019612a3e565b6111cb732354ef4df11afacb85a5c7f98b624072eccddbb17310ed43c718714eb63d5aa57b78b54704e256024e600019612a3e565b8015610ebb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150505050565b60008061122261178d565b90506000816002815181106112395761123961375f565b6020026020010151606760009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561128f57600080fd5b505afa1580156112a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c791906136ef565b6112d1919061371e565b826001815181106112e4576112e461375f565b6020026020010151606660009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133a57600080fd5b505afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137291906136ef565b61137c919061371e565b8360008151811061138f5761138f61375f565b6020026020010151606560009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e557600080fd5b505afa1580156113f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141d91906136ef565b611427919061371e565b6114319190613775565b61143b9190613775565b90506114496127108261373d565b9250505090565b6069546001600160a01b0316331461147a5760405162461bcd60e51b81526004016103d5906136cb565b61148b670de0b6b3a7640000612045565b61149c670de0b6b3a76400006122f2565b6114ad670de0b6b3a764000061259b565b6040516370a0823160e01b8152306004820152600090600080516020613aad833981519152906370a082319060240160206040518083038186803b1580156114f457600080fd5b505afa158015611508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152c91906136ef565b9050801561155a5760695461155a90600080516020613aad833981519152906001600160a01b031683612900565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c9060200160405180910390a150565b6069546000906001600160a01b031633146115bd5760405162461bcd60e51b81526004016103d5906136cb565b670de0b6b3a76400008211156116015760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103d5565b6040516370a0823160e01b8152306004820152600090600080516020613aad833981519152906370a082319060240160206040518083038186803b15801561164857600080fd5b505afa15801561165c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168091906136ef565b905061168b83612045565b611694836122f2565b61169d8361259b565b6040516370a0823160e01b81523060048201528190600080516020613aad833981519152906370a082319060240160206040518083038186803b1580156116e357600080fd5b505afa1580156116f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171b91906136ef565b61172591906137a3565b60695490925061174e90600080516020613aad833981519152906001600160a01b031684612900565b60408051848152602081018490527f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8910160405180910390a150919050565b60606000611799611a5f565b90506000816002815181106117b0576117b061375f565b6020026020010151826001815181106117cb576117cb61375f565b6020026020010151836000815181106117e6576117e661375f565b60200260200101516117f89190613775565b6118029190613775565b604080516003808252608082019092529192506020820160608036833701905050925060005b60038110156118bc57811561186e578161271084838151811061184d5761184d61375f565b602002602001015161185f919061371e565b611869919061373d565b61188d565b606881815481106118815761188161375f565b90600052602060002001545b84828151811061189f5761189f61375f565b6020908102919091010152806118b4816137ba565b915050611828565b50505090565b6033546001600160a01b031633146118ec5760405162461bcd60e51b81526004016103d5906137d5565b6001600160a01b0381166119515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d5565b61195a81612935565b50565b6040516001600160a01b0380851660248301528316604482015260648101829052610ebb9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612b62565b600080600073b97ad0e74fa7d920791e90258a6e2085088b43206001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1a57600080fd5b505afa158015611a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5291906136ef565b936305f5e1009350915050565b60408051600380825260808201909252606091602082018380368337019050509050611a89612c34565b81600081518110611a9c57611a9c61375f565b602002602001018181525050611ab0612de8565b81600181518110611ac357611ac361375f565b602002602001018181525050611ad7612f2f565b81600281518110611aea57611aea61375f565b60200260200101818152505090565b6000611b0660028361373d565b9050611b46600080516020613aad833981519152600080516020613acd833981519152836064611b3782606261371e565b611b41919061373d565b613076565b506040516370a0823160e01b8152306004820152600090600080516020613acd833981519152906370a082319060240160206040518083038186803b158015611b8e57600080fd5b505afa158015611ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc691906136ef565b90506000611bf2600080516020613aad833981519152600080516020613acd83398151915285856131b5565b60655460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b158015611c3957600080fd5b505af1158015611c4d573d6000803e3d6000fd5b505060408051878152602081018590527fa5747745c82ade5eeafbc0c66155d3fdf58650ec41cb08098b40c8dabf8a8d3b9350019050611209565b6000611c9560028361373d565b9050611cc6600080516020613aad833981519152600080516020613a8d833981519152836064611b3782606261371e565b506040516370a0823160e01b8152306004820152600090600080516020613a8d833981519152906370a082319060240160206040518083038186803b158015611d0e57600080fd5b505afa158015611d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4691906136ef565b90506000611d72600080516020613aad833981519152600080516020613a8d83398151915285856131b5565b60665460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b158015611db957600080fd5b505af1158015611dcd573d6000803e3d6000fd5b505060408051878152602081018590527fa4e400572a2a0f1abc3ceb9c160f7c42f3e397510b1ee4c6929cb3000bfc8a439350019050611209565b6000611e1560028361373d565b9050611e46600080516020613aad833981519152600080516020613acd833981519152836064611b3782606261371e565b50611e76600080516020613aad833981519152600080516020613a8d833981519152836064611b3782606261371e565b506040516370a0823160e01b8152306004820152600090600080516020613acd833981519152906370a082319060240160206040518083038186803b158015611ebe57600080fd5b505afa158015611ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef691906136ef565b6040516370a0823160e01b8152306004820152909150600090600080516020613a8d833981519152906370a082319060240160206040518083038186803b158015611f4057600080fd5b505afa158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7891906136ef565b90506000611fa4600080516020613acd833981519152600080516020613a8d83398151915285856131b5565b60675460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b158015611feb57600080fd5b505af1158015611fff573d6000803e3d6000fd5b505060408051888152602081018590527fa1605bcb566b8ee1a15b4f2083a61e6e23ce065f38cef3e8b4dd8783dab0fbd993500190505b60405180910390a15050505050565b6065546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009184916001600160a01b0316906370a082319060240160206040518083038186803b15801561209557600080fd5b505afa1580156120a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cd91906136ef565b6120d7919061371e565b6120e1919061373d565b905080156122ee57606554604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561212f57600080fd5b505af1158015612143573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526000925073ec6557348085aa57c72514d67070dc863c0a5a8c91506370a082319060240160206040518083038186803b15801561219457600080fd5b505afa1580156121a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cc91906136ef565b905060006121f7600080516020613aad833981519152600080516020613acd83398151915284613280565b506040516370a0823160e01b8152306004820152909150600090600080516020613acd833981519152906370a082319060240160206040518083038186803b15801561224257600080fd5b505afa158015612256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227a91906136ef565b90506122ab600080516020613acd833981519152600080516020613aad833981519152836064611b3782606261371e565b6122b59083613775565b60408051858152602081018390529193507fa75b70fca861358b5d9e6ef8d7133844f791f90824a43b88a3430d2f2148d2879101612036565b5050565b6066546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009184916001600160a01b0316906370a082319060240160206040518083038186803b15801561234257600080fd5b505afa158015612356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237a91906136ef565b612384919061371e565b61238e919061373d565b905080156122ee57606654604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156123dc57600080fd5b505af11580156123f0573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015260009250737efaef62fddcca950418312c6c91aef321375a0091506370a082319060240160206040518083038186803b15801561244157600080fd5b505afa158015612455573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247991906136ef565b905060006124a4600080516020613aad833981519152600080516020613a8d83398151915284613280565b506040516370a0823160e01b8152306004820152909150600090600080516020613a8d833981519152906370a082319060240160206040518083038186803b1580156124ef57600080fd5b505afa158015612503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252791906136ef565b9050612558600080516020613a8d833981519152600080516020613aad833981519152836064611b3782606261371e565b6125629083613775565b60408051858152602081018390529193507f88d437bfe011784cd9b1dba7765f54df616437217b5ba8f088a0302a658f1f6b9101612036565b6067546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009184916001600160a01b0316906370a082319060240160206040518083038186803b1580156125eb57600080fd5b505afa1580156125ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262391906136ef565b61262d919061371e565b612637919061373d565b905080156122ee57606754604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561268557600080fd5b505af1158015612699573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015260009250732354ef4df11afacb85a5c7f98b624072eccddbb191506370a082319060240160206040518083038186803b1580156126ea57600080fd5b505afa1580156126fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272291906136ef565b905061274b600080516020613acd833981519152600080516020613a8d83398151915283613280565b50506040516370a0823160e01b8152306004820152600090600080516020613acd833981519152906370a082319060240160206040518083038186803b15801561279457600080fd5b505afa1580156127a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cc91906136ef565b6040516370a0823160e01b8152306004820152909150600090600080516020613a8d833981519152906370a082319060240160206040518083038186803b15801561281657600080fd5b505afa15801561282a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284e91906136ef565b90506000612881600080516020613acd833981519152600080516020613aad833981519152856064611b3782606261371e565b90506128b2600080516020613a8d833981519152600080516020613aad833981519152846064611b3782606261371e565b6128bc9082613775565b60408051868152602081018390529192507f9bf4f058d2e48350e0c988966a158671879246ffbe404230e80f4d3f669a931d910160405180910390a1505050505050565b6040516001600160a01b03831660248201526044810182905261293090849063a9059cbb60e01b90606401611991565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff16156129ce578160ff1660011480156129aa5750303b155b6129c65760405162461bcd60e51b81526004016103d59061380a565b506000919050565b60005460ff8084169116106129f55760405162461bcd60e51b81526004016103d59061380a565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff16612a365760405162461bcd60e51b81526004016103d590613858565b610d8a613346565b801580612ac75750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612a8d57600080fd5b505afa158015612aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac591906136ef565b155b612b325760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016103d5565b6040516001600160a01b03831660248201526044810182905261293090849063095ea7b360e01b90606401611991565b6000612bb7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166133769092919063ffffffff16565b8051909150156129305780806020019051810190612bd591906138a3565b6129305760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d5565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b158015612c8557600080fd5b505afa158015612c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbd91906136ef565b90508015612de057606560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d1357600080fd5b505afa158015612d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4b91906136ef565b6065546040516370a0823160e01b81523060048201526001600160a01b03909116906370a08231906024015b60206040518083038186803b158015612d8f57600080fd5b505afa158015612da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc791906136ef565b612dd1908361371e565b612ddb919061373d565b610f54565b600091505090565b600080606660009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b158015612e3957600080fd5b505afa158015612e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7191906136ef565b90508015612de057606660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ec757600080fd5b505afa158015612edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eff91906136ef565b6066546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401612d77565b600080606760009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b158015612f8057600080fd5b505afa158015612f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb891906136ef565b90508015612de057606760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561300e57600080fd5b505afa158015613022573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304691906136ef565b6067546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401612d77565b6040805160028082526060820183526000928392919060208301908036833701905050905085816000815181106130af576130af61375f565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106130e3576130e361375f565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b81527310ed43c718714eb63d5aa57b78b54704e256024e906338ed17399061313a90879087908690309042906004016138c5565b600060405180830381600087803b15801561315457600080fd5b505af1158015613168573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131909190810190613901565b6001815181106131a2576131a261375f565b6020026020010151915050949350505050565b60405162e8e33760e81b81526001600160a01b03808616600483015284166024820152604481018390526064810182905260006084820181905260a482018190523060c48301524260e4830152907310ed43c718714eb63d5aa57b78b54704e256024e9063e8e337009061010401606060405180830381600087803b15801561323d57600080fd5b505af1158015613251573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327591906139bf565b979650505050505050565b604051635d5155ef60e11b81526001600160a01b0380851660048301528316602482015260448101829052600060648201819052608482018190523060a48301524260c48301529081907310ed43c718714eb63d5aa57b78b54704e256024e9063baa2abde9060e4016040805180830381600087803b15801561330257600080fd5b505af1158015613316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333a91906139ed565b90969095509350505050565b600054610100900460ff1661336d5760405162461bcd60e51b81526004016103d590613858565b610d8a33612935565b6060613385848460008561338f565b90505b9392505050565b6060824710156133f05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103d5565b6001600160a01b0385163b6134475760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d5565b600080866001600160a01b031685876040516134639190613a3d565b60006040518083038185875af1925050503d80600081146134a0576040519150601f19603f3d011682016040523d82523d6000602084013e6134a5565b606091505b5091509150613275828286606083156134bf575081613388565b8251156134cf5782518084602001fd5b8160405162461bcd60e51b81526004016103d59190613a59565b6000602082840312156134fb57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561353b5781516001600160a01b031687529582019590820190600101613516565b509495945050505050565b600081518084526020808501945080840160005b8381101561353b5781518752958201959082019060010161355a565b6040815260006135896040830185613502565b828103602084015261359b8185613546565b95945050505050565b6001600160a01b038116811461195a57600080fd5b6000602082840312156135cb57600080fd5b8135613388816135a4565b600080604083850312156135e957600080fd5b50508035926020909101359150565b6000806020838503121561360b57600080fd5b823567ffffffffffffffff8082111561362357600080fd5b818501915085601f83011261363757600080fd5b81358181111561364657600080fd5b8660208260051b850101111561365b57600080fd5b60209290920196919550909350505050565b60008060006060848603121561368257600080fd5b833561368d816135a4565b9250602084013561369d816135a4565b915060408401356136ad816135a4565b809150509250925092565b6020815260006133886020830184613546565b6020808252600a908201526913db9b1e481d985d5b1d60b21b604082015260600190565b60006020828403121561370157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561373857613738613708565b500290565b60008261375a57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000821982111561378857613788613708565b500190565b634e487b7160e01b600052604160045260246000fd5b6000828210156137b5576137b5613708565b500390565b60006000198214156137ce576137ce613708565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156138b557600080fd5b8151801515811461338857600080fd5b85815284602082015260a0604082015260006138e460a0830186613502565b6001600160a01b0394909416606083015250608001529392505050565b6000602080838503121561391457600080fd5b825167ffffffffffffffff8082111561392c57600080fd5b818501915085601f83011261394057600080fd5b8151818111156139525761395261378d565b8060051b604051601f19603f830116810181811085821117156139775761397761378d565b60405291825284820192508381018501918883111561399557600080fd5b938501935b828510156139b35784518452938501939285019261399a565b98975050505050505050565b6000806000606084860312156139d457600080fd5b8351925060208401519150604084015190509250925092565b60008060408385031215613a0057600080fd5b505080516020909101519092909150565b60005b83811015613a2c578181015183820152602001613a14565b83811115610ebb5750506000910152565b60008251613a4f818460208701613a11565b9190910192915050565b6020815260008251806020840152613a78816040850160208701613a11565b601f01601f1916919091016040019291505056fe000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580da2646970667358221220e84c3be10f259c9b15082e8b103563619b08c3af555a3126ad997738a500eabb64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063993f64f3116100de578063c89d5b8b11610097578063ed47d90911610071578063ed47d9091461035d578063f177eb9914610370578063f2fde38b14610385578063fbfa77cf1461039857600080fd5b8063c89d5b8b1461033a578063db2e21bc14610342578063e1ee05af1461034a57600080fd5b8063993f64f3146102c95780639a6a839e146102e4578063a7645a20146102f7578063bd244af41461030a578063c0c53b8b14610312578063c54e44eb1461032557600080fd5b80635846dc2b1161014b578063715018a611610125578063715018a61461028857806384fed5f51461029057806389a30271146102a35780638da5cb5b146102b857600080fd5b80635846dc2b146102415780636817031b146102545780636e21950f1461026757600080fd5b806302910e3b146101935780632afcf480146101cb5780633779b8db146101e05780633e8f12a4146101fb5780634631b24614610216578063484f4ea91461022c575b600080fd5b6101ae7310ed43c718714eb63d5aa57b78b54704e256024e81565b6040516001600160a01b0390911681526020015b60405180910390f35b6101de6101d93660046134e9565b6103ab565b005b6101ae737efaef62fddcca950418312c6c91aef321375a0081565b6101ae732354ef4df11afacb85a5c7f98b624072eccddbb181565b61021e61091f565b6040516101c2929190613576565b6101ae600080516020613a8d83398151915281565b6066546101ae906001600160a01b031681565b6101de6102623660046135b9565b610b72565b61027a6102753660046135d6565b610c03565b6040519081526020016101c2565b6101de610d56565b6067546101ae906001600160a01b031681565b6101ae600080516020613acd83398151915281565b6033546001600160a01b03166101ae565b6101ae73ec6557348085aa57c72514d67070dc863c0a5a8c81565b6101de6102f23660046135f8565b610d8c565b61027a6103053660046134e9565b610ec1565b61027a610ee2565b6101de61032036600461366d565b610f5a565b6101ae600080516020613aad83398151915281565b61027a611217565b6101de611450565b6065546101ae906001600160a01b031681565b61027a61036b3660046134e9565b611590565b61037861178d565b6040516101c291906136b8565b6101de6103933660046135b9565b6118c2565b6069546101ae906001600160a01b031681565b6069546001600160a01b031633146103de5760405162461bcd60e51b81526004016103d5906136cb565b60405180910390fd5b60695461040590600080516020613aad833981519152906001600160a01b0316308461195d565b6040516370a0823160e01b8152306004820152600080516020613aad833981519152906370a082319060240160206040518083038186803b15801561044957600080fd5b505afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048191906136ef565b905060008061048e6119c8565b91509150600061049c611a5f565b90506000826104ab858761371e565b6104b5919061373d565b826002815181106104c8576104c861375f565b6020026020010151836001815181106104e3576104e361375f565b6020026020010151846000815181106104fe576104fe61375f565b60200260200101516105109190613775565b61051a9190613775565b6105249190613775565b6040805160038082526080820190925291925060009182916020820160608036833701905050905060005b600381101561061b576000612710606883815481106105705761057061375f565b906000526020600020015486610586919061371e565b610590919061373d565b9050808683815181106105a5576105a561375f565b602002602001015110156106085760008683815181106105c7576105c761375f565b6020026020010151826105da91906137a3565b9050808484815181106105ef576105ef61375f565b60209081029190910101526106048186613775565b9450505b5080610613816137ba565b91505061054f565b50604080516003808252608082019092526000916020820160608036833701905050905060005b60038110156106aa578383828151811061065e5761065e61375f565b60200260200101518a610671919061371e565b61067b919061373d565b82828151811061068d5761068d61375f565b6020908102919091010152806106a2816137ba565b915050610642565b506000816000815181106106c0576106c061375f565b602002602001015111156106f1576106f1816000815181106106e4576106e461375f565b6020026020010151611af9565b6000816001815181106107065761070661375f565b60200260200101511115610737576107378160018151811061072a5761072a61375f565b6020026020010151611c88565b60008160028151811061074c5761074c61375f565b602002602001015111156107df576040516370a0823160e01b81523060048201526107df90600080516020613aad833981519152906370a082319060240160206040518083038186803b1580156107a257600080fd5b505afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da91906136ef565b611e08565b7ffe1569189b90a5384ab10f6f852b375150f2bfc96432e2ec3a161f817fe2bcce856000815181106108135761081361375f565b60200260200101518660018151811061082e5761082e61375f565b6020026020010151876002815181106108495761084961375f565b6020026020010151604051610871939291909283526020830191909152604082015260600190565b60405180910390a17f78ab7e568a4cc9615209aa598a68edf063eecc26e7267dbe086b18b4f299cddc60686000815481106108ae576108ae61375f565b906000526020600020015460686001815481106108cd576108cd61375f565b906000526020600020015460686002815481106108ec576108ec61375f565b60009182526020918290200154604080519485529184019290925282015260600160405180910390a15050505050505050565b606080600061092c61178d565b6040805160038082526080820190925291925060208201606080368337019050509250600080516020613aad833981519152836000815181106109715761097161375f565b60200260200101906001600160a01b031690816001600160a01b031681525050600080516020613acd833981519152836001815181106109b3576109b361375f565b60200260200101906001600160a01b031690816001600160a01b031681525050600080516020613a8d833981519152836002815181106109f5576109f561375f565b6001600160a01b039290921660209283029190910182015260408051600380825260808201909252918201606080368337019050509150600281600181518110610a4157610a4161375f565b602002602001015182600081518110610a5c57610a5c61375f565b6020026020010151610a6e9190613775565b610a78919061373d565b82600081518110610a8b57610a8b61375f565b602002602001018181525050600281600281518110610aac57610aac61375f565b602002602001015182600081518110610ac757610ac761375f565b6020026020010151610ad99190613775565b610ae3919061373d565b82600181518110610af657610af661375f565b602002602001018181525050600281600281518110610b1757610b1761375f565b602002602001015182600181518110610b3257610b3261375f565b6020026020010151610b449190613775565b610b4e919061373d565b82600281518110610b6157610b6161375f565b602002602001018181525050509091565b6033546001600160a01b03163314610b9c5760405162461bcd60e51b81526004016103d5906137d5565b6069546001600160a01b031615610be15760405162461bcd60e51b815260206004820152600960248201526815985d5b1d081cd95d60ba1b60448201526064016103d5565b606980546001600160a01b0319166001600160a01b0392909216919091179055565b6069546000906001600160a01b03163314610c305760405162461bcd60e51b81526004016103d5906136cb565b670de0b6b3a7640000821115610c745760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103d5565b82610c8757610c8282612045565b610cab565b8260011415610c9957610c82826122f2565b8260021415610cab57610cab8261259b565b6040516370a0823160e01b8152306004820152600080516020613aad833981519152906370a082319060240160206040518083038186803b158015610cef57600080fd5b505afa158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2791906136ef565b606954909150610d5090600080516020613aad833981519152906001600160a01b031683612900565b92915050565b6033546001600160a01b03163314610d805760405162461bcd60e51b81526004016103d5906137d5565b610d8a6000612935565b565b6033546001600160a01b03163314610db65760405162461bcd60e51b81526004016103d5906137d5565b60685481908114610df95760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a590818dbdd5b9d609a1b60448201526064016103d5565b6000805b82811015610e7557848482818110610e1757610e1761375f565b9050602002013560688281548110610e3157610e3161375f565b600091825260209091200155848482818110610e4f57610e4f61375f565b9050602002013582610e619190613775565b915080610e6d816137ba565b915050610dfd565b506127108114610ebb5760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103830b930b6b2ba32b960791b60448201526064016103d5565b50505050565b60688181548110610ed157600080fd5b600091825260209091200154905081565b600080610eed611a5f565b905080600281518110610f0257610f0261375f565b602002602001015181600181518110610f1d57610f1d61375f565b602002602001015182600081518110610f3857610f3861375f565b6020026020010151610f4a9190613775565b610f549190613775565b91505090565b6000610f666001612987565b90508015610f7e576000805461ff0019166101001790555b610f86612a0f565b606880546001818101835560008390526117707fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c2209775392830155825480820184556107d090830181905583549182019093550155606580546001600160a01b038087166001600160a01b031992831617909255606680548684169083161790556067805492851692909116919091179055611044600080516020613aad8339815191527310ed43c718714eb63d5aa57b78b54704e256024e600019612a3e565b611073600080516020613acd8339815191527310ed43c718714eb63d5aa57b78b54704e256024e600019612a3e565b6110a2600080516020613a8d8339815191527310ed43c718714eb63d5aa57b78b54704e256024e600019612a3e565b6065546110d09073ec6557348085aa57c72514d67070dc863c0a5a8c906001600160a01b0316600019612a3e565b6066546110fe90737efaef62fddcca950418312c6c91aef321375a00906001600160a01b0316600019612a3e565b60675461112c90732354ef4df11afacb85a5c7f98b624072eccddbb1906001600160a01b0316600019612a3e565b61116173ec6557348085aa57c72514d67070dc863c0a5a8c7310ed43c718714eb63d5aa57b78b54704e256024e600019612a3e565b611196737efaef62fddcca950418312c6c91aef321375a007310ed43c718714eb63d5aa57b78b54704e256024e600019612a3e565b6111cb732354ef4df11afacb85a5c7f98b624072eccddbb17310ed43c718714eb63d5aa57b78b54704e256024e600019612a3e565b8015610ebb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150505050565b60008061122261178d565b90506000816002815181106112395761123961375f565b6020026020010151606760009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561128f57600080fd5b505afa1580156112a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c791906136ef565b6112d1919061371e565b826001815181106112e4576112e461375f565b6020026020010151606660009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133a57600080fd5b505afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137291906136ef565b61137c919061371e565b8360008151811061138f5761138f61375f565b6020026020010151606560009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e557600080fd5b505afa1580156113f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141d91906136ef565b611427919061371e565b6114319190613775565b61143b9190613775565b90506114496127108261373d565b9250505090565b6069546001600160a01b0316331461147a5760405162461bcd60e51b81526004016103d5906136cb565b61148b670de0b6b3a7640000612045565b61149c670de0b6b3a76400006122f2565b6114ad670de0b6b3a764000061259b565b6040516370a0823160e01b8152306004820152600090600080516020613aad833981519152906370a082319060240160206040518083038186803b1580156114f457600080fd5b505afa158015611508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152c91906136ef565b9050801561155a5760695461155a90600080516020613aad833981519152906001600160a01b031683612900565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c9060200160405180910390a150565b6069546000906001600160a01b031633146115bd5760405162461bcd60e51b81526004016103d5906136cb565b670de0b6b3a76400008211156116015760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103d5565b6040516370a0823160e01b8152306004820152600090600080516020613aad833981519152906370a082319060240160206040518083038186803b15801561164857600080fd5b505afa15801561165c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168091906136ef565b905061168b83612045565b611694836122f2565b61169d8361259b565b6040516370a0823160e01b81523060048201528190600080516020613aad833981519152906370a082319060240160206040518083038186803b1580156116e357600080fd5b505afa1580156116f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171b91906136ef565b61172591906137a3565b60695490925061174e90600080516020613aad833981519152906001600160a01b031684612900565b60408051848152602081018490527f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8910160405180910390a150919050565b60606000611799611a5f565b90506000816002815181106117b0576117b061375f565b6020026020010151826001815181106117cb576117cb61375f565b6020026020010151836000815181106117e6576117e661375f565b60200260200101516117f89190613775565b6118029190613775565b604080516003808252608082019092529192506020820160608036833701905050925060005b60038110156118bc57811561186e578161271084838151811061184d5761184d61375f565b602002602001015161185f919061371e565b611869919061373d565b61188d565b606881815481106118815761188161375f565b90600052602060002001545b84828151811061189f5761189f61375f565b6020908102919091010152806118b4816137ba565b915050611828565b50505090565b6033546001600160a01b031633146118ec5760405162461bcd60e51b81526004016103d5906137d5565b6001600160a01b0381166119515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d5565b61195a81612935565b50565b6040516001600160a01b0380851660248301528316604482015260648101829052610ebb9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612b62565b600080600073b97ad0e74fa7d920791e90258a6e2085088b43206001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1a57600080fd5b505afa158015611a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5291906136ef565b936305f5e1009350915050565b60408051600380825260808201909252606091602082018380368337019050509050611a89612c34565b81600081518110611a9c57611a9c61375f565b602002602001018181525050611ab0612de8565b81600181518110611ac357611ac361375f565b602002602001018181525050611ad7612f2f565b81600281518110611aea57611aea61375f565b60200260200101818152505090565b6000611b0660028361373d565b9050611b46600080516020613aad833981519152600080516020613acd833981519152836064611b3782606261371e565b611b41919061373d565b613076565b506040516370a0823160e01b8152306004820152600090600080516020613acd833981519152906370a082319060240160206040518083038186803b158015611b8e57600080fd5b505afa158015611ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc691906136ef565b90506000611bf2600080516020613aad833981519152600080516020613acd83398151915285856131b5565b60655460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b158015611c3957600080fd5b505af1158015611c4d573d6000803e3d6000fd5b505060408051878152602081018590527fa5747745c82ade5eeafbc0c66155d3fdf58650ec41cb08098b40c8dabf8a8d3b9350019050611209565b6000611c9560028361373d565b9050611cc6600080516020613aad833981519152600080516020613a8d833981519152836064611b3782606261371e565b506040516370a0823160e01b8152306004820152600090600080516020613a8d833981519152906370a082319060240160206040518083038186803b158015611d0e57600080fd5b505afa158015611d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4691906136ef565b90506000611d72600080516020613aad833981519152600080516020613a8d83398151915285856131b5565b60665460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b158015611db957600080fd5b505af1158015611dcd573d6000803e3d6000fd5b505060408051878152602081018590527fa4e400572a2a0f1abc3ceb9c160f7c42f3e397510b1ee4c6929cb3000bfc8a439350019050611209565b6000611e1560028361373d565b9050611e46600080516020613aad833981519152600080516020613acd833981519152836064611b3782606261371e565b50611e76600080516020613aad833981519152600080516020613a8d833981519152836064611b3782606261371e565b506040516370a0823160e01b8152306004820152600090600080516020613acd833981519152906370a082319060240160206040518083038186803b158015611ebe57600080fd5b505afa158015611ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef691906136ef565b6040516370a0823160e01b8152306004820152909150600090600080516020613a8d833981519152906370a082319060240160206040518083038186803b158015611f4057600080fd5b505afa158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7891906136ef565b90506000611fa4600080516020613acd833981519152600080516020613a8d83398151915285856131b5565b60675460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b158015611feb57600080fd5b505af1158015611fff573d6000803e3d6000fd5b505060408051888152602081018590527fa1605bcb566b8ee1a15b4f2083a61e6e23ce065f38cef3e8b4dd8783dab0fbd993500190505b60405180910390a15050505050565b6065546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009184916001600160a01b0316906370a082319060240160206040518083038186803b15801561209557600080fd5b505afa1580156120a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cd91906136ef565b6120d7919061371e565b6120e1919061373d565b905080156122ee57606554604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561212f57600080fd5b505af1158015612143573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526000925073ec6557348085aa57c72514d67070dc863c0a5a8c91506370a082319060240160206040518083038186803b15801561219457600080fd5b505afa1580156121a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cc91906136ef565b905060006121f7600080516020613aad833981519152600080516020613acd83398151915284613280565b506040516370a0823160e01b8152306004820152909150600090600080516020613acd833981519152906370a082319060240160206040518083038186803b15801561224257600080fd5b505afa158015612256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227a91906136ef565b90506122ab600080516020613acd833981519152600080516020613aad833981519152836064611b3782606261371e565b6122b59083613775565b60408051858152602081018390529193507fa75b70fca861358b5d9e6ef8d7133844f791f90824a43b88a3430d2f2148d2879101612036565b5050565b6066546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009184916001600160a01b0316906370a082319060240160206040518083038186803b15801561234257600080fd5b505afa158015612356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237a91906136ef565b612384919061371e565b61238e919061373d565b905080156122ee57606654604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156123dc57600080fd5b505af11580156123f0573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015260009250737efaef62fddcca950418312c6c91aef321375a0091506370a082319060240160206040518083038186803b15801561244157600080fd5b505afa158015612455573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247991906136ef565b905060006124a4600080516020613aad833981519152600080516020613a8d83398151915284613280565b506040516370a0823160e01b8152306004820152909150600090600080516020613a8d833981519152906370a082319060240160206040518083038186803b1580156124ef57600080fd5b505afa158015612503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252791906136ef565b9050612558600080516020613a8d833981519152600080516020613aad833981519152836064611b3782606261371e565b6125629083613775565b60408051858152602081018390529193507f88d437bfe011784cd9b1dba7765f54df616437217b5ba8f088a0302a658f1f6b9101612036565b6067546040516370a0823160e01b8152306004820152600091670de0b6b3a76400009184916001600160a01b0316906370a082319060240160206040518083038186803b1580156125eb57600080fd5b505afa1580156125ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262391906136ef565b61262d919061371e565b612637919061373d565b905080156122ee57606754604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561268557600080fd5b505af1158015612699573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015260009250732354ef4df11afacb85a5c7f98b624072eccddbb191506370a082319060240160206040518083038186803b1580156126ea57600080fd5b505afa1580156126fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272291906136ef565b905061274b600080516020613acd833981519152600080516020613a8d83398151915283613280565b50506040516370a0823160e01b8152306004820152600090600080516020613acd833981519152906370a082319060240160206040518083038186803b15801561279457600080fd5b505afa1580156127a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cc91906136ef565b6040516370a0823160e01b8152306004820152909150600090600080516020613a8d833981519152906370a082319060240160206040518083038186803b15801561281657600080fd5b505afa15801561282a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284e91906136ef565b90506000612881600080516020613acd833981519152600080516020613aad833981519152856064611b3782606261371e565b90506128b2600080516020613a8d833981519152600080516020613aad833981519152846064611b3782606261371e565b6128bc9082613775565b60408051868152602081018390529192507f9bf4f058d2e48350e0c988966a158671879246ffbe404230e80f4d3f669a931d910160405180910390a1505050505050565b6040516001600160a01b03831660248201526044810182905261293090849063a9059cbb60e01b90606401611991565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff16156129ce578160ff1660011480156129aa5750303b155b6129c65760405162461bcd60e51b81526004016103d59061380a565b506000919050565b60005460ff8084169116106129f55760405162461bcd60e51b81526004016103d59061380a565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff16612a365760405162461bcd60e51b81526004016103d590613858565b610d8a613346565b801580612ac75750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612a8d57600080fd5b505afa158015612aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac591906136ef565b155b612b325760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016103d5565b6040516001600160a01b03831660248201526044810182905261293090849063095ea7b360e01b90606401611991565b6000612bb7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166133769092919063ffffffff16565b8051909150156129305780806020019051810190612bd591906138a3565b6129305760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d5565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b158015612c8557600080fd5b505afa158015612c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbd91906136ef565b90508015612de057606560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d1357600080fd5b505afa158015612d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4b91906136ef565b6065546040516370a0823160e01b81523060048201526001600160a01b03909116906370a08231906024015b60206040518083038186803b158015612d8f57600080fd5b505afa158015612da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc791906136ef565b612dd1908361371e565b612ddb919061373d565b610f54565b600091505090565b600080606660009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b158015612e3957600080fd5b505afa158015612e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7191906136ef565b90508015612de057606660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ec757600080fd5b505afa158015612edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eff91906136ef565b6066546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401612d77565b600080606760009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b158015612f8057600080fd5b505afa158015612f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb891906136ef565b90508015612de057606760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561300e57600080fd5b505afa158015613022573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304691906136ef565b6067546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401612d77565b6040805160028082526060820183526000928392919060208301908036833701905050905085816000815181106130af576130af61375f565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106130e3576130e361375f565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b81527310ed43c718714eb63d5aa57b78b54704e256024e906338ed17399061313a90879087908690309042906004016138c5565b600060405180830381600087803b15801561315457600080fd5b505af1158015613168573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131909190810190613901565b6001815181106131a2576131a261375f565b6020026020010151915050949350505050565b60405162e8e33760e81b81526001600160a01b03808616600483015284166024820152604481018390526064810182905260006084820181905260a482018190523060c48301524260e4830152907310ed43c718714eb63d5aa57b78b54704e256024e9063e8e337009061010401606060405180830381600087803b15801561323d57600080fd5b505af1158015613251573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327591906139bf565b979650505050505050565b604051635d5155ef60e11b81526001600160a01b0380851660048301528316602482015260448101829052600060648201819052608482018190523060a48301524260c48301529081907310ed43c718714eb63d5aa57b78b54704e256024e9063baa2abde9060e4016040805180830381600087803b15801561330257600080fd5b505af1158015613316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333a91906139ed565b90969095509350505050565b600054610100900460ff1661336d5760405162461bcd60e51b81526004016103d590613858565b610d8a33612935565b6060613385848460008561338f565b90505b9392505050565b6060824710156133f05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103d5565b6001600160a01b0385163b6134475760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d5565b600080866001600160a01b031685876040516134639190613a3d565b60006040518083038185875af1925050503d80600081146134a0576040519150601f19603f3d011682016040523d82523d6000602084013e6134a5565b606091505b5091509150613275828286606083156134bf575081613388565b8251156134cf5782518084602001fd5b8160405162461bcd60e51b81526004016103d59190613a59565b6000602082840312156134fb57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561353b5781516001600160a01b031687529582019590820190600101613516565b509495945050505050565b600081518084526020808501945080840160005b8381101561353b5781518752958201959082019060010161355a565b6040815260006135896040830185613502565b828103602084015261359b8185613546565b95945050505050565b6001600160a01b038116811461195a57600080fd5b6000602082840312156135cb57600080fd5b8135613388816135a4565b600080604083850312156135e957600080fd5b50508035926020909101359150565b6000806020838503121561360b57600080fd5b823567ffffffffffffffff8082111561362357600080fd5b818501915085601f83011261363757600080fd5b81358181111561364657600080fd5b8660208260051b850101111561365b57600080fd5b60209290920196919550909350505050565b60008060006060848603121561368257600080fd5b833561368d816135a4565b9250602084013561369d816135a4565b915060408401356136ad816135a4565b809150509250925092565b6020815260006133886020830184613546565b6020808252600a908201526913db9b1e481d985d5b1d60b21b604082015260600190565b60006020828403121561370157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561373857613738613708565b500290565b60008261375a57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000821982111561378857613788613708565b500190565b634e487b7160e01b600052604160045260246000fd5b6000828210156137b5576137b5613708565b500390565b60006000198214156137ce576137ce613708565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156138b557600080fd5b8151801515811461338857600080fd5b85815284602082015260a0604082015260006138e460a0830186613502565b6001600160a01b0394909416606083015250608001529392505050565b6000602080838503121561391457600080fd5b825167ffffffffffffffff8082111561392c57600080fd5b818501915085601f83011261394057600080fd5b8151818111156139525761395261378d565b8060051b604051601f19603f830116810181811085821117156139775761397761378d565b60405291825284820192508381018501918883111561399557600080fd5b938501935b828510156139b35784518452938501939285019261399a565b98975050505050505050565b6000806000606084860312156139d457600080fd5b8351925060208401519150604084015190509250925092565b60008060408385031215613a0057600080fd5b505080516020909101519092909150565b60005b83811015613a2c578181015183820152602001613a14565b83811115610ebb5750506000910152565b60008251613a4f818460208701613a11565b9190910192915050565b6020815260008251806020840152613a78816040850160208701613a11565b601f01601f1916919091016040019291505056fe000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580da2646970667358221220e84c3be10f259c9b15082e8b103563619b08c3af555a3126ad997738a500eabb64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/lci/LCIStrategy.sol:LCIStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/lci/LCIStrategy.sol:LCIStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1657,
        "contract": "contracts/lci/LCIStrategy.sol:LCIStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/lci/LCIStrategy.sol:LCIStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/lci/LCIStrategy.sol:LCIStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12094,
        "contract": "contracts/lci/LCIStrategy.sol:LCIStrategy",
        "label": "USDTUSDCVault",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IL2Vault)12040"
      },
      {
        "astId": 12097,
        "contract": "contracts/lci/LCIStrategy.sol:LCIStrategy",
        "label": "USDTBUSDVault",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IL2Vault)12040"
      },
      {
        "astId": 12100,
        "contract": "contracts/lci/LCIStrategy.sol:LCIStrategy",
        "label": "USDCBUSDVault",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IL2Vault)12040"
      },
      {
        "astId": 12106,
        "contract": "contracts/lci/LCIStrategy.sol:LCIStrategy",
        "label": "targetPercentages",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12108,
        "contract": "contracts/lci/LCIStrategy.sol:LCIStrategy",
        "label": "vault",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IL2Vault)12040": {
        "encoding": "inplace",
        "label": "contract IL2Vault",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}