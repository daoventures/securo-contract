{
  "address": "0x9f0BBeaa38688C7066F672F6455Ee8cdee8988D5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WMATICAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestWMATIC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "RemoveToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetAdminWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryWallet",
          "type": "address"
        }
      ],
      "name": "SetTreasuryWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WMATICAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawWMATIC",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20UpgradeableExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20UpgradeableExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WMATIC",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WMATICVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTokenCompositionPerc",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEachPoolInUSD",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pools",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDTPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_SWAP_BASE_TOKEN",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDTAmts",
          "type": "uint256[]"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "_WMATICVault",
          "type": "address"
        }
      ],
      "name": "setWMATICVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7244ab68157710f0f3b83a401e092bf8204b977b4e49c9806f28dd9883647678",
  "receipt": {
    "to": null,
    "from": "0x3f68A3c1023d736D8Be867CA49Cb18c543373B99",
    "contractAddress": "0x9f0BBeaa38688C7066F672F6455Ee8cdee8988D5",
    "transactionIndex": 18,
    "gasUsed": "2981242",
    "logsBloom": "0x
    "blockHash": "0x620a9fada30a1b2f176196e192ef9c9a00e1904283fdc10a541d7a045e91439a",
    "transactionHash": "0x7244ab68157710f0f3b83a401e092bf8204b977b4e49c9806f28dd9883647678",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 30980284,
        "transactionHash": "0x7244ab68157710f0f3b83a401e092bf8204b977b4e49c9806f28dd9883647678",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003f68a3c1023d736d8be867ca49cb18c543373b99",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000021533b07e63784200000000000000000000000000000000000000000000000056f066d19c62fe6f0000000000000000000000000000000000000000000002a9dad90a602158aa1700000000000000000000000000000000000000000000000054db33211dff862d0000000000000000000000000000000000000000000002a9dcee3e109fbc2259",
        "logIndex": 89,
        "blockHash": "0x620a9fada30a1b2f176196e192ef9c9a00e1904283fdc10a541d7a045e91439a"
      }
    ],
    "blockNumber": 30980284,
    "cumulativeGasUsed": "6892032",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "18531906b263dc82e5280e82b40df4ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WMATICAmt\",\"type\":\"uint256\"}],\"name\":\"InvestWMATIC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdminWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"SetTreasuryWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WMATICAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawWMATIC\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SWAP_BASE_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20UpgradeableExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20UpgradeableExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WMATIC\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WMATICVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenCompositionPerc\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEachPoolInUSD\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SWAP_BASE_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDTAmts\",\"type\":\"uint256[]\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"_WMATICVault\",\"type\":\"address\"}],\"name\":\"setWMATICVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawFromPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getUSDTPriceInUSD()\":{\"returns\":{\"_0\":\"the price of USDT in USD.\"}},\"invest(address[],uint256[])\":{\"params\":{\"_USDTAmts\":\"amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bni/strategy/MaticBNIStrategy.sol\":\"MaticBNIStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"},\"contracts/bni/strategy/BNIStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../priceOracle/IPriceOracle.sol\\\";\\nimport \\\"../../../interfaces/IERC20UpgradeableExt.sol\\\";\\nimport \\\"../../../interfaces/IRouter.sol\\\";\\nimport \\\"../../../libs/Token.sol\\\";\\n\\ncontract BNIStrategy is OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\\n\\n    IRouter public router;\\n    IERC20UpgradeableExt public SWAP_BASE_TOKEN; // It has same role with WETH on Ethereum Swaps. Most of tokens have been paired with this token.\\n    IERC20UpgradeableExt public USDT;\\n    uint8 usdtDecimals;\\n\\n    uint constant DENOMINATOR = 10000;\\n\\n    address public treasuryWallet;\\n    address public admin;\\n    address public vault;\\n    IPriceOracle public priceOracle;\\n\\n    address[] public tokens;\\n    mapping(address => uint) public pid; // Pool indices in tokens array\\n\\n    event AddToken(address token, uint pid);\\n    event RemoveToken(address token, uint pid);\\n    event Withdraw(uint sharePerc, uint USDTAmt);\\n    event EmergencyWithdraw(uint USDTAmt);\\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\\n    event SetAdminWallet(address oldAdmin, address newAdmin);\\n\\n    modifier onlyVault {\\n        require(msg.sender == vault, \\\"Only vault\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _treasuryWallet, address _admin,\\n        address _priceOracle,\\n        address _router, address _SWAP_BASE_TOKEN,\\n        address _USDT, address _token0\\n    ) public virtual initializer {\\n        require(_router != address(0), \\\"Invalid router\\\");\\n        require(_SWAP_BASE_TOKEN != address(0), \\\"Invalid SWAP_BASE_TOKEN\\\");\\n        require(_USDT != address(0), \\\"Invalid USDT\\\");\\n        require(_token0 != address(0), \\\"Invalid token0\\\");\\n        __Ownable_init();\\n\\n        treasuryWallet = _treasuryWallet;\\n        admin = _admin;\\n        priceOracle = IPriceOracle(_priceOracle);\\n        router = IRouter(_router);\\n        SWAP_BASE_TOKEN = IERC20UpgradeableExt(_SWAP_BASE_TOKEN);\\n\\n        USDT = IERC20UpgradeableExt(_USDT);\\n        usdtDecimals = USDT.decimals();\\n        require(6 <= usdtDecimals, \\\"USDT decimals must >= 6\\\");\\n\\n        tokens.push(_token0);\\n        updatePid();\\n\\n        USDT.safeApprove(address(router), type(uint).max);\\n        IERC20UpgradeableExt(_token0).safeApprove(address(router), type(uint).max);\\n    }\\n\\n    function updatePid() internal {\\n        address[] memory _tokens = tokens;\\n\\n        uint tokenCnt = _tokens.length;\\n        for (uint i = 0; i < tokenCnt; i ++) {\\n            pid[_tokens[i]] = i;\\n        }\\n    }\\n\\n    function addToken(address _token) external onlyOwner {\\n        uint _pid = pid[_token];\\n        require ((_pid == 0 && _token != tokens[0]), \\\"Already added\\\");\\n\\n        tokens.push(_token);\\n        _pid = tokens.length-1;\\n        pid[_token] = _pid;\\n\\n        if (IERC20UpgradeableExt(_token).allowance(address(this), address(router)) == 0) {\\n            IERC20UpgradeableExt(_token).safeApprove(address(router), type(uint).max);\\n        }\\n        emit AddToken(_token, _pid);\\n    }\\n\\n    function removeToken(uint _pid) external onlyOwner {\\n        uint tokenCnt = tokens.length;\\n        require(_pid < tokenCnt, \\\"Invalid pid\\\");\\n        uint pool = _getPoolInUSD(_pid);\\n        require(pool == 0, \\\"Pool is not empty\\\");\\n\\n        address _token = tokens[_pid];\\n        tokens[_pid] = tokens[tokenCnt-1];\\n        tokens.pop();\\n\\n        pid[_token] = 0;\\n        updatePid();\\n\\n        emit RemoveToken(_token, _pid);\\n    }\\n\\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\\n    function invest(address[] memory _tokens, uint[] memory _USDTAmts) external onlyVault {\\n        uint poolCnt = _tokens.length;\\n        uint USDTAmt;\\n        uint[] memory USDTAmts = new uint[](tokens.length);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            uint amount = _USDTAmts[i];\\n            USDTAmt += amount;\\n            uint _pid = pid[_tokens[i]];\\n            USDTAmts[_pid] += amount;\\n        }\\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\\n\\n        _invest(USDTAmts);\\n    }\\n\\n    function _invest(uint[] memory _USDTAmts) internal virtual {\\n        uint poolCnt = _USDTAmts.length;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            address token = tokens[i];\\n            if (token == address(USDT)) continue;\\n\\n            uint USDTAmt = _USDTAmts[i];\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(token);\\n            uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\\n            uint numerator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\\n            uint denominator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\\n            uint amountOutMin = USDTAmt * numerator * 95 / (denominator * 100);\\n\\n            if (token == address(SWAP_BASE_TOKEN)) {\\n                _swap(address(USDT), token, USDTAmt, amountOutMin);\\n            } else {\\n                _swap2(address(USDT), token, USDTAmt, amountOutMin);\\n            }\\n        }\\n    }\\n\\n    function withdrawPerc(uint _sharePerc) external onlyVault returns (uint USDTAmt) {\\n        require(_sharePerc <= 1e18, \\\"Over 100%\\\");\\n        USDTAmt = _withdraw(_sharePerc);\\n        USDT.safeTransfer(vault, USDTAmt);\\n        emit Withdraw(_sharePerc, USDTAmt);\\n    }\\n\\n    function _withdraw(uint _sharePerc) internal virtual returns (uint USDTAmt) {\\n        uint poolCnt = tokens.length;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            USDTAmt += _withdrawFromPool(i, _sharePerc);\\n        }\\n    }\\n\\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual returns (uint USDTAmt) {\\n        IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\\n        uint amount = token.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            if (address(token) == address(USDT)) {\\n                USDTAmt = amount;\\n            } else {\\n                USDTAmt = _swapForUSDT(address(token), amount);\\n            }\\n        }\\n    }\\n\\n    function _swapForUSDT(address token, uint amount) internal returns (uint USDTAmt) {\\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n        (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\\n        uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\\n        uint numerator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\\n        uint denominator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\\n        uint amountOutMin = amount * numerator * 95 / (denominator * 100);\\n\\n        if (address(token) == address(SWAP_BASE_TOKEN)) {\\n            USDTAmt = _swap(address(token), address(USDT), amount, amountOutMin);\\n        } else{\\n            USDTAmt = _swap2(address(token), address(USDT), amount, amountOutMin);\\n        }\\n    }\\n\\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = _tokenB;\\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[1];\\n    }\\n\\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](3);\\n        path[0] = _tokenA;\\n        path[1] = address(SWAP_BASE_TOKEN);\\n        path[2] = _tokenB;\\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[2];\\n    }\\n\\n    function withdrawFromPool(uint _pid, uint _sharePerc) external onlyVault returns (uint USDTAmt) {\\n        require(_sharePerc <= 1e18, \\\"Over 100%\\\");\\n        USDTAmt = _withdrawFromPool(_pid, _sharePerc);\\n        USDT.safeTransfer(vault, USDTAmt);\\n    }\\n\\n    function emergencyWithdraw() external onlyVault {\\n        // 1e18 == 100% of share\\n        uint USDTAmt = _withdraw(1e18);\\n        if (0 < USDTAmt) {\\n            USDT.safeTransfer(vault, USDTAmt);\\n        }\\n        emit EmergencyWithdraw(USDTAmt);\\n    }\\n\\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\\n        address oldTreasuryWallet = treasuryWallet;\\n        treasuryWallet = _treasuryWallet;\\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        address oldAdmin = admin;\\n        admin = _admin;\\n        emit SetAdminWallet(oldAdmin, _admin);\\n    }\\n\\n    function setVault(address _vault) external onlyOwner {\\n        require(vault == address(0), \\\"Vault set\\\");\\n        vault = _vault;\\n    }\\n\\n    /// @return the price of USDT in USD.\\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\\n        return priceOracle.getAssetPrice(address(USDT));\\n    }\\n\\n    function getEachPoolInUSD() public view returns (address[] memory, uint[] memory pools) {\\n        return (tokens, _getEachPoolInUSD());\\n    }\\n\\n    function _getEachPoolInUSD() private view returns (uint[] memory pools) {\\n        uint poolCnt = tokens.length;\\n        pools = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            pools[i] = _getPoolInUSD(i);\\n        }\\n    }\\n\\n    function _getPoolInUSD(uint _pid) internal view virtual returns (uint pool) {\\n        IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\\n        uint amount = token.balanceOf(address(this));\\n        if (0 < amount) {\\n            (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\\n            uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\\n            pool = Token.changeDecimals(amount, tokenDecimals, 18) * TOKENPriceInUSD / (10 ** (TOKENPriceDecimals));\\n        }\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint) {\\n        uint[] memory pools = _getEachPoolInUSD();\\n        uint poolCnt = pools.length;\\n        uint allPool;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n        return allPool;\\n    }\\n\\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory, uint[] memory percentages) {\\n        uint[] memory pools = _getEachPoolInUSD();\\n        uint poolCnt = pools.length;\\n        uint allPool;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n\\n        uint defaultTargetPerc = poolCnt == 0 ? 0 : DENOMINATOR / poolCnt;\\n        percentages = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            percentages[i] = allPool == 0 ? defaultTargetPerc : pools[i] * DENOMINATOR / allPool;\\n        }\\n        return (tokens, percentages);\\n    }\\n\\n    function getAPR() public view virtual returns (uint) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[40] private __gap;\\n}\\n\",\"keccak256\":\"0x71114804592fdd171a759b0c5c44ddedd4ef8f7b06f9bb6798a6dd37827b4ec7\",\"license\":\"MIT\"},\"contracts/bni/strategy/MaticBNIStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./BNIStrategy.sol\\\";\\nimport \\\"../../../interfaces/IL2Vault.sol\\\";\\n\\ncontract MaticBNIStrategy is BNIStrategy {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IERC20Upgradeable public constant WMATIC = IERC20Upgradeable(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\\n\\n    IL2Vault public WMATICVault;\\n\\n    event InvestWMATIC(uint USDTAmt, uint WMATICAmt);\\n    event WithdrawWMATIC(uint WMATICAmt, uint USDTAmt);\\n\\n    function setWMATICVault(IL2Vault _WMATICVault) external onlyOwner {\\n        WMATICVault = _WMATICVault;\\n        if (WMATIC.allowance(address(this), address(WMATICVault)) == 0) {\\n            WMATIC.safeApprove(address(WMATICVault), type(uint).max);\\n        }\\n    }\\n\\n    function _investWMATIC(uint USDTAmt) private {\\n        uint WMATICAmt = WMATIC.balanceOf(address(this));\\n        if (WMATICAmt > 0) {\\n            WMATICVault.deposit(WMATICAmt);\\n            emit InvestWMATIC(USDTAmt, WMATICAmt);\\n        }\\n    }\\n\\n    function _invest(uint[] memory _USDTAmts) internal virtual override {\\n        super._invest(_USDTAmts);\\n\\n        uint poolCnt = _USDTAmts.length;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            address token = tokens[i];\\n            if (token == address(WMATIC)) {\\n                _investWMATIC(_USDTAmts[i]);\\n            }\\n        }\\n    }\\n\\n    function _withdrawWMATIC(uint _sharePerc) private returns (uint USDTAmt) {\\n        uint amount = WMATICVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            WMATICVault.withdraw(amount);\\n            uint WMATICAmt = WMATIC.balanceOf(address(this));\\n            USDTAmt = _swapForUSDT(address(WMATIC), WMATICAmt);\\n            emit WithdrawWMATIC(WMATICAmt, USDTAmt);\\n        }\\n    }\\n\\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual override returns (uint USDTAmt) {\\n        address token = tokens[_pid];\\n        if (token == address(WMATIC)) {\\n            USDTAmt = _withdrawWMATIC(_sharePerc);\\n        } else {\\n            USDTAmt = super._withdrawFromPool(_pid, _sharePerc);\\n        }\\n    }\\n\\n    function getWMATICPoolInUSD() private view  returns (uint) {\\n        uint amt = WMATICVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * WMATICVault.balanceOf(address(this)) / WMATICVault.totalSupply(); //to exclude L1 deposits from other addresses\\n    }\\n\\n    function _getPoolInUSD(uint _pid) internal view virtual override returns (uint pool) {\\n        address token = tokens[_pid];\\n        if (token == address(WMATIC)) {\\n            pool = getWMATICPoolInUSD();\\n        } else {\\n            pool = super._getPoolInUSD(_pid);\\n        }\\n    }\\n\\n    function getAPR() public view override returns (uint) {\\n        (address[] memory _tokens, uint[] memory perc) = getCurrentTokenCompositionPerc();\\n        uint allApr;\\n        uint poolCnt = _tokens.length;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            address token = _tokens[i];\\n            if (token == address(WMATIC)) {\\n                allApr += WMATICVault.getAPR() * perc[i];\\n            }\\n        }\\n        return (allApr / DENOMINATOR);\\n    }\\n}\\n\",\"keccak256\":\"0x3e2fe3d3f3cc73b675d47333d0b62168cca93ffbeb65a7efa4fa435ec6a5bded\",\"license\":\"MIT\"},\"interfaces/IERC20UpgradeableExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x06f547094243d372a789dbb9207b12091bfebb770fb1f1de0a103bd100e1a9e2\",\"license\":\"MIT\"},\"interfaces/IL2Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IL2Vault is IERC20Upgradeable {\\r\\n    function deposit(uint amount) external;\\r\\n    function withdraw(uint share) external;\\r\\n    function getAllPoolInUSD() external view returns (uint);\\r\\n    function getAPR() external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xf5674a30a605de794d7ab865b913b0769c80ff5f1cc6ffb5dc1203e03a413c4e\",\"license\":\"MIT\"},\"interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0x6ebe1dcc57e80f94cfee716b0cd8bd3db29421f9095acd054a2595a46cfbb8ca\",\"license\":\"MIT\"},\"libs/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Token {\\r\\n    function changeDecimals(uint amount, uint curDecimals, uint newDecimals) internal pure returns(uint) {\\r\\n        if (curDecimals < newDecimals) {\\r\\n            return amount * (10 ** (newDecimals - curDecimals));\\r\\n        } else {\\r\\n            return amount / (10 ** (curDecimals - newDecimals));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xae2813af78c983079acae1e8ba528274e59e943423a52ecd12aa7d450899b856\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506134f7806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063aae0923611610104578063db2e21bc116100a2578063f2fde38b11610071578063f2fde38b146103e5578063f851a440146103f8578063f887ea401461040b578063fbfa77cf1461041e57600080fd5b8063db2e21bc146103a4578063ed47d909146103ac578063ef1b3166146103bf578063f1e2e748146103d257600080fd5b8063c54e44eb116100de578063c54e44eb14610356578063c89d5b8b14610369578063d48bfca714610371578063d8274d0a1461038457600080fd5b8063aae0923614610319578063b47c6a2714610321578063bd244af41461034057600080fd5b80634d95cad91161017c578063704b6c021161014b578063704b6c02146102da578063715018a6146102ed5780638da5cb5b146102f5578063a8602fea1461030657600080fd5b80634d95cad9146102865780634f64b2be146102a15780635d7db251146102b45780636817031b146102c757600080fd5b806335876476116101b8578063358764761461023757806336c5d7241461024a5780634626402b1461025d5780634631b2461461027057600080fd5b80632630c12f146101df57806326b89b711461020f57806330703f3214610224575b600080fd5b606b546101f2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61022261021d366004612e41565b610431565b005b6066546101f2906001600160a01b031681565b610222610245366004612f03565b61059b565b610222610258366004612f99565b6109ab565b6068546101f2906001600160a01b031681565b610278610b81565b604051610206929190612ff6565b6101f2730d500b1d8e8ef31e21c99d1db9a6444d3adf127081565b6101f26102af366004612f99565b610d21565b6102226102c236600461304d565b610d4b565b6102226102d536600461304d565b610e30565b6102226102e836600461304d565b610e9f565b610222610f09565b6033546001600160a01b03166101f2565b61022261031436600461304d565b610f1d565b610278610f7f565b610329610fec565b6040805192835260ff909116602083015201610206565b610348611076565b604051908152602001610206565b6067546101f2906001600160a01b031681565b6103486110d3565b61022261037f36600461304d565b611220565b61034861039236600461304d565b606d6020526000908152604090205481565b610222611404565b6103486103ba366004612f99565b61149c565b6103486103cd36600461306a565b611574565b6096546101f2906001600160a01b031681565b6102226103f336600461304d565b611615565b6069546101f2906001600160a01b031681565b6065546101f2906001600160a01b031681565b606a546101f2906001600160a01b031681565b606a546001600160a01b031633146104645760405162461bcd60e51b815260040161045b9061308c565b60405180910390fd5b8151606c54600090819067ffffffffffffffff81111561048657610486612d56565b6040519080825280602002602001820160405280156104af578160200160208202803683370190505b50905060005b8381101561056c5760008582815181106104d1576104d16130b0565b6020026020010151905080846104e791906130dc565b93506000606d6000898581518110610501576105016130b0565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205490508184828151811061053f5761053f6130b0565b6020026020010181815161055391906130dc565b9052508291506105649050816130f4565b9150506104b5565b50606a5460675461058b916001600160a01b039182169116308561168b565b610594816116fc565b5050505050565b600054610100900460ff16158080156105bb5750600054600160ff909116105b806105d55750303b1580156105d5575060005460ff166001145b6106385760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161045b565b6000805460ff19166001179055801561065b576000805461ff0019166101001790555b6001600160a01b0385166106a25760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103937baba32b960911b604482015260640161045b565b6001600160a01b0384166106f85760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420535741505f424153455f544f4b454e000000000000000000604482015260640161045b565b6001600160a01b03831661073d5760405162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a59081554d11560a21b604482015260640161045b565b6001600160a01b0382166107845760405162461bcd60e51b815260206004820152600e60248201526d0496e76616c696420746f6b656e360941b604482015260640161045b565b61078c611794565b606880546001600160a01b03199081166001600160a01b038b8116919091179092556069805482168a8416179055606b805482168984161790556065805482168884161790556066805482168784161790556067805490911691851691821790556040805163313ce56760e01b8152905163313ce56791600481810192602092909190829003018186803b15801561082357600080fd5b505afa158015610837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085b9190613125565b6067805460ff60a01b1916600160a01b60ff93841681029190911791829055900416600611156108cd5760405162461bcd60e51b815260206004820152601760248201527f5553445420646563696d616c73206d757374203e3d2036000000000000000000604482015260640161045b565b606c80546001810182556000919091527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe0160180546001600160a01b0319166001600160a01b0384161790556109206117c3565b60655460675461093f916001600160a01b039182169116600019611887565b60655461095b906001600160a01b038481169116600019611887565b80156109a1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6109b36119ab565b606c548082106109f35760405162461bcd60e51b815260206004820152600b60248201526a125b9d985b1a59081c1a5960aa1b604482015260640161045b565b60006109fe83611a05565b90508015610a425760405162461bcd60e51b8152602060048201526011602482015270506f6f6c206973206e6f7420656d70747960781b604482015260640161045b565b6000606c8481548110610a5757610a576130b0565b6000918252602090912001546001600160a01b03169050606c610a7b600185613140565b81548110610a8b57610a8b6130b0565b600091825260209091200154606c80546001600160a01b039092169186908110610ab757610ab76130b0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606c805480610af657610af6613157565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0383168252606d90526040812055610b396117c3565b604080516001600160a01b0383168152602081018690527f67f5552e5abc48ba6305130450943fa23b76a0b6eb18c29d3eea39559139fc5a910160405180910390a150505050565b6060806000610b8e611a6f565b80519091506000805b82811015610bd857838181518110610bb157610bb16130b0565b602002602001015182610bc491906130dc565b915080610bd0816130f4565b915050610b97565b5060008215610bf257610bed8361271061316d565b610bf5565b60005b90508267ffffffffffffffff811115610c1057610c10612d56565b604051908082528060200260200182016040528015610c39578160200160208202803683370190505b50945060005b83811015610cb5578215610c845782612710868381518110610c6357610c636130b0565b6020026020010151610c75919061318f565b610c7f919061316d565b610c86565b815b868281518110610c9857610c986130b0565b602090810291909101015280610cad816130f4565b915050610c3f565b50606c8581805480602002602001604051908101604052809291908181526020018280548015610d0e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cf0575b5050505050915095509550505050509091565b606c8181548110610d3157600080fd5b6000918252602090912001546001600160a01b0316905081565b610d536119ab565b609680546001600160a01b0319166001600160a01b038316908117909155604051636eb1769f60e11b81523060048201526024810191909152730d500b1d8e8ef31e21c99d1db9a6444d3adf12709063dd62ed3e9060440160206040518083038186803b158015610dc357600080fd5b505afa158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb91906131ae565b610e2d57609654610e2d90730d500b1d8e8ef31e21c99d1db9a6444d3adf1270906001600160a01b0316600019611887565b50565b610e386119ab565b606a546001600160a01b031615610e7d5760405162461bcd60e51b815260206004820152600960248201526815985d5b1d081cd95d60ba1b604482015260640161045b565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b610ea76119ab565b606980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9f0ac88be9159761bacf6c9e7c294c397ebf594607f6b3f2f70e7e0841ea68e891015b60405180910390a15050565b610f116119ab565b610f1b6000611b02565b565b610f256119ab565b606880546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527febcecb9db04071cf4b4ecc1e2e1e4603e74c9382d6e36c3531f0b62af4c78ed79101610efd565b606080606c610f8c611a6f565b815460408051602080840282018101909252828152918491830182828015610fdd57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fbf575b50505050509150915091509091565b606b5460675460405163b3596f0760e01b81526001600160a01b0391821660048201526000928392169063b3596f0790602401604080518083038186803b15801561103657600080fd5b505afa15801561104a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106e91906131c7565b915091509091565b600080611081611a6f565b80519091506000805b828110156110cb578381815181106110a4576110a46130b0565b6020026020010151826110b791906130dc565b9150806110c3816130f4565b91505061108a565b509392505050565b60008060006110e0610b81565b81519193509150600090815b8181101561120a576000858281518110611108576111086130b0565b60200260200101519050730d500b1d8e8ef31e21c99d1db9a6444d3adf12706001600160a01b0316816001600160a01b031614156111f757848281518110611152576111526130b0565b6020026020010151609660009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a857600080fd5b505afa1580156111bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e091906131ae565b6111ea919061318f565b6111f490856130dc565b93505b5080611202816130f4565b9150506110ec565b506112176127108361316d565b94505050505090565b6112286119ab565b6001600160a01b0381166000908152606d60205260409020548015801561127a5750606c60008154811061125e5761125e6130b0565b6000918252602090912001546001600160a01b03838116911614155b6112b65760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b604482015260640161045b565b606c80546001808201835560008390527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe01690910180546001600160a01b0319166001600160a01b038616179055905461130f9190613140565b6001600160a01b038381166000818152606d6020526040908190208490556065549051636eb1769f60e11b81523060048201529216602483015291925063dd62ed3e9060440160206040518083038186803b15801561136d57600080fd5b505afa158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a591906131ae565b6113c5576065546113c5906001600160a01b038481169116600019611887565b604080516001600160a01b0384168152602081018390527fe1bea1af9b1d1aede8b7fa043080de8690470a8ae61449360b3d0c0bf8104b469101610efd565b606a546001600160a01b0316331461142e5760405162461bcd60e51b815260040161045b9061308c565b6000611441670de0b6b3a7640000611b54565b9050801561146657606a54606754611466916001600160a01b03918216911683611b93565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c9060200160405180910390a150565b606a546000906001600160a01b031633146114c95760405162461bcd60e51b815260040161045b9061308c565b670de0b6b3a764000082111561150d5760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b604482015260640161045b565b61151682611b54565b606a54606754919250611536916001600160a01b03908116911683611b93565b60408051838152602081018390527f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8910160405180910390a1919050565b606a546000906001600160a01b031633146115a15760405162461bcd60e51b815260040161045b9061308c565b670de0b6b3a76400008211156115e55760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b604482015260640161045b565b6115ef8383611bc3565b606a5460675491925061160f916001600160a01b03908116911683611b93565b92915050565b61161d6119ab565b6001600160a01b0381166116825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161045b565b610e2d81611b02565b6040516001600160a01b03808516602483015283166044820152606481018290526116f69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611c30565b50505050565b61170581611d02565b805160005b8181101561178f576000606c8281548110611727576117276130b0565b6000918252602090912001546001600160a01b03169050730d500b1d8e8ef31e21c99d1db9a6444d3adf127081141561177c5761177c84838151811061176f5761176f6130b0565b6020026020010151611f65565b5080611787816130f4565b91505061170a565b505050565b600054610100900460ff166117bb5760405162461bcd60e51b815260040161045b906131f3565b610f1b61208b565b6000606c80548060200260200160405190810160405280929190818152602001828054801561181b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117fd575b505083519394506000925050505b8181101561178f5780606d6000858481518110611848576118486130b0565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061187f906130f4565b915050611829565b8015806119105750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156118d657600080fd5b505afa1580156118ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190e91906131ae565b155b61197b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161045b565b6040516001600160a01b03831660248201526044810182905261178f90849063095ea7b360e01b906064016116bf565b6033546001600160a01b03163314610f1b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b600080606c8381548110611a1b57611a1b6130b0565b6000918252602090912001546001600160a01b03169050730d500b1d8e8ef31e21c99d1db9a6444d3adf1270811415611a5d57611a566120bb565b9150611a69565b611a668361226f565b91505b50919050565b606c546060908067ffffffffffffffff811115611a8e57611a8e612d56565b604051908082528060200260200182016040528015611ab7578160200160208202803683370190505b50915060005b81811015611afd57611ace81611a05565b838281518110611ae057611ae06130b0565b602090810291909101015280611af5816130f4565b915050611abd565b505090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606c54600090815b81811015611b8c57611b6e8185611bc3565b611b7890846130dc565b925080611b84816130f4565b915050611b5c565b5050919050565b6040516001600160a01b03831660248201526044810182905261178f90849063a9059cbb60e01b906064016116bf565b600080606c8481548110611bd957611bd96130b0565b6000918252602090912001546001600160a01b03169050730d500b1d8e8ef31e21c99d1db9a6444d3adf1270811415611c1c57611c1583612446565b9150611c29565b611c268484612634565b91505b5092915050565b6000611c85826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661272b9092919063ffffffff16565b80519091501561178f5780806020019051810190611ca3919061323e565b61178f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161045b565b805160005b8181101561178f576000606c8281548110611d2457611d246130b0565b6000918252602090912001546067546001600160a01b03918216925016811415611d4e5750611f53565b6000848381518110611d6257611d626130b0565b60200260200101519050600080611d77610fec565b606b5460405163b3596f0760e01b81526001600160a01b038881166004830152939550919350600092839291169063b3596f0790602401604080518083038186803b158015611dc557600080fd5b505afa158015611dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfd91906131c7565b915091506000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3c57600080fd5b505afa158015611e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e749190613125565b90506000611e828284613260565b611e8d90600a613369565b611e97908761318f565b606754909150600090611eb490600160a01b900460ff1687613260565b611ebf90600a613369565b611ec9908661318f565b90506000611ed882606461318f565b611ee2848b61318f565b611eed90605f61318f565b611ef7919061316d565b6066549091506001600160a01b038b811691161415611f2e57606754611f28906001600160a01b03168b8b84612744565b50611f48565b606754611f46906001600160a01b03168b8b84612871565b505b505050505050505050505b80611f5d816130f4565b915050611d07565b6040516370a0823160e01b8152306004820152600090730d500b1d8e8ef31e21c99d1db9a6444d3adf1270906370a082319060240160206040518083038186803b158015611fb257600080fd5b505afa158015611fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fea91906131ae565b905080156120875760965460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f2590602401600060405180830381600087803b15801561203857600080fd5b505af115801561204c573d6000803e3d6000fd5b505060408051858152602081018590527f63d4120c95dc671950bc1a0b0ca7178f987fdaca63ae58bfb960d918a11814cf9350019050610efd565b5050565b600054610100900460ff166120b25760405162461bcd60e51b815260040161045b906131f3565b610f1b33611b02565b600080609660009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b15801561210c57600080fd5b505afa158015612120573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214491906131ae565b9050801561226657609660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561219a57600080fd5b505afa1580156121ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d291906131ae565b6096546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561221557600080fd5b505afa158015612229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224d91906131ae565b612257908361318f565b612261919061316d565b612269565b60005b91505090565b600080606c8381548110612285576122856130b0565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b1580156122d357600080fd5b505afa1580156122e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230b91906131ae565b90508015611b8c57606b5460405163b3596f0760e01b81526001600160a01b038481166004830152600092839291169063b3596f0790602401604080518083038186803b15801561235b57600080fd5b505afa15801561236f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239391906131c7565b915091506000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156123d257600080fd5b505afa1580156123e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240a9190613125565b905061241782600a613369565b83612427868460ff1660126129bd565b612431919061318f565b61243b919061316d565b979650505050505050565b6096546040516370a0823160e01b81523060048201526000918291670de0b6b3a76400009185916001600160a01b03909116906370a082319060240160206040518083038186803b15801561249a57600080fd5b505afa1580156124ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d291906131ae565b6124dc919061318f565b6124e6919061316d565b90508015611a6957609654604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561253457600080fd5b505af1158015612548573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015260009250730d500b1d8e8ef31e21c99d1db9a6444d3adf127091506370a082319060240160206040518083038186803b15801561259957600080fd5b505afa1580156125ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d191906131ae565b90506125f1730d500b1d8e8ef31e21c99d1db9a6444d3adf127082612a0c565b60408051838152602081018390529194507f428749ed709fb20e06fa0b37e8e016c84fd483d4f73c7eae27e6674237d2529b910160405180910390a15050919050565b600080606c848154811061264a5761264a6130b0565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b039091169250670de0b6b3a764000090859084906370a082319060240160206040518083038186803b1580156126a457600080fd5b505afa1580156126b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126dc91906131ae565b6126e6919061318f565b6126f0919061316d565b90508015612723576067546001600160a01b038381169116141561271657809250612723565b6127208282612a0c565b92505b505092915050565b606061273a8484600085612bfc565b90505b9392505050565b60408051600280825260608201835260009283929190602083019080368337019050509050858160008151811061277d5761277d6130b0565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106127b1576127b16130b0565b6001600160a01b0392831660209182029290920101526065546040516338ed173960e01b81529116906338ed1739906127f69087908790869030904290600401613378565b600060405180830381600087803b15801561281057600080fd5b505af1158015612824573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261284c91908101906133b4565b60018151811061285e5761285e6130b0565b6020026020010151915050949350505050565b604080516003808252608082019092526000918291906020820160608036833701905050905085816000815181106128ab576128ab6130b0565b6001600160a01b0392831660209182029290920101526066548251911690829060019081106128dc576128dc6130b0565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600281518110612910576129106130b0565b6001600160a01b0392831660209182029290920101526065546040516338ed173960e01b81529116906338ed1739906129559087908790869030904290600401613378565b600060405180830381600087803b15801561296f57600080fd5b505af1158015612983573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129ab91908101906133b4565b60028151811061285e5761285e6130b0565b6000818310156129ed576129d18383613140565b6129dc90600a61343a565b6129e6908561318f565b905061273d565b6129f78284613140565b612a0290600a61343a565b6129e6908561316d565b6000806000612a19610fec565b606b5460405163b3596f0760e01b81526001600160a01b038981166004830152939550919350600092839291169063b3596f0790602401604080518083038186803b158015612a6757600080fd5b505afa158015612a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9f91906131c7565b915091506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612ade57600080fd5b505afa158015612af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b169190613125565b606754909150600090612b3390600160a01b900460ff1686613260565b612b3e90600a613369565b612b48908561318f565b90506000612b568385613260565b612b6190600a613369565b612b6b908861318f565b90506000612b7a82606461318f565b612b84848c61318f565b612b8f90605f61318f565b612b99919061316d565b6066549091506001600160a01b038c811691161415612bd257606754612bcb908c906001600160a01b03168c84612744565b9850612bee565b606754612beb908c906001600160a01b03168c84612871565b98505b505050505050505092915050565b606082471015612c5d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161045b565b6001600160a01b0385163b612cb45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161045b565b600080866001600160a01b03168587604051612cd09190613472565b60006040518083038185875af1925050503d8060008114612d0d576040519150601f19603f3d011682016040523d82523d6000602084013e612d12565b606091505b509150915061243b82828660608315612d2c57508161273d565b825115612d3c5782518084602001fd5b8160405162461bcd60e51b815260040161045b919061348e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612d9557612d95612d56565b604052919050565b600067ffffffffffffffff821115612db757612db7612d56565b5060051b60200190565b6001600160a01b0381168114610e2d57600080fd5b600082601f830112612de757600080fd5b81356020612dfc612df783612d9d565b612d6c565b82815260059290921b84018101918181019086841115612e1b57600080fd5b8286015b84811015612e365780358352918301918301612e1f565b509695505050505050565b60008060408385031215612e5457600080fd5b823567ffffffffffffffff80821115612e6c57600080fd5b818501915085601f830112612e8057600080fd5b81356020612e90612df783612d9d565b82815260059290921b84018101918181019089841115612eaf57600080fd5b948201945b83861015612ed6578535612ec781612dc1565b82529482019490820190612eb4565b96505086013592505080821115612eec57600080fd5b50612ef985828601612dd6565b9150509250929050565b600080600080600080600060e0888a031215612f1e57600080fd5b8735612f2981612dc1565b96506020880135612f3981612dc1565b95506040880135612f4981612dc1565b94506060880135612f5981612dc1565b93506080880135612f6981612dc1565b925060a0880135612f7981612dc1565b915060c0880135612f8981612dc1565b8091505092959891949750929550565b600060208284031215612fab57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015612feb5781516001600160a01b031687529582019590820190600101612fc6565b509495945050505050565b6040815260006130096040830185612fb2565b82810360208481019190915284518083528582019282019060005b8181101561304057845183529383019391830191600101613024565b5090979650505050505050565b60006020828403121561305f57600080fd5b813561273d81612dc1565b6000806040838503121561307d57600080fd5b50508035926020909101359150565b6020808252600a908201526913db9b1e481d985d5b1d60b21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156130ef576130ef6130c6565b500190565b6000600019821415613108576131086130c6565b5060010190565b805160ff8116811461312057600080fd5b919050565b60006020828403121561313757600080fd5b61273d8261310f565b600082821015613152576131526130c6565b500390565b634e487b7160e01b600052603160045260246000fd5b60008261318a57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156131a9576131a96130c6565b500290565b6000602082840312156131c057600080fd5b5051919050565b600080604083850312156131da57600080fd5b825191506131ea6020840161310f565b90509250929050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561325057600080fd5b8151801515811461273d57600080fd5b600060ff821660ff84168060ff0382111561327d5761327d6130c6565b019392505050565b600181815b808511156132c05781600019048211156132a6576132a66130c6565b808516156132b357918102915b93841c939080029061328a565b509250929050565b6000826132d75750600161160f565b816132e45750600061160f565b81600181146132fa576002811461330457613320565b600191505061160f565b60ff841115613315576133156130c6565b50506001821b61160f565b5060208310610133831016604e8410600b8410161715613343575081810a61160f565b61334d8383613285565b8060001904821115613361576133616130c6565b029392505050565b600061273d60ff8416836132c8565b85815284602082015260a06040820152600061339760a0830186612fb2565b6001600160a01b0394909416606083015250608001529392505050565b600060208083850312156133c757600080fd5b825167ffffffffffffffff8111156133de57600080fd5b8301601f810185136133ef57600080fd5b80516133fd612df782612d9d565b81815260059190911b8201830190838101908783111561341c57600080fd5b928401925b8284101561243b57835182529284019290840190613421565b600061273d83836132c8565b60005b83811015613461578181015183820152602001613449565b838111156116f65750506000910152565b60008251613484818460208701613446565b9190910192915050565b60208152600082518060208401526134ad816040850160208701613446565b601f01601f1916919091016040019291505056fea2646970667358221220dadd006907efbcf29bba9cfb8d7ce4bb9f6b6e4625165a3a4446417e645fc06d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063aae0923611610104578063db2e21bc116100a2578063f2fde38b11610071578063f2fde38b146103e5578063f851a440146103f8578063f887ea401461040b578063fbfa77cf1461041e57600080fd5b8063db2e21bc146103a4578063ed47d909146103ac578063ef1b3166146103bf578063f1e2e748146103d257600080fd5b8063c54e44eb116100de578063c54e44eb14610356578063c89d5b8b14610369578063d48bfca714610371578063d8274d0a1461038457600080fd5b8063aae0923614610319578063b47c6a2714610321578063bd244af41461034057600080fd5b80634d95cad91161017c578063704b6c021161014b578063704b6c02146102da578063715018a6146102ed5780638da5cb5b146102f5578063a8602fea1461030657600080fd5b80634d95cad9146102865780634f64b2be146102a15780635d7db251146102b45780636817031b146102c757600080fd5b806335876476116101b8578063358764761461023757806336c5d7241461024a5780634626402b1461025d5780634631b2461461027057600080fd5b80632630c12f146101df57806326b89b711461020f57806330703f3214610224575b600080fd5b606b546101f2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61022261021d366004612e41565b610431565b005b6066546101f2906001600160a01b031681565b610222610245366004612f03565b61059b565b610222610258366004612f99565b6109ab565b6068546101f2906001600160a01b031681565b610278610b81565b604051610206929190612ff6565b6101f2730d500b1d8e8ef31e21c99d1db9a6444d3adf127081565b6101f26102af366004612f99565b610d21565b6102226102c236600461304d565b610d4b565b6102226102d536600461304d565b610e30565b6102226102e836600461304d565b610e9f565b610222610f09565b6033546001600160a01b03166101f2565b61022261031436600461304d565b610f1d565b610278610f7f565b610329610fec565b6040805192835260ff909116602083015201610206565b610348611076565b604051908152602001610206565b6067546101f2906001600160a01b031681565b6103486110d3565b61022261037f36600461304d565b611220565b61034861039236600461304d565b606d6020526000908152604090205481565b610222611404565b6103486103ba366004612f99565b61149c565b6103486103cd36600461306a565b611574565b6096546101f2906001600160a01b031681565b6102226103f336600461304d565b611615565b6069546101f2906001600160a01b031681565b6065546101f2906001600160a01b031681565b606a546101f2906001600160a01b031681565b606a546001600160a01b031633146104645760405162461bcd60e51b815260040161045b9061308c565b60405180910390fd5b8151606c54600090819067ffffffffffffffff81111561048657610486612d56565b6040519080825280602002602001820160405280156104af578160200160208202803683370190505b50905060005b8381101561056c5760008582815181106104d1576104d16130b0565b6020026020010151905080846104e791906130dc565b93506000606d6000898581518110610501576105016130b0565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205490508184828151811061053f5761053f6130b0565b6020026020010181815161055391906130dc565b9052508291506105649050816130f4565b9150506104b5565b50606a5460675461058b916001600160a01b039182169116308561168b565b610594816116fc565b5050505050565b600054610100900460ff16158080156105bb5750600054600160ff909116105b806105d55750303b1580156105d5575060005460ff166001145b6106385760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161045b565b6000805460ff19166001179055801561065b576000805461ff0019166101001790555b6001600160a01b0385166106a25760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103937baba32b960911b604482015260640161045b565b6001600160a01b0384166106f85760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420535741505f424153455f544f4b454e000000000000000000604482015260640161045b565b6001600160a01b03831661073d5760405162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a59081554d11560a21b604482015260640161045b565b6001600160a01b0382166107845760405162461bcd60e51b815260206004820152600e60248201526d0496e76616c696420746f6b656e360941b604482015260640161045b565b61078c611794565b606880546001600160a01b03199081166001600160a01b038b8116919091179092556069805482168a8416179055606b805482168984161790556065805482168884161790556066805482168784161790556067805490911691851691821790556040805163313ce56760e01b8152905163313ce56791600481810192602092909190829003018186803b15801561082357600080fd5b505afa158015610837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085b9190613125565b6067805460ff60a01b1916600160a01b60ff93841681029190911791829055900416600611156108cd5760405162461bcd60e51b815260206004820152601760248201527f5553445420646563696d616c73206d757374203e3d2036000000000000000000604482015260640161045b565b606c80546001810182556000919091527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe0160180546001600160a01b0319166001600160a01b0384161790556109206117c3565b60655460675461093f916001600160a01b039182169116600019611887565b60655461095b906001600160a01b038481169116600019611887565b80156109a1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6109b36119ab565b606c548082106109f35760405162461bcd60e51b815260206004820152600b60248201526a125b9d985b1a59081c1a5960aa1b604482015260640161045b565b60006109fe83611a05565b90508015610a425760405162461bcd60e51b8152602060048201526011602482015270506f6f6c206973206e6f7420656d70747960781b604482015260640161045b565b6000606c8481548110610a5757610a576130b0565b6000918252602090912001546001600160a01b03169050606c610a7b600185613140565b81548110610a8b57610a8b6130b0565b600091825260209091200154606c80546001600160a01b039092169186908110610ab757610ab76130b0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606c805480610af657610af6613157565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0383168252606d90526040812055610b396117c3565b604080516001600160a01b0383168152602081018690527f67f5552e5abc48ba6305130450943fa23b76a0b6eb18c29d3eea39559139fc5a910160405180910390a150505050565b6060806000610b8e611a6f565b80519091506000805b82811015610bd857838181518110610bb157610bb16130b0565b602002602001015182610bc491906130dc565b915080610bd0816130f4565b915050610b97565b5060008215610bf257610bed8361271061316d565b610bf5565b60005b90508267ffffffffffffffff811115610c1057610c10612d56565b604051908082528060200260200182016040528015610c39578160200160208202803683370190505b50945060005b83811015610cb5578215610c845782612710868381518110610c6357610c636130b0565b6020026020010151610c75919061318f565b610c7f919061316d565b610c86565b815b868281518110610c9857610c986130b0565b602090810291909101015280610cad816130f4565b915050610c3f565b50606c8581805480602002602001604051908101604052809291908181526020018280548015610d0e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cf0575b5050505050915095509550505050509091565b606c8181548110610d3157600080fd5b6000918252602090912001546001600160a01b0316905081565b610d536119ab565b609680546001600160a01b0319166001600160a01b038316908117909155604051636eb1769f60e11b81523060048201526024810191909152730d500b1d8e8ef31e21c99d1db9a6444d3adf12709063dd62ed3e9060440160206040518083038186803b158015610dc357600080fd5b505afa158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb91906131ae565b610e2d57609654610e2d90730d500b1d8e8ef31e21c99d1db9a6444d3adf1270906001600160a01b0316600019611887565b50565b610e386119ab565b606a546001600160a01b031615610e7d5760405162461bcd60e51b815260206004820152600960248201526815985d5b1d081cd95d60ba1b604482015260640161045b565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b610ea76119ab565b606980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9f0ac88be9159761bacf6c9e7c294c397ebf594607f6b3f2f70e7e0841ea68e891015b60405180910390a15050565b610f116119ab565b610f1b6000611b02565b565b610f256119ab565b606880546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527febcecb9db04071cf4b4ecc1e2e1e4603e74c9382d6e36c3531f0b62af4c78ed79101610efd565b606080606c610f8c611a6f565b815460408051602080840282018101909252828152918491830182828015610fdd57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fbf575b50505050509150915091509091565b606b5460675460405163b3596f0760e01b81526001600160a01b0391821660048201526000928392169063b3596f0790602401604080518083038186803b15801561103657600080fd5b505afa15801561104a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106e91906131c7565b915091509091565b600080611081611a6f565b80519091506000805b828110156110cb578381815181106110a4576110a46130b0565b6020026020010151826110b791906130dc565b9150806110c3816130f4565b91505061108a565b509392505050565b60008060006110e0610b81565b81519193509150600090815b8181101561120a576000858281518110611108576111086130b0565b60200260200101519050730d500b1d8e8ef31e21c99d1db9a6444d3adf12706001600160a01b0316816001600160a01b031614156111f757848281518110611152576111526130b0565b6020026020010151609660009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a857600080fd5b505afa1580156111bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e091906131ae565b6111ea919061318f565b6111f490856130dc565b93505b5080611202816130f4565b9150506110ec565b506112176127108361316d565b94505050505090565b6112286119ab565b6001600160a01b0381166000908152606d60205260409020548015801561127a5750606c60008154811061125e5761125e6130b0565b6000918252602090912001546001600160a01b03838116911614155b6112b65760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b604482015260640161045b565b606c80546001808201835560008390527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe01690910180546001600160a01b0319166001600160a01b038616179055905461130f9190613140565b6001600160a01b038381166000818152606d6020526040908190208490556065549051636eb1769f60e11b81523060048201529216602483015291925063dd62ed3e9060440160206040518083038186803b15801561136d57600080fd5b505afa158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a591906131ae565b6113c5576065546113c5906001600160a01b038481169116600019611887565b604080516001600160a01b0384168152602081018390527fe1bea1af9b1d1aede8b7fa043080de8690470a8ae61449360b3d0c0bf8104b469101610efd565b606a546001600160a01b0316331461142e5760405162461bcd60e51b815260040161045b9061308c565b6000611441670de0b6b3a7640000611b54565b9050801561146657606a54606754611466916001600160a01b03918216911683611b93565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c9060200160405180910390a150565b606a546000906001600160a01b031633146114c95760405162461bcd60e51b815260040161045b9061308c565b670de0b6b3a764000082111561150d5760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b604482015260640161045b565b61151682611b54565b606a54606754919250611536916001600160a01b03908116911683611b93565b60408051838152602081018390527f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8910160405180910390a1919050565b606a546000906001600160a01b031633146115a15760405162461bcd60e51b815260040161045b9061308c565b670de0b6b3a76400008211156115e55760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b604482015260640161045b565b6115ef8383611bc3565b606a5460675491925061160f916001600160a01b03908116911683611b93565b92915050565b61161d6119ab565b6001600160a01b0381166116825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161045b565b610e2d81611b02565b6040516001600160a01b03808516602483015283166044820152606481018290526116f69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611c30565b50505050565b61170581611d02565b805160005b8181101561178f576000606c8281548110611727576117276130b0565b6000918252602090912001546001600160a01b03169050730d500b1d8e8ef31e21c99d1db9a6444d3adf127081141561177c5761177c84838151811061176f5761176f6130b0565b6020026020010151611f65565b5080611787816130f4565b91505061170a565b505050565b600054610100900460ff166117bb5760405162461bcd60e51b815260040161045b906131f3565b610f1b61208b565b6000606c80548060200260200160405190810160405280929190818152602001828054801561181b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117fd575b505083519394506000925050505b8181101561178f5780606d6000858481518110611848576118486130b0565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061187f906130f4565b915050611829565b8015806119105750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156118d657600080fd5b505afa1580156118ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190e91906131ae565b155b61197b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161045b565b6040516001600160a01b03831660248201526044810182905261178f90849063095ea7b360e01b906064016116bf565b6033546001600160a01b03163314610f1b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b600080606c8381548110611a1b57611a1b6130b0565b6000918252602090912001546001600160a01b03169050730d500b1d8e8ef31e21c99d1db9a6444d3adf1270811415611a5d57611a566120bb565b9150611a69565b611a668361226f565b91505b50919050565b606c546060908067ffffffffffffffff811115611a8e57611a8e612d56565b604051908082528060200260200182016040528015611ab7578160200160208202803683370190505b50915060005b81811015611afd57611ace81611a05565b838281518110611ae057611ae06130b0565b602090810291909101015280611af5816130f4565b915050611abd565b505090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606c54600090815b81811015611b8c57611b6e8185611bc3565b611b7890846130dc565b925080611b84816130f4565b915050611b5c565b5050919050565b6040516001600160a01b03831660248201526044810182905261178f90849063a9059cbb60e01b906064016116bf565b600080606c8481548110611bd957611bd96130b0565b6000918252602090912001546001600160a01b03169050730d500b1d8e8ef31e21c99d1db9a6444d3adf1270811415611c1c57611c1583612446565b9150611c29565b611c268484612634565b91505b5092915050565b6000611c85826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661272b9092919063ffffffff16565b80519091501561178f5780806020019051810190611ca3919061323e565b61178f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161045b565b805160005b8181101561178f576000606c8281548110611d2457611d246130b0565b6000918252602090912001546067546001600160a01b03918216925016811415611d4e5750611f53565b6000848381518110611d6257611d626130b0565b60200260200101519050600080611d77610fec565b606b5460405163b3596f0760e01b81526001600160a01b038881166004830152939550919350600092839291169063b3596f0790602401604080518083038186803b158015611dc557600080fd5b505afa158015611dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfd91906131c7565b915091506000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3c57600080fd5b505afa158015611e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e749190613125565b90506000611e828284613260565b611e8d90600a613369565b611e97908761318f565b606754909150600090611eb490600160a01b900460ff1687613260565b611ebf90600a613369565b611ec9908661318f565b90506000611ed882606461318f565b611ee2848b61318f565b611eed90605f61318f565b611ef7919061316d565b6066549091506001600160a01b038b811691161415611f2e57606754611f28906001600160a01b03168b8b84612744565b50611f48565b606754611f46906001600160a01b03168b8b84612871565b505b505050505050505050505b80611f5d816130f4565b915050611d07565b6040516370a0823160e01b8152306004820152600090730d500b1d8e8ef31e21c99d1db9a6444d3adf1270906370a082319060240160206040518083038186803b158015611fb257600080fd5b505afa158015611fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fea91906131ae565b905080156120875760965460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f2590602401600060405180830381600087803b15801561203857600080fd5b505af115801561204c573d6000803e3d6000fd5b505060408051858152602081018590527f63d4120c95dc671950bc1a0b0ca7178f987fdaca63ae58bfb960d918a11814cf9350019050610efd565b5050565b600054610100900460ff166120b25760405162461bcd60e51b815260040161045b906131f3565b610f1b33611b02565b600080609660009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b15801561210c57600080fd5b505afa158015612120573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214491906131ae565b9050801561226657609660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561219a57600080fd5b505afa1580156121ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d291906131ae565b6096546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561221557600080fd5b505afa158015612229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224d91906131ae565b612257908361318f565b612261919061316d565b612269565b60005b91505090565b600080606c8381548110612285576122856130b0565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b1580156122d357600080fd5b505afa1580156122e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230b91906131ae565b90508015611b8c57606b5460405163b3596f0760e01b81526001600160a01b038481166004830152600092839291169063b3596f0790602401604080518083038186803b15801561235b57600080fd5b505afa15801561236f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239391906131c7565b915091506000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156123d257600080fd5b505afa1580156123e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240a9190613125565b905061241782600a613369565b83612427868460ff1660126129bd565b612431919061318f565b61243b919061316d565b979650505050505050565b6096546040516370a0823160e01b81523060048201526000918291670de0b6b3a76400009185916001600160a01b03909116906370a082319060240160206040518083038186803b15801561249a57600080fd5b505afa1580156124ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d291906131ae565b6124dc919061318f565b6124e6919061316d565b90508015611a6957609654604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561253457600080fd5b505af1158015612548573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015260009250730d500b1d8e8ef31e21c99d1db9a6444d3adf127091506370a082319060240160206040518083038186803b15801561259957600080fd5b505afa1580156125ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d191906131ae565b90506125f1730d500b1d8e8ef31e21c99d1db9a6444d3adf127082612a0c565b60408051838152602081018390529194507f428749ed709fb20e06fa0b37e8e016c84fd483d4f73c7eae27e6674237d2529b910160405180910390a15050919050565b600080606c848154811061264a5761264a6130b0565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b039091169250670de0b6b3a764000090859084906370a082319060240160206040518083038186803b1580156126a457600080fd5b505afa1580156126b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126dc91906131ae565b6126e6919061318f565b6126f0919061316d565b90508015612723576067546001600160a01b038381169116141561271657809250612723565b6127208282612a0c565b92505b505092915050565b606061273a8484600085612bfc565b90505b9392505050565b60408051600280825260608201835260009283929190602083019080368337019050509050858160008151811061277d5761277d6130b0565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106127b1576127b16130b0565b6001600160a01b0392831660209182029290920101526065546040516338ed173960e01b81529116906338ed1739906127f69087908790869030904290600401613378565b600060405180830381600087803b15801561281057600080fd5b505af1158015612824573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261284c91908101906133b4565b60018151811061285e5761285e6130b0565b6020026020010151915050949350505050565b604080516003808252608082019092526000918291906020820160608036833701905050905085816000815181106128ab576128ab6130b0565b6001600160a01b0392831660209182029290920101526066548251911690829060019081106128dc576128dc6130b0565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600281518110612910576129106130b0565b6001600160a01b0392831660209182029290920101526065546040516338ed173960e01b81529116906338ed1739906129559087908790869030904290600401613378565b600060405180830381600087803b15801561296f57600080fd5b505af1158015612983573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129ab91908101906133b4565b60028151811061285e5761285e6130b0565b6000818310156129ed576129d18383613140565b6129dc90600a61343a565b6129e6908561318f565b905061273d565b6129f78284613140565b612a0290600a61343a565b6129e6908561316d565b6000806000612a19610fec565b606b5460405163b3596f0760e01b81526001600160a01b038981166004830152939550919350600092839291169063b3596f0790602401604080518083038186803b158015612a6757600080fd5b505afa158015612a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9f91906131c7565b915091506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612ade57600080fd5b505afa158015612af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b169190613125565b606754909150600090612b3390600160a01b900460ff1686613260565b612b3e90600a613369565b612b48908561318f565b90506000612b568385613260565b612b6190600a613369565b612b6b908861318f565b90506000612b7a82606461318f565b612b84848c61318f565b612b8f90605f61318f565b612b99919061316d565b6066549091506001600160a01b038c811691161415612bd257606754612bcb908c906001600160a01b03168c84612744565b9850612bee565b606754612beb908c906001600160a01b03168c84612871565b98505b505050505050505092915050565b606082471015612c5d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161045b565b6001600160a01b0385163b612cb45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161045b565b600080866001600160a01b03168587604051612cd09190613472565b60006040518083038185875af1925050503d8060008114612d0d576040519150601f19603f3d011682016040523d82523d6000602084013e612d12565b606091505b509150915061243b82828660608315612d2c57508161273d565b825115612d3c5782518084602001fd5b8160405162461bcd60e51b815260040161045b919061348e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612d9557612d95612d56565b604052919050565b600067ffffffffffffffff821115612db757612db7612d56565b5060051b60200190565b6001600160a01b0381168114610e2d57600080fd5b600082601f830112612de757600080fd5b81356020612dfc612df783612d9d565b612d6c565b82815260059290921b84018101918181019086841115612e1b57600080fd5b8286015b84811015612e365780358352918301918301612e1f565b509695505050505050565b60008060408385031215612e5457600080fd5b823567ffffffffffffffff80821115612e6c57600080fd5b818501915085601f830112612e8057600080fd5b81356020612e90612df783612d9d565b82815260059290921b84018101918181019089841115612eaf57600080fd5b948201945b83861015612ed6578535612ec781612dc1565b82529482019490820190612eb4565b96505086013592505080821115612eec57600080fd5b50612ef985828601612dd6565b9150509250929050565b600080600080600080600060e0888a031215612f1e57600080fd5b8735612f2981612dc1565b96506020880135612f3981612dc1565b95506040880135612f4981612dc1565b94506060880135612f5981612dc1565b93506080880135612f6981612dc1565b925060a0880135612f7981612dc1565b915060c0880135612f8981612dc1565b8091505092959891949750929550565b600060208284031215612fab57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015612feb5781516001600160a01b031687529582019590820190600101612fc6565b509495945050505050565b6040815260006130096040830185612fb2565b82810360208481019190915284518083528582019282019060005b8181101561304057845183529383019391830191600101613024565b5090979650505050505050565b60006020828403121561305f57600080fd5b813561273d81612dc1565b6000806040838503121561307d57600080fd5b50508035926020909101359150565b6020808252600a908201526913db9b1e481d985d5b1d60b21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156130ef576130ef6130c6565b500190565b6000600019821415613108576131086130c6565b5060010190565b805160ff8116811461312057600080fd5b919050565b60006020828403121561313757600080fd5b61273d8261310f565b600082821015613152576131526130c6565b500390565b634e487b7160e01b600052603160045260246000fd5b60008261318a57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156131a9576131a96130c6565b500290565b6000602082840312156131c057600080fd5b5051919050565b600080604083850312156131da57600080fd5b825191506131ea6020840161310f565b90509250929050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561325057600080fd5b8151801515811461273d57600080fd5b600060ff821660ff84168060ff0382111561327d5761327d6130c6565b019392505050565b600181815b808511156132c05781600019048211156132a6576132a66130c6565b808516156132b357918102915b93841c939080029061328a565b509250929050565b6000826132d75750600161160f565b816132e45750600061160f565b81600181146132fa576002811461330457613320565b600191505061160f565b60ff841115613315576133156130c6565b50506001821b61160f565b5060208310610133831016604e8410600b8410161715613343575081810a61160f565b61334d8383613285565b8060001904821115613361576133616130c6565b029392505050565b600061273d60ff8416836132c8565b85815284602082015260a06040820152600061339760a0830186612fb2565b6001600160a01b0394909416606083015250608001529392505050565b600060208083850312156133c757600080fd5b825167ffffffffffffffff8111156133de57600080fd5b8301601f810185136133ef57600080fd5b80516133fd612df782612d9d565b81815260059190911b8201830190838101908783111561341c57600080fd5b928401925b8284101561243b57835182529284019290840190613421565b600061273d83836132c8565b60005b83811015613461578181015183820152602001613449565b838111156116f65750506000910152565b60008251613484818460208701613446565b9190910192915050565b60208152600082518060208401526134ad816040850160208701613446565b601f01601f1916919091016040019291505056fea2646970667358221220dadd006907efbcf29bba9cfb8d7ce4bb9f6b6e4625165a3a4446417e645fc06d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getUSDTPriceInUSD()": {
        "returns": {
          "_0": "the price of USDT in USD."
        }
      },
      "invest(address[],uint256[])": {
        "params": {
          "_USDTAmts": "amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1783,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10047,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "router",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IRouter)33632"
      },
      {
        "astId": 10050,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "SWAP_BASE_TOKEN",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IERC20UpgradeableExt)33506"
      },
      {
        "astId": 10053,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "USDT",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IERC20UpgradeableExt)33506"
      },
      {
        "astId": 10055,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "usdtDecimals",
        "offset": 20,
        "slot": "103",
        "type": "t_uint8"
      },
      {
        "astId": 10060,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "treasuryWallet",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 10062,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "admin",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 10064,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "vault",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 10067,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "priceOracle",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(IPriceOracle)8910"
      },
      {
        "astId": 10070,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "tokens",
        "offset": 0,
        "slot": "108",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10074,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "pid",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11451,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_uint256)40_storage"
      },
      {
        "astId": 12862,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "WMATICVault",
        "offset": 0,
        "slot": "150",
        "type": "t_contract(IL2Vault)33532"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)40_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[40]",
        "numberOfBytes": "1280"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20UpgradeableExt)33506": {
        "encoding": "inplace",
        "label": "contract IERC20UpgradeableExt",
        "numberOfBytes": "20"
      },
      "t_contract(IL2Vault)33532": {
        "encoding": "inplace",
        "label": "contract IL2Vault",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)8910": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IRouter)33632": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}