{
  "address": "0xaB3591FD0E1aa6C7bD9D2703e37B0Ef6cFA3F4BC",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "RemoveToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetAdminWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryWallet",
          "type": "address"
        }
      ],
      "name": "SetTreasuryWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20UpgradeableExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20UpgradeableExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTokenCompositionPerc",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEachPoolInUSD",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pools",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDTPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_SWAP_BASE_TOKEN",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDTAmts",
          "type": "uint256[]"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x017fb4df8156dd38d1e318c02c5257c8353372038f9f2a1583685879ab25fb4f",
  "receipt": {
    "to": null,
    "from": "0x3f68A3c1023d736D8Be867CA49Cb18c543373B99",
    "contractAddress": "0xaB3591FD0E1aa6C7bD9D2703e37B0Ef6cFA3F4BC",
    "transactionIndex": 65,
    "gasUsed": "2544483",
    "logsBloom": "0x
    "blockHash": "0xfe3aeff6f4d987b79514eaa0f94c33a7d65a93ca8b0e106f6bec85ae44d700e7",
    "transactionHash": "0x017fb4df8156dd38d1e318c02c5257c8353372038f9f2a1583685879ab25fb4f",
    "logs": [
      {
        "transactionIndex": 65,
        "blockNumber": 30137651,
        "transactionHash": "0x017fb4df8156dd38d1e318c02c5257c8353372038f9f2a1583685879ab25fb4f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003f68a3c1023d736d8be867ca49cb18c543373b99",
          "0x0000000000000000000000001efecb61a2f80aa34d3b9218b564a64d05946290"
        ],
        "data": "0x000000000000000000000000000000000000000000000000010f31d0708f84000000000000000000000000000000000000000000000000005ef7dcc49e2231fd000000000000000000000000000000000000000000000cdc6a39fe7f35c391c40000000000000000000000000000000000000000000000005de8aaf42d92adfd000000000000000000000000000000000000000000000cdc6b49304fa65315c4",
        "logIndex": 274,
        "blockHash": "0xfe3aeff6f4d987b79514eaa0f94c33a7d65a93ca8b0e106f6bec85ae44d700e7"
      }
    ],
    "blockNumber": 30137651,
    "cumulativeGasUsed": "17780053",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d787e85c525d41db4e1959fc79b1e597",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdminWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"SetTreasuryWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SWAP_BASE_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20UpgradeableExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20UpgradeableExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenCompositionPerc\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEachPoolInUSD\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SWAP_BASE_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDTAmts\",\"type\":\"uint256[]\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawFromPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getUSDTPriceInUSD()\":{\"returns\":{\"_0\":\"the price of USDT in USD.\"}},\"invest(address[],uint256[])\":{\"params\":{\"_USDTAmts\":\"amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bni/strategy/MaticBNIStrategy.sol\":\"MaticBNIStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"},\"contracts/bni/strategy/BNIStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../priceOracle/IPriceOracle.sol\\\";\\n\\ninterface IRouter {\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract BNIStrategy is OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\\n\\n    IRouter public router;\\n    IERC20UpgradeableExt public SWAP_BASE_TOKEN; // It has same role with WETH on Ethereum Swaps. Most of tokens have been paired with this token.\\n    IERC20UpgradeableExt public USDT;\\n    uint8 usdtDecimals;\\n\\n    uint constant DENOMINATOR = 10000;\\n\\n    address public treasuryWallet;\\n    address public admin;\\n    address public vault;\\n    IPriceOracle public priceOracle;\\n\\n    address[] public tokens;\\n    mapping(address => uint) public pid; // Pool indices in tokens array\\n\\n    event AddToken(address token, uint pid);\\n    event RemoveToken(address token, uint pid);\\n    event Withdraw(uint sharePerc, uint USDTAmt);\\n    event EmergencyWithdraw(uint USDTAmt);\\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\\n    event SetAdminWallet(address oldAdmin, address newAdmin);\\n\\n    modifier onlyVault {\\n        require(msg.sender == vault, \\\"Only vault\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _treasuryWallet, address _admin,\\n        address _priceOracle,\\n        address _router, address _SWAP_BASE_TOKEN,\\n        address _USDT, address _token0\\n    ) public virtual initializer {\\n        require(_router != address(0), \\\"Invalid router\\\");\\n        require(_SWAP_BASE_TOKEN != address(0), \\\"Invalid SWAP_BASE_TOKEN\\\");\\n        require(_USDT != address(0), \\\"Invalid USDT\\\");\\n        require(_token0 != address(0), \\\"Invalid token0\\\");\\n        __Ownable_init();\\n\\n        treasuryWallet = _treasuryWallet;\\n        admin = _admin;\\n        priceOracle = IPriceOracle(_priceOracle);\\n        router = IRouter(_router);\\n        SWAP_BASE_TOKEN = IERC20UpgradeableExt(_SWAP_BASE_TOKEN);\\n\\n        USDT = IERC20UpgradeableExt(_USDT);\\n        usdtDecimals = USDT.decimals();\\n        require(6 <= usdtDecimals, \\\"USDT decimals must >= 6\\\");\\n\\n        tokens.push(_token0);\\n        updatePid();\\n\\n        USDT.safeApprove(address(router), type(uint).max);\\n        IERC20UpgradeableExt(_token0).safeApprove(address(router), type(uint).max);\\n    }\\n\\n    function updatePid() internal {\\n        address[] memory _tokens = tokens;\\n\\n        uint tokenCnt = _tokens.length;\\n        for (uint i = 0; i < tokenCnt; i ++) {\\n            pid[_tokens[i]] = i;\\n        }\\n    }\\n\\n    function addToken(address _token) external onlyOwner {\\n        uint _pid = pid[_token];\\n        require ((_pid == 0 && _token != tokens[0]), \\\"Already added\\\");\\n\\n        tokens.push(_token);\\n        _pid = tokens.length-1;\\n        pid[_token] = _pid;\\n\\n        if (IERC20UpgradeableExt(_token).allowance(address(this), address(router)) == 0) {\\n            IERC20UpgradeableExt(_token).safeApprove(address(router), type(uint).max);\\n        }\\n        emit AddToken(_token, _pid);\\n    }\\n\\n    function removeToken(uint _pid) external onlyOwner {\\n        uint tokenCnt = tokens.length;\\n        require(_pid < tokenCnt, \\\"Invalid pid\\\");\\n        uint pool = _getPoolInUSD(_pid);\\n        require(pool == 0, \\\"Pool is not empty\\\");\\n\\n        address _token = tokens[_pid];\\n        tokens[_pid] = tokens[tokenCnt-1];\\n        tokens.pop();\\n\\n        pid[_token] = 0;\\n        updatePid();\\n\\n        emit RemoveToken(_token, _pid);\\n    }\\n\\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\\n    function invest(address[] memory _tokens, uint[] memory _USDTAmts) external onlyVault {\\n        uint poolCnt = _tokens.length;\\n        uint USDTAmt;\\n        uint[] memory USDTAmts = new uint[](tokens.length);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            uint amount = _USDTAmts[i];\\n            USDTAmt += amount;\\n            uint _pid = pid[_tokens[i]];\\n            USDTAmts[_pid] += amount;\\n        }\\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\\n\\n        _invest(USDTAmts);\\n    }\\n\\n    function _invest(uint[] memory _USDTAmts) internal virtual {\\n        uint poolCnt = _USDTAmts.length;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            address token = tokens[i];\\n            if (token == address(USDT)) continue;\\n\\n            uint USDTAmt = _USDTAmts[i];\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(token);\\n            uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\\n            uint numerator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\\n            uint denominator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\\n            uint amountOutMin = USDTAmt * numerator * 95 / (denominator * 100);\\n\\n            if (token == address(SWAP_BASE_TOKEN)) {\\n                _swap(address(USDT), token, USDTAmt, amountOutMin);\\n            } else {\\n                _swap2(address(USDT), token, USDTAmt, amountOutMin);\\n            }\\n        }\\n    }\\n\\n    function withdrawPerc(uint _sharePerc) external onlyVault returns (uint USDTAmt) {\\n        require(_sharePerc <= 1e18, \\\"Over 100%\\\");\\n        USDTAmt = _withdraw(_sharePerc);\\n        USDT.safeTransfer(vault, USDTAmt);\\n        emit Withdraw(_sharePerc, USDTAmt);\\n    }\\n\\n    function _withdraw(uint _sharePerc) internal virtual returns (uint USDTAmt) {\\n        uint poolCnt = tokens.length;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            USDTAmt += _withdrawFromPool(i, _sharePerc);\\n        }\\n    }\\n\\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual returns (uint USDTAmt) {\\n        IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\\n        uint amount = token.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            if (address(token) == address(USDT)) {\\n                USDTAmt = amount;\\n            } else {\\n                (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n                (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\\n                uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\\n                uint numerator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\\n                uint denominator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\\n                uint amountOutMin = amount * numerator * 95 / (denominator * 100);\\n\\n                if (address(token) == address(SWAP_BASE_TOKEN)) {\\n                    USDTAmt = _swap(address(token), address(USDT), amount, amountOutMin);\\n                } else{\\n                    USDTAmt = _swap2(address(token), address(USDT), amount, amountOutMin);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = _tokenB;\\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[1];\\n    }\\n\\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](3);\\n        path[0] = _tokenA;\\n        path[1] = address(SWAP_BASE_TOKEN);\\n        path[2] = _tokenB;\\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[2];\\n    }\\n\\n    function withdrawFromPool(uint _pid, uint _sharePerc) external onlyVault returns (uint USDTAmt) {\\n        require(_sharePerc <= 1e18, \\\"Over 100%\\\");\\n        USDTAmt = _withdrawFromPool(_pid, _sharePerc);\\n        USDT.safeTransfer(vault, USDTAmt);\\n    }\\n\\n    function emergencyWithdraw() external onlyVault {\\n        // 1e18 == 100% of share\\n        uint USDTAmt = _withdraw(1e18);\\n        if (0 < USDTAmt) {\\n            USDT.safeTransfer(vault, USDTAmt);\\n        }\\n        emit EmergencyWithdraw(USDTAmt);\\n    }\\n\\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\\n        address oldTreasuryWallet = treasuryWallet;\\n        treasuryWallet = _treasuryWallet;\\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        address oldAdmin = admin;\\n        admin = _admin;\\n        emit SetAdminWallet(oldAdmin, _admin);\\n    }\\n\\n    function setVault(address _vault) external onlyOwner {\\n        require(vault == address(0), \\\"Vault set\\\");\\n        vault = _vault;\\n    }\\n\\n    /// @return the price of USDT in USD.\\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\\n        return priceOracle.getAssetPrice(address(USDT));\\n    }\\n\\n    function getEachPoolInUSD() public view returns (address[] memory, uint[] memory pools) {\\n        return (tokens, _getEachPoolInUSD());\\n    }\\n\\n    function _getEachPoolInUSD() private view returns (uint[] memory pools) {\\n        uint poolCnt = tokens.length;\\n        pools = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            pools[i] = _getPoolInUSD(i);\\n        }\\n    }\\n\\n    function _changeDecimals(uint amount, uint curDecimals, uint newDecimals) private pure returns(uint) {\\n        if (curDecimals < newDecimals) {\\n            return amount * (10 ** (newDecimals - curDecimals));\\n        } else {\\n            return amount / (10 ** (curDecimals - newDecimals));\\n        }\\n    }\\n\\n    function _getPoolInUSD(uint _pid) private view returns (uint pool) {\\n        IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\\n        uint amount = token.balanceOf(address(this));\\n        if (0 < amount) {\\n            (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\\n            uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\\n            pool = _changeDecimals(amount, tokenDecimals, 18) * TOKENPriceInUSD / (10 ** (TOKENPriceDecimals));\\n        }\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint) {\\n        uint[] memory pools = _getEachPoolInUSD();\\n        uint poolCnt = pools.length;\\n        uint allPool;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n        return allPool;\\n    }\\n\\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory, uint[] memory percentages) {\\n        uint[] memory pools = _getEachPoolInUSD();\\n        uint poolCnt = pools.length;\\n        uint allPool;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n\\n        uint defaultTargetPerc = poolCnt == 0 ? 0 : DENOMINATOR / poolCnt;\\n        percentages = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            percentages[i] = allPool == 0 ? defaultTargetPerc : pools[i] * DENOMINATOR / allPool;\\n        }\\n        return (tokens, percentages);\\n    }\\n\\n    function getAPR() external view virtual returns (uint) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[40] private __gap;\\n}\\n\",\"keccak256\":\"0x98df9921c01284c21736f28a67bc0639f51ae42736575ba4de2e2b7fcde9e846\",\"license\":\"MIT\"},\"contracts/bni/strategy/MaticBNIStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./BNIStrategy.sol\\\";\\n\\ncontract MaticBNIStrategy is BNIStrategy {\\n}\\n\",\"keccak256\":\"0x023032ea4595d4cab6aa24c21c8c1b68f3465924d6e69047eb05e48d601b151e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c8063aae09236116100f9578063db2e21bc11610097578063f2fde38b11610071578063f2fde38b14610372578063f851a44014610385578063f887ea4014610398578063fbfa77cf146103ab57600080fd5b8063db2e21bc14610344578063ed47d9091461034c578063ef1b31661461035f57600080fd5b8063c54e44eb116100d3578063c54e44eb146102f7578063c89d5b8b1461030a578063d48bfca714610311578063d8274d0a1461032457600080fd5b8063aae09236146102ba578063b47c6a27146102c2578063bd244af4146102e157600080fd5b80634631b24611610166578063704b6c0211610140578063704b6c021461027b578063715018a61461028e5780638da5cb5b14610296578063a8602fea146102a757600080fd5b80634631b2461461023f5780634f64b2be146102555780636817031b1461026857600080fd5b80632630c12f146101ae57806326b89b71146101de57806330703f32146101f3578063358764761461020657806336c5d724146102195780634626402b1461022c575b600080fd5b606b546101c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101f16101ec3660046125f0565b6103be565b005b6066546101c1906001600160a01b031681565b6101f16102143660046126b0565b610528565b6101f1610227366004612736565b61089c565b6068546101c1906001600160a01b031681565b610247610a94565b6040516101d5929190612793565b6101c1610263366004612736565b610c34565b6101f16102763660046127ea565b610c5e565b6101f16102893660046127ea565b610cef565b6101f1610d7b565b6033546001600160a01b03166101c1565b6101f16102b53660046127ea565b610db1565b610247610e35565b6102ca610ea2565b6040805192835260ff9091166020830152016101d5565b6102e9610f2c565b6040519081526020016101d5565b6067546101c1906001600160a01b031681565b60006102e9565b6101f161031f3660046127ea565b610f89565b6102e96103323660046127ea565b606d6020526000908152604090205481565b6101f161118f565b6102e961035a366004612736565b611227565b6102e961036d366004612805565b6112ff565b6101f16103803660046127ea565b6113a0565b6069546101c1906001600160a01b031681565b6065546101c1906001600160a01b031681565b606a546101c1906001600160a01b031681565b606a546001600160a01b031633146103f15760405162461bcd60e51b81526004016103e890612827565b60405180910390fd5b8151606c54600090819067ffffffffffffffff81111561041357610413612503565b60405190808252806020026020018201604052801561043c578160200160208202803683370190505b50905060005b838110156104f957600085828151811061045e5761045e61284b565b6020026020010151905080846104749190612877565b93506000606d600089858151811061048e5761048e61284b565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050818482815181106104cc576104cc61284b565b602002602001018181516104e09190612877565b9052508291506104f190508161288f565b915050610442565b50606a54606754610518916001600160a01b039182169116308561143b565b610521816114ac565b5050505050565b60006105346001611714565b9050801561054c576000805461ff0019166101001790555b6001600160a01b0385166105935760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103937baba32b960911b60448201526064016103e8565b6001600160a01b0384166105e95760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420535741505f424153455f544f4b454e00000000000000000060448201526064016103e8565b6001600160a01b03831661062e5760405162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a59081554d11560a21b60448201526064016103e8565b6001600160a01b0382166106755760405162461bcd60e51b815260206004820152600e60248201526d0496e76616c696420746f6b656e360941b60448201526064016103e8565b61067d6117a1565b606880546001600160a01b03199081166001600160a01b038b8116919091179092556069805482168a8416179055606b805482168984161790556065805482168884161790556066805482168784161790556067805490911691851691821790556040805163313ce56760e01b8152905163313ce56791600481810192602092909190829003018186803b15801561071457600080fd5b505afa158015610728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074c91906128bb565b6067805460ff60a01b1916600160a01b60ff93841681029190911791829055900416600611156107be5760405162461bcd60e51b815260206004820152601760248201527f5553445420646563696d616c73206d757374203e3d203600000000000000000060448201526064016103e8565b606c80546001810182556000919091527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe0160180546001600160a01b0319166001600160a01b0384161790556108116117d0565b606554606754610830916001600160a01b039182169116600019611894565b60655461084c906001600160a01b038481169116600019611894565b8015610892576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6033546001600160a01b031633146108c65760405162461bcd60e51b81526004016103e8906128d6565b606c548082106109065760405162461bcd60e51b815260206004820152600b60248201526a125b9d985b1a59081c1a5960aa1b60448201526064016103e8565b6000610911836119b8565b905080156109555760405162461bcd60e51b8152602060048201526011602482015270506f6f6c206973206e6f7420656d70747960781b60448201526064016103e8565b6000606c848154811061096a5761096a61284b565b6000918252602090912001546001600160a01b03169050606c61098e60018561290b565b8154811061099e5761099e61284b565b600091825260209091200154606c80546001600160a01b0390921691869081106109ca576109ca61284b565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606c805480610a0957610a09612922565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0383168252606d90526040812055610a4c6117d0565b604080516001600160a01b0383168152602081018690527f67f5552e5abc48ba6305130450943fa23b76a0b6eb18c29d3eea39559139fc5a910160405180910390a150505050565b6060806000610aa1611b91565b80519091506000805b82811015610aeb57838181518110610ac457610ac461284b565b602002602001015182610ad79190612877565b915080610ae38161288f565b915050610aaa565b5060008215610b0557610b0083612710612938565b610b08565b60005b90508267ffffffffffffffff811115610b2357610b23612503565b604051908082528060200260200182016040528015610b4c578160200160208202803683370190505b50945060005b83811015610bc8578215610b975782612710868381518110610b7657610b7661284b565b6020026020010151610b88919061295a565b610b929190612938565b610b99565b815b868281518110610bab57610bab61284b565b602090810291909101015280610bc08161288f565b915050610b52565b50606c8581805480602002602001604051908101604052809291908181526020018280548015610c2157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c03575b5050505050915095509550505050509091565b606c8181548110610c4457600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b03163314610c885760405162461bcd60e51b81526004016103e8906128d6565b606a546001600160a01b031615610ccd5760405162461bcd60e51b815260206004820152600960248201526815985d5b1d081cd95d60ba1b60448201526064016103e8565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610d195760405162461bcd60e51b81526004016103e8906128d6565b606980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9f0ac88be9159761bacf6c9e7c294c397ebf594607f6b3f2f70e7e0841ea68e891015b60405180910390a15050565b6033546001600160a01b03163314610da55760405162461bcd60e51b81526004016103e8906128d6565b610daf6000611c24565b565b6033546001600160a01b03163314610ddb5760405162461bcd60e51b81526004016103e8906128d6565b606880546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527febcecb9db04071cf4b4ecc1e2e1e4603e74c9382d6e36c3531f0b62af4c78ed79101610d6f565b606080606c610e42611b91565b815460408051602080840282018101909252828152918491830182828015610e9357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e75575b50505050509150915091509091565b606b5460675460405163b3596f0760e01b81526001600160a01b0391821660048201526000928392169063b3596f0790602401604080518083038186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f249190612979565b915091509091565b600080610f37611b91565b80519091506000805b82811015610f8157838181518110610f5a57610f5a61284b565b602002602001015182610f6d9190612877565b915080610f798161288f565b915050610f40565b509392505050565b6033546001600160a01b03163314610fb35760405162461bcd60e51b81526004016103e8906128d6565b6001600160a01b0381166000908152606d6020526040902054801580156110055750606c600081548110610fe957610fe961284b565b6000918252602090912001546001600160a01b03838116911614155b6110415760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b60448201526064016103e8565b606c80546001808201835560008390527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe01690910180546001600160a01b0319166001600160a01b038616179055905461109a919061290b565b6001600160a01b038381166000818152606d6020526040908190208490556065549051636eb1769f60e11b81523060048201529216602483015291925063dd62ed3e9060440160206040518083038186803b1580156110f857600080fd5b505afa15801561110c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113091906129a5565b61115057606554611150906001600160a01b038481169116600019611894565b604080516001600160a01b0384168152602081018390527fe1bea1af9b1d1aede8b7fa043080de8690470a8ae61449360b3d0c0bf8104b469101610d6f565b606a546001600160a01b031633146111b95760405162461bcd60e51b81526004016103e890612827565b60006111cc670de0b6b3a7640000611c76565b905080156111f157606a546067546111f1916001600160a01b03918216911683611cae565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c9060200160405180910390a150565b606a546000906001600160a01b031633146112545760405162461bcd60e51b81526004016103e890612827565b670de0b6b3a76400008211156112985760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103e8565b6112a182611c76565b606a546067549192506112c1916001600160a01b03908116911683611cae565b60408051838152602081018390527f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8910160405180910390a1919050565b606a546000906001600160a01b0316331461132c5760405162461bcd60e51b81526004016103e890612827565b670de0b6b3a76400008211156113705760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103e8565b61137a8383611cde565b606a5460675491925061139a916001600160a01b03908116911683611cae565b92915050565b6033546001600160a01b031633146113ca5760405162461bcd60e51b81526004016103e8906128d6565b6001600160a01b03811661142f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e8565b61143881611c24565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526114a69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611fb1565b50505050565b805160005b8181101561170f576000606c82815481106114ce576114ce61284b565b6000918252602090912001546067546001600160a01b039182169250168114156114f857506116fd565b600084838151811061150c5761150c61284b565b60200260200101519050600080611521610ea2565b606b5460405163b3596f0760e01b81526001600160a01b038881166004830152939550919350600092839291169063b3596f0790602401604080518083038186803b15801561156f57600080fd5b505afa158015611583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a79190612979565b915091506000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e657600080fd5b505afa1580156115fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161e91906128bb565b9050600061162c82846129be565b61163790600a612ac7565b611641908761295a565b60675490915060009061165e90600160a01b900460ff16876129be565b61166990600a612ac7565b611673908661295a565b9050600061168282606461295a565b61168c848b61295a565b61169790605f61295a565b6116a19190612938565b6066549091506001600160a01b038b8116911614156116d8576067546116d2906001600160a01b03168b8b84612083565b506116f2565b6067546116f0906001600160a01b03168b8b846121b0565b505b505050505050505050505b806117078161288f565b9150506114b1565b505050565b60008054610100900460ff161561175b578160ff1660011480156117375750303b155b6117535760405162461bcd60e51b81526004016103e890612ad6565b506000919050565b60005460ff8084169116106117825760405162461bcd60e51b81526004016103e890612ad6565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166117c85760405162461bcd60e51b81526004016103e890612b24565b610daf6122fc565b6000606c80548060200260200160405190810160405280929190818152602001828054801561182857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161180a575b505083519394506000925050505b8181101561170f5780606d60008584815181106118555761185561284b565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061188c9061288f565b915050611836565b80158061191d5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156118e357600080fd5b505afa1580156118f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191b91906129a5565b155b6119885760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016103e8565b6040516001600160a01b03831660248201526044810182905261170f90849063095ea7b360e01b9060640161146f565b600080606c83815481106119ce576119ce61284b565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b158015611a1c57600080fd5b505afa158015611a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5491906129a5565b90508015611b8a57606b5460405163b3596f0760e01b81526001600160a01b038481166004830152600092839291169063b3596f0790602401604080518083038186803b158015611aa457600080fd5b505afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc9190612979565b915091506000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1b57600080fd5b505afa158015611b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5391906128bb565b9050611b6082600a612ac7565b83611b70868460ff16601261232c565b611b7a919061295a565b611b849190612938565b95505050505b5050919050565b606c546060908067ffffffffffffffff811115611bb057611bb0612503565b604051908082528060200260200182016040528015611bd9578160200160208202803683370190505b50915060005b81811015611c1f57611bf0816119b8565b838281518110611c0257611c0261284b565b602090810291909101015280611c178161288f565b915050611bdf565b505090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606c54600090815b81811015611b8a57611c908185611cde565b611c9a9084612877565b925080611ca68161288f565b915050611c7e565b6040516001600160a01b03831660248201526044810182905261170f90849063a9059cbb60e01b9060640161146f565b600080606c8481548110611cf457611cf461284b565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b039091169250670de0b6b3a764000090859084906370a082319060240160206040518083038186803b158015611d4e57600080fd5b505afa158015611d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8691906129a5565b611d90919061295a565b611d9a9190612938565b90508015611fa9576067546001600160a01b0383811691161415611dc057809250611fa9565b600080611dcb610ea2565b606b5460405163b3596f0760e01b81526001600160a01b038881166004830152939550919350600092839291169063b3596f0790602401604080518083038186803b158015611e1957600080fd5b505afa158015611e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e519190612979565b915091506000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9057600080fd5b505afa158015611ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec891906128bb565b606754909150600090611ee590600160a01b900460ff16866129be565b611ef090600a612ac7565b611efa908561295a565b90506000611f0883856129be565b611f1390600a612ac7565b611f1d908861295a565b90506000611f2c82606461295a565b611f36848b61295a565b611f4190605f61295a565b611f4b9190612938565b6066549091506001600160a01b038b811691161415611f8457606754611f7d908b906001600160a01b03168b84612083565b9a50611fa0565b606754611f9d908b906001600160a01b03168b846121b0565b9a505b50505050505050505b505092915050565b6000612006826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123829092919063ffffffff16565b80519091501561170f57808060200190518101906120249190612b6f565b61170f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103e8565b6040805160028082526060820183526000928392919060208301908036833701905050905085816000815181106120bc576120bc61284b565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106120f0576120f061284b565b6001600160a01b0392831660209182029290920101526065546040516338ed173960e01b81529116906338ed1739906121359087908790869030904290600401612b91565b600060405180830381600087803b15801561214f57600080fd5b505af1158015612163573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261218b9190810190612bcd565b60018151811061219d5761219d61284b565b6020026020010151915050949350505050565b604080516003808252608082019092526000918291906020820160608036833701905050905085816000815181106121ea576121ea61284b565b6001600160a01b03928316602091820292909201015260665482519116908290600190811061221b5761221b61284b565b60200260200101906001600160a01b031690816001600160a01b031681525050848160028151811061224f5761224f61284b565b6001600160a01b0392831660209182029290920101526065546040516338ed173960e01b81529116906338ed1739906122949087908790869030904290600401612b91565b600060405180830381600087803b1580156122ae57600080fd5b505af11580156122c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122ea9190810190612bcd565b60028151811061219d5761219d61284b565b600054610100900460ff166123235760405162461bcd60e51b81526004016103e890612b24565b610daf33611c24565b60008183101561235c57612340838361290b565b61234b90600a612c53565b612355908561295a565b905061237b565b612366828461290b565b61237190600a612c53565b6123559085612938565b9392505050565b60606123918484600085612399565b949350505050565b6060824710156123fa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103e8565b6001600160a01b0385163b6124515760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103e8565b600080866001600160a01b0316858760405161246d9190612c8b565b60006040518083038185875af1925050503d80600081146124aa576040519150601f19603f3d011682016040523d82523d6000602084013e6124af565b606091505b50915091506124bf8282866124ca565b979650505050505050565b606083156124d957508161237b565b8251156124e95782518084602001fd5b8160405162461bcd60e51b81526004016103e89190612ca7565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561254257612542612503565b604052919050565b600067ffffffffffffffff82111561256457612564612503565b5060051b60200190565b80356001600160a01b038116811461179c57600080fd5b600082601f83011261259657600080fd5b813560206125ab6125a68361254a565b612519565b82815260059290921b840181019181810190868411156125ca57600080fd5b8286015b848110156125e557803583529183019183016125ce565b509695505050505050565b6000806040838503121561260357600080fd5b823567ffffffffffffffff8082111561261b57600080fd5b818501915085601f83011261262f57600080fd5b8135602061263f6125a68361254a565b82815260059290921b8401810191818101908984111561265e57600080fd5b948201945b83861015612683576126748661256e565b82529482019490820190612663565b9650508601359250508082111561269957600080fd5b506126a685828601612585565b9150509250929050565b600080600080600080600060e0888a0312156126cb57600080fd5b6126d48861256e565b96506126e26020890161256e565b95506126f06040890161256e565b94506126fe6060890161256e565b935061270c6080890161256e565b925061271a60a0890161256e565b915061272860c0890161256e565b905092959891949750929550565b60006020828403121561274857600080fd5b5035919050565b600081518084526020808501945080840160005b838110156127885781516001600160a01b031687529582019590820190600101612763565b509495945050505050565b6040815260006127a6604083018561274f565b82810360208481019190915284518083528582019282019060005b818110156127dd578451835293830193918301916001016127c1565b5090979650505050505050565b6000602082840312156127fc57600080fd5b61237b8261256e565b6000806040838503121561281857600080fd5b50508035926020909101359150565b6020808252600a908201526913db9b1e481d985d5b1d60b21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561288a5761288a612861565b500190565b60006000198214156128a3576128a3612861565b5060010190565b805160ff8116811461179c57600080fd5b6000602082840312156128cd57600080fd5b61237b826128aa565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008282101561291d5761291d612861565b500390565b634e487b7160e01b600052603160045260246000fd5b60008261295557634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561297457612974612861565b500290565b6000806040838503121561298c57600080fd5b8251915061299c602084016128aa565b90509250929050565b6000602082840312156129b757600080fd5b5051919050565b600060ff821660ff84168060ff038211156129db576129db612861565b019392505050565b600181815b80851115612a1e578160001904821115612a0457612a04612861565b80851615612a1157918102915b93841c93908002906129e8565b509250929050565b600082612a355750600161139a565b81612a425750600061139a565b8160018114612a585760028114612a6257612a7e565b600191505061139a565b60ff841115612a7357612a73612861565b50506001821b61139a565b5060208310610133831016604e8410600b8410161715612aa1575081810a61139a565b612aab83836129e3565b8060001904821115612abf57612abf612861565b029392505050565b600061237b60ff841683612a26565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612b8157600080fd5b8151801515811461237b57600080fd5b85815284602082015260a060408201526000612bb060a083018661274f565b6001600160a01b0394909416606083015250608001529392505050565b60006020808385031215612be057600080fd5b825167ffffffffffffffff811115612bf757600080fd5b8301601f81018513612c0857600080fd5b8051612c166125a68261254a565b81815260059190911b82018301908381019087831115612c3557600080fd5b928401925b828410156124bf57835182529284019290840190612c3a565b600061237b8383612a26565b60005b83811015612c7a578181015183820152602001612c62565b838111156114a65750506000910152565b60008251612c9d818460208701612c5f565b9190910192915050565b6020815260008251806020840152612cc6816040850160208701612c5f565b601f01601f1916919091016040019291505056fea264697066735822122036b1b21a5713ad3e142a12e780f360f38620b5ba41d3cee47af222a4892f2e3864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getUSDTPriceInUSD()": {
        "returns": {
          "_0": "the price of USDT in USD."
        }
      },
      "invest(address[],uint256[])": {
        "params": {
          "_USDTAmts": "amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1657,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9143,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "router",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IRouter)9126"
      },
      {
        "astId": 9146,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "SWAP_BASE_TOKEN",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IERC20UpgradeableExt)9134"
      },
      {
        "astId": 9149,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "USDT",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IERC20UpgradeableExt)9134"
      },
      {
        "astId": 9151,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "usdtDecimals",
        "offset": 20,
        "slot": "103",
        "type": "t_uint8"
      },
      {
        "astId": 9156,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "treasuryWallet",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 9158,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "admin",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 9160,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "vault",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 9163,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "priceOracle",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(IPriceOracle)8690"
      },
      {
        "astId": 9166,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "tokens",
        "offset": 0,
        "slot": "108",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9170,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "pid",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10564,
        "contract": "contracts/bni/strategy/MaticBNIStrategy.sol:MaticBNIStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_uint256)40_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)40_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[40]",
        "numberOfBytes": "1280"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20UpgradeableExt)9134": {
        "encoding": "inplace",
        "label": "contract IERC20UpgradeableExt",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)8690": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IRouter)9126": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}